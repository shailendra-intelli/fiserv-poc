{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = [];\nconst serversSlice = createSlice({\n  name: \"serversSlice\",\n  initialState,\n  reducers: {\n    addServer: (state, action) => {\n      console.log(\"State\", state);\n      console.log(\"Actions\", action);\n      selectCurrentData(getState());\n    },\n    editServer: (state, action) => {},\n    deleteServer: (state, action) => {},\n    deleteAllServers: (state, action) => {}\n  }\n});\nexport const selectCurrentData = state => state.upload.value;\nexport const updateServersInUploadSlice = createAsyncThunk(\"servers/updateServersInUploadSlice\", async (servers, {\n  dispatch,\n  getState\n}) => {\n  // Simulate updating servers in the uploadSlice\n  // Dispatch the updateServers action from uploadSlice\n  dispatch(updateServers(servers));\n});\nexport const {\n  addServer\n} = serversSlice.actions;\nexport const serverDetails = state => state.upload.value.servers;\nexport default serversSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","serversSlice","name","reducers","addServer","state","action","console","log","selectCurrentData","getState","editServer","deleteServer","deleteAllServers","upload","value","updateServersInUploadSlice","servers","dispatch","updateServers","actions","serverDetails","reducer"],"sources":["D:/react-typescript/intelli-gui/src/store/reducers/serversSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, current } from \"@reduxjs/toolkit\";\r\nimport { ServerData } from \"../../utils/constant/types\";\r\nimport { RootState } from \"../store\";\r\n\r\nconst initialState: ServerData[] = [];\r\n\r\nconst serversSlice = createSlice({\r\n  name: \"serversSlice\",\r\n  initialState,\r\n  reducers: {\r\n    addServer: (state, action) => {\r\n      console.log(\"State\", state);\r\n      console.log(\"Actions\", action);\r\n      selectCurrentData(getState());\r\n    },\r\n    editServer: (state, action) => {},\r\n    deleteServer: (state, action) => {},\r\n    deleteAllServers: (state, action) => {},\r\n  },\r\n});\r\n\r\nexport const selectCurrentData = (state: RootState) => state.upload.value;\r\nexport const updateServersInUploadSlice = createAsyncThunk(\r\n  \"servers/updateServersInUploadSlice\",\r\n  async (servers: Server[], { dispatch, getState }): Promise<void> => {\r\n    // Simulate updating servers in the uploadSlice\r\n    // Dispatch the updateServers action from uploadSlice\r\n    dispatch(updateServers(servers));\r\n  }\r\n);\r\n\r\nexport const { addServer } = serversSlice.actions;\r\nexport const serverDetails = (state: { upload: any }) =>\r\n  state.upload.value.servers;\r\nexport default serversSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAiB,kBAAkB;AAIzE,MAAMC,YAA0B,GAAG,EAAE;AAErC,MAAMC,YAAY,GAAGF,WAAW,CAAC;EAC/BG,IAAI,EAAE,cAAc;EACpBF,YAAY;EACZG,QAAQ,EAAE;IACRC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5BC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEH,KAAK,CAAC;MAC3BE,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,MAAM,CAAC;MAC9BG,iBAAiB,CAACC,QAAQ,CAAC,CAAC,CAAC;IAC/B,CAAC;IACDC,UAAU,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK,CAAC,CAAC;IACjCM,YAAY,EAAEA,CAACP,KAAK,EAAEC,MAAM,KAAK,CAAC,CAAC;IACnCO,gBAAgB,EAAEA,CAACR,KAAK,EAAEC,MAAM,KAAK,CAAC;EACxC;AACF,CAAC,CAAC;AAEF,OAAO,MAAMG,iBAAiB,GAAIJ,KAAgB,IAAKA,KAAK,CAACS,MAAM,CAACC,KAAK;AACzE,OAAO,MAAMC,0BAA0B,GAAGlB,gBAAgB,CACxD,oCAAoC,EACpC,OAAOmB,OAAiB,EAAE;EAAEC,QAAQ;EAAER;AAAS,CAAC,KAAoB;EAClE;EACA;EACAQ,QAAQ,CAACC,aAAa,CAACF,OAAO,CAAC,CAAC;AAClC,CACF,CAAC;AAED,OAAO,MAAM;EAAEb;AAAU,CAAC,GAAGH,YAAY,CAACmB,OAAO;AACjD,OAAO,MAAMC,aAAa,GAAIhB,KAAsB,IAClDA,KAAK,CAACS,MAAM,CAACC,KAAK,CAACE,OAAO;AAC5B,eAAehB,YAAY,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}