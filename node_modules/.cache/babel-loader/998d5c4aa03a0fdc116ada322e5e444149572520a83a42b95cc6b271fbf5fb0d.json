{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { Constants, UrlString } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserConstants, InteractionType } from './BrowserConstants.mjs';\nimport { blockIframeReload, redirectInIframe, blockNestedPopups, nonBrowserEnvironment, uninitializedPublicClientApplication } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Utility class for browser specific functions\n */\nclass BrowserUtils {\n  // #region Window Navigation and URL management\n  /**\n   * Clears hash from window url.\n   */\n  static clearHash(contentWindow) {\n    // Office.js sets history.replaceState to null\n    contentWindow.location.hash = Constants.EMPTY_STRING;\n    if (typeof contentWindow.history.replaceState === \"function\") {\n      // Full removes \"#\" from url\n      contentWindow.history.replaceState(null, Constants.EMPTY_STRING, `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\n    }\n  }\n  /**\n   * Replaces current hash with hash from provided url\n   */\n  static replaceHash(url) {\n    const urlParts = url.split(\"#\");\n    urlParts.shift(); // Remove part before the hash\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : Constants.EMPTY_STRING;\n  }\n  /**\n   * Returns boolean of whether the current window is in an iframe or not.\n   */\n  static isInIframe() {\n    return window.parent !== window;\n  }\n  /**\n   * Returns boolean of whether or not the current window is a popup opened by msal\n   */\n  static isInPopup() {\n    return typeof window !== \"undefined\" && !!window.opener && window.opener !== window && typeof window.name === \"string\" && window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0;\n  }\n  // #endregion\n  /**\n   * Returns current window URL as redirect uri\n   */\n  static getCurrentUri() {\n    return window.location.href.split(\"?\")[0].split(\"#\")[0];\n  }\n  /**\n   * Gets the homepage url for the current window location.\n   */\n  static getHomepage() {\n    const currentUrl = new UrlString(window.location.href);\n    const urlComponents = currentUrl.getUrlComponents();\n    return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n  }\n  /**\n   * Throws error if we have completed an auth and are\n   * attempting another auth request inside an iframe.\n   */\n  static blockReloadInHiddenIframes() {\n    const isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\n    // return an error if called from the hidden iframe created by the msal js silent calls\n    if (isResponseHash && BrowserUtils.isInIframe()) {\n      throw createBrowserAuthError(blockIframeReload);\n    }\n  }\n  /**\n   * Block redirect operations in iframes unless explicitly allowed\n   * @param interactionType Interaction type for the request\n   * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\n   */\n  static blockRedirectInIframe(interactionType, allowRedirectInIframe) {\n    const isIframedApp = BrowserUtils.isInIframe();\n    if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\n      // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n      throw createBrowserAuthError(redirectInIframe);\n    }\n  }\n  /**\n   * Block redirectUri loaded in popup from calling AcquireToken APIs\n   */\n  static blockAcquireTokenInPopups() {\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n    if (BrowserUtils.isInPopup()) {\n      throw createBrowserAuthError(blockNestedPopups);\n    }\n  }\n  /**\n   * Throws error if token requests are made in non-browser environment\n   * @param isBrowserEnvironment Flag indicating if environment is a browser.\n   */\n  static blockNonBrowserEnvironment(isBrowserEnvironment) {\n    if (!isBrowserEnvironment) {\n      throw createBrowserAuthError(nonBrowserEnvironment);\n    }\n  }\n  /**\n   * Throws error if initialize hasn't been called\n   * @param initialized\n   */\n  static blockAPICallsBeforeInitialize(initialized) {\n    if (!initialized) {\n      throw createBrowserAuthError(uninitializedPublicClientApplication);\n    }\n  }\n}\nexport { BrowserUtils };","map":{"version":3,"names":["clearHash","contentWindow","location","hash","Constants","EMPTY_STRING","history","replaceState","origin","pathname","search","urlParts","url","split","shift","window","opener","getCurrentUri","href"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\utils\\BrowserUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Constants, UrlString } from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { InteractionType, BrowserConstants } from \"./BrowserConstants\";\n\n/**\n * Utility class for browser specific functions\n */\nexport class BrowserUtils {\n    // #region Window Navigation and URL management\n\n    /**\n     * Clears hash from window url.\n     */\n    static clearHash(contentWindow: Window): void {\n        // Office.js sets history.replaceState to null\n        contentWindow.location.hash = Constants.EMPTY_STRING;\n        if (typeof contentWindow.history.replaceState === \"function\") {\n            // Full removes \"#\" from url\n            contentWindow.history.replaceState(\n                null,\n                Constants.EMPTY_STRING,\n                `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`\n            );\n        }\n    }\n\n    /**\n     * Replaces current hash with hash from provided url\n     */\n    static replaceHash(url: string): void {\n        const urlParts = url.split(\"#\");\n        urlParts.shift(); // Remove part before the hash\n        window.location.hash =\n            urlParts.length > 0 ? urlParts.join(\"#\") : Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Returns boolean of whether the current window is in an iframe or not.\n     */\n    static isInIframe(): boolean {\n        return window.parent !== window;\n    }\n\n    /**\n     * Returns boolean of whether or not the current window is a popup opened by msal\n     */\n    static isInPopup(): boolean {\n        return (\n            typeof window !== \"undefined\" &&\n            !!window.opener &&\n            window.opener !== window &&\n            typeof window.name === \"string\" &&\n            window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0\n        );\n    }\n\n    // #endregion\n\n    /**\n     * Returns current window URL as redirect uri\n     */\n    static getCurrentUri(): string {\n        return window.location.href.split(\"?\")[0].split(\"#\")[0];\n    }\n\n    /**\n     * Gets the homepage url for the current window location.\n     */\n    static getHomepage(): string {\n        const currentUrl = new UrlString(window.location.href);\n        const urlComponents = currentUrl.getUrlComponents();\n        return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n    }\n\n    /**\n     * Throws error if we have completed an auth and are\n     * attempting another auth request inside an iframe.\n     */\n    static blockReloadInHiddenIframes(): void {\n        const isResponseHash = UrlString.hashContainsKnownProperties(\n            window.location.hash\n        );\n        // return an error if called from the hidden iframe created by the msal js silent calls\n        if (isResponseHash && BrowserUtils.isInIframe()) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.blockIframeReload\n            );\n        }\n    }\n\n    /**\n     * Block redirect operations in iframes unless explicitly allowed\n     * @param interactionType Interaction type for the request\n     * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\n     */\n    static blockRedirectInIframe(\n        interactionType: InteractionType,\n        allowRedirectInIframe: boolean\n    ): void {\n        const isIframedApp = BrowserUtils.isInIframe();\n        if (\n            interactionType === InteractionType.Redirect &&\n            isIframedApp &&\n            !allowRedirectInIframe\n        ) {\n            // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.redirectInIframe\n            );\n        }\n    }\n\n    /**\n     * Block redirectUri loaded in popup from calling AcquireToken APIs\n     */\n    static blockAcquireTokenInPopups(): void {\n        // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n        if (BrowserUtils.isInPopup()) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.blockNestedPopups\n            );\n        }\n    }\n\n    /**\n     * Throws error if token requests are made in non-browser environment\n     * @param isBrowserEnvironment Flag indicating if environment is a browser.\n     */\n    static blockNonBrowserEnvironment(isBrowserEnvironment: boolean): void {\n        if (!isBrowserEnvironment) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.nonBrowserEnvironment\n            );\n        }\n    }\n\n    /**\n     * Throws error if initialize hasn't been called\n     * @param initialized\n     */\n    static blockAPICallsBeforeInitialize(initialized: boolean): void {\n        if (!initialized) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.uninitializedPublicClientApplication\n            );\n        }\n    }\n}\n"],"mappings":";;;;;;;;AAUA;AAEA;;AAEG;AAMI;AACH;AAaA;;EAEG;EACH;AAOA;;EAEG,OAAAA,UAAAC,aAAA;;IAKHA,aAAA,CAAAC,QAAA,CAAAC,IAAA,GAAAC,SAAA,CAAAC,YAAA;;MAEG;MACaJ,aAAW,CAAAK,OAAA,CAAAC,YAAA,OAAAH,SAAA,CAAAC,YAAA,KAAAJ,aAAA,CAAAC,QAAA,CAAAM,MAAA,GAAAP,aAAA,CAAAC,QAAA,CAAAO,QAAA,GAAAR,aAAA,CAAAC,QAAA,CAAAQ,MAAA;IAY3B;;EAEG;;AAKH;;IAEG,MAAAC,QAAA,GAAAC,GAAA,CAAAC,KAAA;IACGF,QAAY,CAAAG,KAAA;IAMlBC,MAAA,CAAAb,QAAA,CAAAC,IAAA,G;;EAGG;;AAaH;;;;EAIG;;AAkBH;;IAEG,cAAAY,MAAA,oBAC6B,EAAAA,MAAA,CAAAC,MAAA,IAShCD,MAAA,CAAAC,MAAA,KAAAD,MAAA,I;EAGG;EACH;EAQA;;;EAGG,OAAAE,cAAA;IACH,OAAoCF,MAAA,CAAAb,QAAA,CAAAgB,IAAA,CAAAL,KAAC,SAAAA,KAAa,MAAO;EAO5D"},"metadata":{},"sourceType":"module","externalDependencies":[]}