{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { CryptoOps } from './CryptoOps.mjs';\nimport { Logger, PopTokenGenerator } from '@azure/msal-common';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SignedHttpRequest {\n  constructor(shrParameters, shrOptions) {\n    const loggerOptions = shrOptions && shrOptions.loggerOptions || {};\n    this.logger = new Logger(loggerOptions, name, version);\n    this.cryptoOps = new CryptoOps(this.logger);\n    this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\n    this.shrParameters = shrParameters;\n  }\n  /**\n   * Generates and caches a keypair for the given request options.\n   * @returns Public key digest, which should be sent to the token issuer.\n   */\n  async generatePublicKeyThumbprint() {\n    const {\n      kid\n    } = await this.popTokenGenerator.generateKid(this.shrParameters);\n    return kid;\n  }\n  /**\n   * Generates a signed http request for the given payload with the given key.\n   * @param payload Payload to sign (e.g. access token)\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n   * @param claims Additional claims to include/override in the signed JWT\n   * @returns Pop token signed with the corresponding private key\n   */\n  async signRequest(payload, publicKeyThumbprint, claims) {\n    return this.popTokenGenerator.signPayload(payload, publicKeyThumbprint, this.shrParameters, claims);\n  }\n  /**\n   * Removes cached keys from browser for given public key thumbprint\n   * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n   * @returns If keys are properly deleted\n   */\n  async removeKeys(publicKeyThumbprint) {\n    return await this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint);\n  }\n}\nexport { SignedHttpRequest };","map":{"version":3,"names":["SignedHttpRequest","constructor","shrParameters","shrOptions","loggerOptions","logger","Logger","name","version","kid"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\crypto\\SignedHttpRequest.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CryptoOps } from \"./CryptoOps\";\nimport {\n    Logger,\n    LoggerOptions,\n    PopTokenGenerator,\n    SignedHttpRequestParameters,\n} from \"@azure/msal-common\";\nimport { version, name } from \"../packageMetadata\";\n\nexport type SignedHttpRequestOptions = {\n    loggerOptions: LoggerOptions;\n};\n\nexport class SignedHttpRequest {\n    private popTokenGenerator: PopTokenGenerator;\n    private cryptoOps: CryptoOps;\n    private shrParameters: SignedHttpRequestParameters;\n    private logger: Logger;\n\n    constructor(\n        shrParameters: SignedHttpRequestParameters,\n        shrOptions?: SignedHttpRequestOptions\n    ) {\n        const loggerOptions = (shrOptions && shrOptions.loggerOptions) || {};\n        this.logger = new Logger(loggerOptions, name, version);\n        this.cryptoOps = new CryptoOps(this.logger);\n        this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);\n        this.shrParameters = shrParameters;\n    }\n\n    /**\n     * Generates and caches a keypair for the given request options.\n     * @returns Public key digest, which should be sent to the token issuer.\n     */\n    async generatePublicKeyThumbprint(): Promise<string> {\n        const { kid } = await this.popTokenGenerator.generateKid(\n            this.shrParameters\n        );\n\n        return kid;\n    }\n\n    /**\n     * Generates a signed http request for the given payload with the given key.\n     * @param payload Payload to sign (e.g. access token)\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n     * @param claims Additional claims to include/override in the signed JWT\n     * @returns Pop token signed with the corresponding private key\n     */\n    async signRequest(\n        payload: string,\n        publicKeyThumbprint: string,\n        claims?: object\n    ): Promise<string> {\n        return this.popTokenGenerator.signPayload(\n            payload,\n            publicKeyThumbprint,\n            this.shrParameters,\n            claims\n        );\n    }\n\n    /**\n     * Removes cached keys from browser for given public key thumbprint\n     * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)\n     * @returns If keys are properly deleted\n     */\n    async removeKeys(publicKeyThumbprint: string): Promise<boolean> {\n        return await this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint);\n    }\n}\n"],"mappings":";;;;;;;AAMA;AAQA;;;AAOW,MAAAA,iBAA4C;EACnDC,YAAAC,aAAuB,EAAAC,UAAA;IAGnB,MAAAC,aAAA,GAAeD,UAA2B,IAAAA,UAAA,CAAAC,aAChC,IAA2B;IASzC,KAAAC,MAAA,OAAAC,MAAA,CAAAF,aAAA,EAAAG,IAAA,EAAAC,OAAA;;;IAGG,KAAAN,aAAA,GAAAA,aAAA;EACG;EAQN;;;;;;;;IAMG,OAAAO,GAAA;EACG;EAaN;;;;AAIG;;AAIN"},"metadata":{},"sourceType":"module","externalDependencies":[]}