{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { PerformanceEvents, RefreshTokenClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { silentLogoutUnsupported } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SilentRefreshClient extends StandardInteractionClient {\n  /**\n   * Exchanges the refresh token for new tokens\n   * @param request\n   */\n  async acquireToken(request) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);\n    this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, request.correlationId);\n    const silentRequest = {\n      ...request,\n      ...(await this.initializeBaseRequest(request, request.account))\n    };\n    const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, silentRequest.correlationId);\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n    const refreshTokenClient = await this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n    this.logger.verbose(\"Refresh token client created\");\n    // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n    this.performanceClient.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n    return refreshTokenClient.acquireTokenByRefreshToken(silentRequest).then(result => result).then(result => {\n      acquireTokenMeasurement.end({\n        success: true,\n        fromCache: result.fromCache,\n        requestId: result.requestId\n      });\n      return result;\n    }).catch(e => {\n      e.setCorrelationId(this.correlationId);\n      serverTelemetryManager.cacheFailedRequest(e);\n      acquireTokenMeasurement.end({\n        errorCode: e.errorCode,\n        subErrorCode: e.subError,\n        success: false\n      });\n      throw e;\n    });\n  }\n  /**\n   * Currently Unsupported\n   */\n  logout() {\n    // Synchronous so we must reject\n    return Promise.reject(createBrowserAuthError(silentLogoutUnsupported));\n  }\n  /**\n   * Creates a Refresh Client with the given authority, or the default authority.\n   * @param serverTelemetryManager\n   * @param authorityUrl\n   */\n  async createRefreshTokenClient(serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    // Create auth module.\n    this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n    const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\n    return new RefreshTokenClient(clientConfig, this.performanceClient);\n  }\n}\nexport { SilentRefreshClient };","map":{"version":3,"names":["SilentRefreshClient","StandardInteractionClient","acquireToken","request","initializeBaseRequest","account"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentRefreshClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport {\n    CommonSilentFlowRequest,\n    ServerTelemetryManager,\n    RefreshTokenClient,\n    AuthError,\n    AzureCloudOptions,\n    PerformanceEvents,\n} from \"@azure/msal-common\";\nimport { ApiId } from \"../utils/BrowserConstants\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\n\nexport class SilentRefreshClient extends StandardInteractionClient {\n    /**\n     * Exchanges the refresh token for new tokens\n     * @param request\n     */\n    async acquireToken(\n        request: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentRefreshClientAcquireToken,\n            request.correlationId\n        );\n\n        this.performanceClient.setPreQueueTime(\n            PerformanceEvents.InitializeBaseRequest,\n            request.correlationId\n        );\n        const silentRequest: CommonSilentFlowRequest = {\n            ...request,\n            ...(await this.initializeBaseRequest(request, request.account)),\n        };\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.SilentRefreshClientAcquireToken,\n            silentRequest.correlationId\n        );\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenSilent_silentFlow\n        );\n\n        const refreshTokenClient = await this.createRefreshTokenClient(\n            serverTelemetryManager,\n            silentRequest.authority,\n            silentRequest.azureCloudOptions\n        );\n        this.logger.verbose(\"Refresh token client created\");\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n        this.performanceClient.setPreQueueTime(\n            PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\n            request.correlationId\n        );\n        return refreshTokenClient\n            .acquireTokenByRefreshToken(silentRequest)\n            .then((result) => result as AuthenticationResult)\n            .then((result: AuthenticationResult) => {\n                acquireTokenMeasurement.end({\n                    success: true,\n                    fromCache: result.fromCache,\n                    requestId: result.requestId,\n                });\n\n                return result;\n            })\n            .catch((e: AuthError) => {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n                acquireTokenMeasurement.end({\n                    errorCode: e.errorCode,\n                    subErrorCode: e.subError,\n                    success: false,\n                });\n                throw e;\n            });\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(\n            createBrowserAuthError(\n                BrowserAuthErrorCodes.silentLogoutUnsupported\n            )\n        );\n    }\n\n    /**\n     * Creates a Refresh Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createRefreshTokenClient(\n        serverTelemetryManager: ServerTelemetryManager,\n        authorityUrl?: string,\n        azureCloudOptions?: AzureCloudOptions\n    ): Promise<RefreshTokenClient> {\n        // Create auth module.\n        this.performanceClient.setPreQueueTime(\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.correlationId\n        );\n        const clientConfig = await this.getClientConfiguration(\n            serverTelemetryManager,\n            authorityUrl,\n            azureCloudOptions\n        );\n        return new RefreshTokenClient(clientConfig, this.performanceClient);\n    }\n}\n"],"mappings":";;;;;;;;;AAKA;AACA;AAaA;AAEA;AAKsB,MAAAA,mBACL,SAAAC,yBAAA;EA0Db;;AAEG;AACH;EASA,MAAAC,aAAAC,OAAA;;;;MAIG,GAAAA,OAAA;MACa,eAAAC,qBACU,CAAAD,OAAA,EAAAA,OAAA,CAAAE,OAAA;IAgB7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}