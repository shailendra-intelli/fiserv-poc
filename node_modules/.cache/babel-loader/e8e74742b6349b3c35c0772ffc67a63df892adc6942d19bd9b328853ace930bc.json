{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { AADAuthorityConstants, Constants, ServerResponseType } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Url object class which can perform various transformations on url strings.\n */\nclass UrlString {\n  get urlString() {\n    return this._urlString;\n  }\n  constructor(url) {\n    this._urlString = url;\n    if (!this._urlString) {\n      // Throws error if url is empty\n      throw ClientConfigurationError.createUrlEmptyError();\n    }\n    if (!this.getHash()) {\n      this._urlString = UrlString.canonicalizeUri(url);\n    }\n  }\n  /**\n   * Ensure urls are lower case and end with a / character.\n   * @param url\n   */\n  static canonicalizeUri(url) {\n    if (url) {\n      let lowerCaseUrl = url.toLowerCase();\n      if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n      } else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n      }\n      if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n        lowerCaseUrl += \"/\";\n      }\n      return lowerCaseUrl;\n    }\n    return url;\n  }\n  /**\n   * Throws if urlString passed is not a valid authority URI string.\n   */\n  validateAsUri() {\n    // Attempts to parse url for uri components\n    let components;\n    try {\n      components = this.getUrlComponents();\n    } catch (e) {\n      throw ClientConfigurationError.createUrlParseError(e);\n    }\n    // Throw error if URI or path segments are not parseable.\n    if (!components.HostNameAndPort || !components.PathSegments) {\n      throw ClientConfigurationError.createUrlParseError(`Given url string: ${this.urlString}`);\n    }\n    // Throw error if uri is insecure.\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\n    }\n  }\n  /**\n   * Given a url and a query string return the url with provided query string appended\n   * @param url\n   * @param queryString\n   */\n  static appendQueryString(url, queryString) {\n    if (!queryString) {\n      return url;\n    }\n    return url.indexOf(\"?\") < 0 ? `${url}?${queryString}` : `${url}&${queryString}`;\n  }\n  /**\n   * Returns a url with the hash removed\n   * @param url\n   */\n  static removeHashFromUrl(url) {\n    return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n  }\n  /**\n   * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\n   * @param href The url\n   * @param tenantId The tenant id to replace\n   */\n  replaceTenantPath(tenantId) {\n    const urlObject = this.getUrlComponents();\n    const pathArray = urlObject.PathSegments;\n    if (tenantId && pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)) {\n      pathArray[0] = tenantId;\n    }\n    return UrlString.constructAuthorityUriFromObject(urlObject);\n  }\n  /**\n   * Returns the anchor part(#) of the URL\n   */\n  getHash() {\n    return UrlString.parseHash(this.urlString);\n  }\n  /**\n   * Parses out the components from a url string.\n   * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\n   */\n  getUrlComponents() {\n    // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n    const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\n    // If url string does not match regEx, we throw an error\n    const match = this.urlString.match(regEx);\n    if (!match) {\n      throw ClientConfigurationError.createUrlParseError(`Given url string: ${this.urlString}`);\n    }\n    // Url component object\n    const urlComponents = {\n      Protocol: match[1],\n      HostNameAndPort: match[4],\n      AbsolutePath: match[5],\n      QueryString: match[7]\n    };\n    let pathSegments = urlComponents.AbsolutePath.split(\"/\");\n    pathSegments = pathSegments.filter(val => val && val.length > 0); // remove empty elements\n    urlComponents.PathSegments = pathSegments;\n    if (urlComponents.QueryString && urlComponents.QueryString.endsWith(\"/\")) {\n      urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\n    }\n    return urlComponents;\n  }\n  static getDomainFromUrl(url) {\n    const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n    const match = url.match(regEx);\n    if (!match) {\n      throw ClientConfigurationError.createUrlParseError(`Given url string: ${url}`);\n    }\n    return match[2];\n  }\n  static getAbsoluteUrl(relativeUrl, baseUrl) {\n    if (relativeUrl[0] === Constants.FORWARD_SLASH) {\n      const url = new UrlString(baseUrl);\n      const baseComponents = url.getUrlComponents();\n      return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n    }\n    return relativeUrl;\n  }\n  /**\n   * Parses hash string from given string. Returns empty string if no hash symbol is found.\n   * @param hashString\n   */\n  static parseHash(hashString) {\n    const hashIndex1 = hashString.indexOf(\"#\");\n    const hashIndex2 = hashString.indexOf(\"#/\");\n    if (hashIndex2 > -1) {\n      return hashString.substring(hashIndex2 + 2);\n    } else if (hashIndex1 > -1) {\n      return hashString.substring(hashIndex1 + 1);\n    }\n    return Constants.EMPTY_STRING;\n  }\n  /**\n   * Parses query string from given string. Returns empty string if no query symbol is found.\n   * @param queryString\n   */\n  static parseQueryString(queryString) {\n    const queryIndex1 = queryString.indexOf(\"?\");\n    const queryIndex2 = queryString.indexOf(\"/?\");\n    if (queryIndex2 > -1) {\n      return queryString.substring(queryIndex2 + 2);\n    } else if (queryIndex1 > -1) {\n      return queryString.substring(queryIndex1 + 1);\n    }\n    return Constants.EMPTY_STRING;\n  }\n  /**\n   * Parses query server response string from given string.\n   * Extract hash between '?code=' and '#' if trailing '# is present.\n   * Returns empty string if no query symbol is found.\n   * @param queryString\n   */\n  static parseQueryServerResponse(queryString) {\n    const queryIndex1 = queryString.indexOf(\"?code\");\n    const queryIndex2 = queryString.indexOf(\"/?code\");\n    const hashIndex = queryString.indexOf(\"#\");\n    if (queryIndex2 > -1 && hashIndex > -1) {\n      return queryString.substring(queryIndex2 + 2, hashIndex);\n    } else if (queryIndex2 > -1) {\n      return queryString.substring(queryIndex2 + 2);\n    } else if (queryIndex1 > -1 && hashIndex > -1) {\n      return queryString.substring(queryIndex1 + 1, hashIndex);\n    } else if (queryIndex1 > -1) {\n      return queryString.substring(queryIndex1 + 1);\n    }\n    return Constants.EMPTY_STRING;\n  }\n  static constructAuthorityUriFromObject(urlObject) {\n    return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n  }\n  /**\n   * Returns URL hash as server auth code response object.\n   */\n  static getDeserializedHash(hash) {\n    // Check if given hash is empty\n    if (!hash) {\n      return {};\n    }\n    // Strip the # symbol if present\n    const parsedHash = UrlString.parseHash(hash);\n    // If # symbol was not present, above will return empty string, so give original hash value\n    const deserializedHash = StringUtils.queryStringToObject(parsedHash || hash);\n    // Check if deserialization didn't work\n    if (!deserializedHash) {\n      throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\n    }\n    return deserializedHash;\n  }\n  /**\n   * Returns URL query string as server auth code response object.\n   */\n  static getDeserializedQueryString(query) {\n    // Check if given query is empty\n    if (!query) {\n      return {};\n    }\n    // Strip the ? symbol if present\n    const parsedQueryString = UrlString.parseQueryString(query);\n    // If ? symbol was not present, above will return empty string, so give original query value\n    const deserializedQueryString = StringUtils.queryStringToObject(parsedQueryString || query);\n    // Check if deserialization didn't work\n    if (!deserializedQueryString) {\n      throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedQueryString));\n    }\n    return deserializedQueryString;\n  }\n  /**\n   * Returns either deserialized query string or deserialized hash, depending on the serverResponseType\n   * as a server auth code response object.\n   */\n  static getDeserializedCodeResponse(serverResponseType, hashFragment) {\n    const hashUrlString = new UrlString(hashFragment);\n    let serverParams;\n    if (serverResponseType === ServerResponseType.QUERY) {\n      serverParams = UrlString.getDeserializedQueryString(hashFragment);\n    } else {\n      serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());\n    }\n    return serverParams;\n  }\n  /**\n   * Check if the hash of the URL string contains known properties\n   */\n  static hashContainsKnownProperties(hash) {\n    if (!hash || hash.indexOf(\"=\") < 0) {\n      // Hash doesn't contain key/value pairs\n      return false;\n    }\n    const parameters = UrlString.getDeserializedHash(hash);\n    return !!(parameters.code || parameters.error_description || parameters.error || parameters.state);\n  }\n}\nexport { UrlString };","map":{"version":3,"names":["_urlString","constructor","url","ClientConfigurationError","createUrlEmptyError","canonicalizeUri","StringUtils","endsWith","lowerCaseUrl","slice","components","getUrlComponents","createUrlParseError","e","Protocol","toLowerCase","createInsecureAuthorityUriError","urlString","appendQueryString","queryString","indexOf"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\url\\UrlString.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { IUri } from \"./IUri\";\nimport {\n    AADAuthorityConstants,\n    Constants,\n    ServerResponseType,\n} from \"../utils/Constants\";\n\n/**\n * Url object class which can perform various transformations on url strings.\n */\nexport class UrlString {\n    // internal url string field\n    private _urlString: string;\n    public get urlString(): string {\n        return this._urlString;\n    }\n\n    constructor(url: string) {\n        this._urlString = url;\n        if (!this._urlString) {\n            // Throws error if url is empty\n            throw ClientConfigurationError.createUrlEmptyError();\n        }\n\n        if (!this.getHash()) {\n            this._urlString = UrlString.canonicalizeUri(url);\n        }\n    }\n\n    /**\n     * Ensure urls are lower case and end with a / character.\n     * @param url\n     */\n    static canonicalizeUri(url: string): string {\n        if (url) {\n            let lowerCaseUrl = url.toLowerCase();\n\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n            } else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n            }\n\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n                lowerCaseUrl += \"/\";\n            }\n\n            return lowerCaseUrl;\n        }\n\n        return url;\n    }\n\n    /**\n     * Throws if urlString passed is not a valid authority URI string.\n     */\n    validateAsUri(): void {\n        // Attempts to parse url for uri components\n        let components;\n        try {\n            components = this.getUrlComponents();\n        } catch (e) {\n            throw ClientConfigurationError.createUrlParseError(e as string);\n        }\n\n        // Throw error if URI or path segments are not parseable.\n        if (!components.HostNameAndPort || !components.PathSegments) {\n            throw ClientConfigurationError.createUrlParseError(\n                `Given url string: ${this.urlString}`\n            );\n        }\n\n        // Throw error if uri is insecure.\n        if (\n            !components.Protocol ||\n            components.Protocol.toLowerCase() !== \"https:\"\n        ) {\n            throw ClientConfigurationError.createInsecureAuthorityUriError(\n                this.urlString\n            );\n        }\n    }\n\n    /**\n     * Given a url and a query string return the url with provided query string appended\n     * @param url\n     * @param queryString\n     */\n    static appendQueryString(url: string, queryString: string): string {\n        if (!queryString) {\n            return url;\n        }\n\n        return url.indexOf(\"?\") < 0\n            ? `${url}?${queryString}`\n            : `${url}&${queryString}`;\n    }\n\n    /**\n     * Returns a url with the hash removed\n     * @param url\n     */\n    static removeHashFromUrl(url: string): string {\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n    }\n\n    /**\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\n     * @param href The url\n     * @param tenantId The tenant id to replace\n     */\n    replaceTenantPath(tenantId: string): UrlString {\n        const urlObject = this.getUrlComponents();\n        const pathArray = urlObject.PathSegments;\n        if (\n            tenantId &&\n            pathArray.length !== 0 &&\n            (pathArray[0] === AADAuthorityConstants.COMMON ||\n                pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)\n        ) {\n            pathArray[0] = tenantId;\n        }\n        return UrlString.constructAuthorityUriFromObject(urlObject);\n    }\n\n    /**\n     * Returns the anchor part(#) of the URL\n     */\n    getHash(): string {\n        return UrlString.parseHash(this.urlString);\n    }\n\n    /**\n     * Parses out the components from a url string.\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\n     */\n    getUrlComponents(): IUri {\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n        const regEx = RegExp(\n            \"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\"\n        );\n\n        // If url string does not match regEx, we throw an error\n        const match = this.urlString.match(regEx);\n        if (!match) {\n            throw ClientConfigurationError.createUrlParseError(\n                `Given url string: ${this.urlString}`\n            );\n        }\n\n        // Url component object\n        const urlComponents = {\n            Protocol: match[1],\n            HostNameAndPort: match[4],\n            AbsolutePath: match[5],\n            QueryString: match[7],\n        } as IUri;\n\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\n        pathSegments = pathSegments.filter((val) => val && val.length > 0); // remove empty elements\n        urlComponents.PathSegments = pathSegments;\n\n        if (\n            urlComponents.QueryString &&\n            urlComponents.QueryString.endsWith(\"/\")\n        ) {\n            urlComponents.QueryString = urlComponents.QueryString.substring(\n                0,\n                urlComponents.QueryString.length - 1\n            );\n        }\n        return urlComponents;\n    }\n\n    static getDomainFromUrl(url: string): string {\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n\n        const match = url.match(regEx);\n\n        if (!match) {\n            throw ClientConfigurationError.createUrlParseError(\n                `Given url string: ${url}`\n            );\n        }\n\n        return match[2];\n    }\n\n    static getAbsoluteUrl(relativeUrl: string, baseUrl: string): string {\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\n            const url = new UrlString(baseUrl);\n            const baseComponents = url.getUrlComponents();\n\n            return (\n                baseComponents.Protocol +\n                \"//\" +\n                baseComponents.HostNameAndPort +\n                relativeUrl\n            );\n        }\n\n        return relativeUrl;\n    }\n\n    /**\n     * Parses hash string from given string. Returns empty string if no hash symbol is found.\n     * @param hashString\n     */\n    static parseHash(hashString: string): string {\n        const hashIndex1 = hashString.indexOf(\"#\");\n        const hashIndex2 = hashString.indexOf(\"#/\");\n        if (hashIndex2 > -1) {\n            return hashString.substring(hashIndex2 + 2);\n        } else if (hashIndex1 > -1) {\n            return hashString.substring(hashIndex1 + 1);\n        }\n        return Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Parses query string from given string. Returns empty string if no query symbol is found.\n     * @param queryString\n     */\n    static parseQueryString(queryString: string): string {\n        const queryIndex1 = queryString.indexOf(\"?\");\n        const queryIndex2 = queryString.indexOf(\"/?\");\n        if (queryIndex2 > -1) {\n            return queryString.substring(queryIndex2 + 2);\n        } else if (queryIndex1 > -1) {\n            return queryString.substring(queryIndex1 + 1);\n        }\n        return Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Parses query server response string from given string.\n     * Extract hash between '?code=' and '#' if trailing '# is present.\n     * Returns empty string if no query symbol is found.\n     * @param queryString\n     */\n    static parseQueryServerResponse(queryString: string): string {\n        const queryIndex1 = queryString.indexOf(\"?code\");\n        const queryIndex2 = queryString.indexOf(\"/?code\");\n        const hashIndex = queryString.indexOf(\"#\");\n        if (queryIndex2 > -1 && hashIndex > -1) {\n            return queryString.substring(queryIndex2 + 2, hashIndex);\n        } else if (queryIndex2 > -1) {\n            return queryString.substring(queryIndex2 + 2);\n        } else if (queryIndex1 > -1 && hashIndex > -1) {\n            return queryString.substring(queryIndex1 + 1, hashIndex);\n        } else if (queryIndex1 > -1) {\n            return queryString.substring(queryIndex1 + 1);\n        }\n        return Constants.EMPTY_STRING;\n    }\n\n    static constructAuthorityUriFromObject(urlObject: IUri): UrlString {\n        return new UrlString(\n            urlObject.Protocol +\n                \"//\" +\n                urlObject.HostNameAndPort +\n                \"/\" +\n                urlObject.PathSegments.join(\"/\")\n        );\n    }\n\n    /**\n     * Returns URL hash as server auth code response object.\n     */\n    static getDeserializedHash(hash: string): ServerAuthorizationCodeResponse {\n        // Check if given hash is empty\n        if (!hash) {\n            return {};\n        }\n        // Strip the # symbol if present\n        const parsedHash = UrlString.parseHash(hash);\n        // If # symbol was not present, above will return empty string, so give original hash value\n        const deserializedHash: ServerAuthorizationCodeResponse =\n            StringUtils.queryStringToObject<ServerAuthorizationCodeResponse>(\n                parsedHash || hash\n            );\n        // Check if deserialization didn't work\n        if (!deserializedHash) {\n            throw ClientAuthError.createHashNotDeserializedError(\n                JSON.stringify(deserializedHash)\n            );\n        }\n        return deserializedHash;\n    }\n\n    /**\n     * Returns URL query string as server auth code response object.\n     */\n    static getDeserializedQueryString(\n        query: string\n    ): ServerAuthorizationCodeResponse {\n        // Check if given query is empty\n        if (!query) {\n            return {};\n        }\n        // Strip the ? symbol if present\n        const parsedQueryString = UrlString.parseQueryString(query);\n        // If ? symbol was not present, above will return empty string, so give original query value\n        const deserializedQueryString: ServerAuthorizationCodeResponse =\n            StringUtils.queryStringToObject<ServerAuthorizationCodeResponse>(\n                parsedQueryString || query\n            );\n        // Check if deserialization didn't work\n        if (!deserializedQueryString) {\n            throw ClientAuthError.createHashNotDeserializedError(\n                JSON.stringify(deserializedQueryString)\n            );\n        }\n        return deserializedQueryString;\n    }\n    /**\n     * Returns either deserialized query string or deserialized hash, depending on the serverResponseType\n     * as a server auth code response object.\n     */\n    static getDeserializedCodeResponse(\n        serverResponseType: ServerResponseType | undefined,\n        hashFragment: string\n    ): ServerAuthorizationCodeResponse {\n        const hashUrlString = new UrlString(hashFragment);\n        let serverParams: ServerAuthorizationCodeResponse;\n        if (serverResponseType === ServerResponseType.QUERY) {\n            serverParams = UrlString.getDeserializedQueryString(hashFragment);\n        } else {\n            serverParams = UrlString.getDeserializedHash(\n                hashUrlString.getHash()\n            );\n        }\n        return serverParams;\n    }\n\n    /**\n     * Check if the hash of the URL string contains known properties\n     */\n    static hashContainsKnownProperties(hash: string): boolean {\n        if (!hash || hash.indexOf(\"=\") < 0) {\n            // Hash doesn't contain key/value pairs\n            return false;\n        }\n\n        const parameters: ServerAuthorizationCodeResponse =\n            UrlString.getDeserializedHash(hash);\n        return !!(\n            parameters.code ||\n            parameters.error_description ||\n            parameters.error ||\n            parameters.state\n        );\n    }\n}\n"],"mappings":";;;;;;;;AAKA;AAIA;AACA;AAMA;;AAUgB;AAYZ;;;IAGG,YAAAA,UAAA;EACH;EAoBAC,YAAAC,GAAA;;IAEG,UAAAF,UAAA;MACH;MA2BA,MAAAG,wBAAA,CAAAC,mBAAA;;;;IAIG;;EAWH;;;AAGG;EACH,OAAOC,eAAiBA,CAAAH,GAAA,EAAI;IAI5B,IAAAA,GAAA;;;;MAIG,OACH,IAAiBI,WAAW,CAAAC,QAAS,CAASC,YAAA;QAc9CA,YAAA,GAAAA,YAAA,CAAAC,KAAA;;MAEG,KAAAH,WAAA,CAAAC,QAAA,CAAAC,YAAA;QACcA,YAAA;MAIjB;;;IAGG,OAAAN,GAAA;EACH;EAsCA;;AA8BA;;;IAGG,IAAAQ,UAAA;IACH,IAAgB;MAWhBA,UAAA,QAAAC,gBAAA;;MAGG,MAAAR,wBAAA,CAAAS,mBAAA,CAAAC,CAAA;IACH;IAWA;;;;;IAKG,KAAAH,UAAA,CAAAI,QAAA,IAC4BJ,UAAA,CAAAI,QAAA,CAAAC,WAAA,OAAc,QAAS,EAAM;MAgBtB,MAAAZ,wBAAA,CAACa,+BAA2B,MAAAC,SAAA;IAUlE;;EAEG;AACH;AAqBA;;AAEG;EACH,OAAOC,iBAA0BA,CAAAhB,GAAA,EAAAiB,WACtB;IAqBX,KAAAA,WAAA;;;IAGG,OAAAjB,GAAA,CAAAkB,OAAA,YACI,GAAAlB,GAAA,IAAAiB,WAAA,KAgBP,GAAAjB,GAAA,IAAAiB,WAAA;;EAEG;AACH;AAeH"},"metadata":{},"sourceType":"module","externalDependencies":[]}