{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { PerformanceEvents, AuthError, SilentFlowClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.mjs';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { cryptoKeyNotFound } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SilentCacheClient extends StandardInteractionClient {\n  /**\n   * Returns unexpired tokens from the cache, if available\n   * @param silentRequest\n   */\n  async acquireToken(silentRequest) {\n    const acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\n    // Telemetry manager only used to increment cacheHits here\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n    const silentAuthClient = await this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n    this.logger.verbose(\"Silent auth client created\");\n    try {\n      const cachedToken = await silentAuthClient.acquireCachedToken(silentRequest);\n      acquireTokenMeasurement.end({\n        success: true,\n        fromCache: true\n      });\n      return cachedToken;\n    } catch (error) {\n      if (error instanceof BrowserAuthError && error.errorCode === cryptoKeyNotFound) {\n        this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n      }\n      acquireTokenMeasurement.end({\n        errorCode: error instanceof AuthError && error.errorCode || undefined,\n        subErrorCode: error instanceof AuthError && error.subError || undefined,\n        success: false\n      });\n      throw error;\n    }\n  }\n  /**\n   * API to silenty clear the browser cache.\n   * @param logoutRequest\n   */\n  logout(logoutRequest) {\n    this.logger.verbose(\"logoutRedirect called\");\n    const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n    return this.clearCacheOnLogout(validLogoutRequest?.account);\n  }\n  /**\n   * Creates an Silent Flow Client with the given authority, or the default authority.\n   * @param serverTelemetryManager\n   * @param authorityUrl\n   */\n  async createSilentFlowClient(serverTelemetryManager, authorityUrl, azureCloudOptions) {\n    // Create auth module.\n    this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n    const clientConfig = await this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions);\n    return new SilentFlowClient(clientConfig, this.performanceClient);\n  }\n  async initializeSilentRequest(request, account) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeSilentRequest, this.correlationId);\n    this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\n    return {\n      ...request,\n      ...(await this.initializeBaseRequest(request, account)),\n      account: account,\n      forceRefresh: request.forceRefresh || false\n    };\n  }\n}\nexport { SilentCacheClient };","map":{"version":3,"names":["acquireTokenMeasurement","performanceClient","startMeasurement","PerformanceEvents","SilentCacheClientAcquireToken","silentRequest","correlationId","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","cachedToken","silentAuthClient","acquireCachedToken","end","success","fromCache"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentCacheClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport {\n    CommonSilentFlowRequest,\n    SilentFlowClient,\n    ServerTelemetryManager,\n    AccountInfo,\n    AzureCloudOptions,\n    PerformanceEvents,\n    AuthError,\n} from \"@azure/msal-common\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { ApiId } from \"../utils/BrowserConstants\";\nimport {\n    BrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\n\nexport class SilentCacheClient extends StandardInteractionClient {\n    /**\n     * Returns unexpired tokens from the cache, if available\n     * @param silentRequest\n     */\n    async acquireToken(\n        silentRequest: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        const acquireTokenMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.SilentCacheClientAcquireToken,\n            silentRequest.correlationId\n        );\n        // Telemetry manager only used to increment cacheHits here\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenSilent_silentFlow\n        );\n\n        const silentAuthClient = await this.createSilentFlowClient(\n            serverTelemetryManager,\n            silentRequest.authority,\n            silentRequest.azureCloudOptions\n        );\n        this.logger.verbose(\"Silent auth client created\");\n\n        try {\n            const cachedToken = (await silentAuthClient.acquireCachedToken(\n                silentRequest\n            )) as AuthenticationResult;\n\n            acquireTokenMeasurement.end({\n                success: true,\n                fromCache: true,\n            });\n            return cachedToken;\n        } catch (error) {\n            if (\n                error instanceof BrowserAuthError &&\n                error.errorCode === BrowserAuthErrorCodes.cryptoKeyNotFound\n            ) {\n                this.logger.verbose(\n                    \"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\"\n                );\n            }\n            acquireTokenMeasurement.end({\n                errorCode:\n                    (error instanceof AuthError && error.errorCode) ||\n                    undefined,\n                subErrorCode:\n                    (error instanceof AuthError && error.subError) || undefined,\n                success: false,\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * API to silenty clear the browser cache.\n     * @param logoutRequest\n     */\n    logout(logoutRequest?: ClearCacheRequest): Promise<void> {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        return this.clearCacheOnLogout(validLogoutRequest?.account);\n    }\n\n    /**\n     * Creates an Silent Flow Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createSilentFlowClient(\n        serverTelemetryManager: ServerTelemetryManager,\n        authorityUrl?: string,\n        azureCloudOptions?: AzureCloudOptions\n    ): Promise<SilentFlowClient> {\n        // Create auth module.\n        this.performanceClient.setPreQueueTime(\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.correlationId\n        );\n        const clientConfig = await this.getClientConfiguration(\n            serverTelemetryManager,\n            authorityUrl,\n            azureCloudOptions\n        );\n        return new SilentFlowClient(clientConfig, this.performanceClient);\n    }\n\n    async initializeSilentRequest(\n        request: SilentRequest,\n        account: AccountInfo\n    ): Promise<CommonSilentFlowRequest> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.InitializeSilentRequest,\n            this.correlationId\n        );\n\n        this.performanceClient.setPreQueueTime(\n            PerformanceEvents.InitializeBaseRequest,\n            this.correlationId\n        );\n        return {\n            ...request,\n            ...(await this.initializeBaseRequest(request, account)),\n            account: account,\n            forceRefresh: request.forceRefresh || false,\n        };\n    }\n}\n"],"mappings":";;;;;;;;;AAKA;AACA;AASA;AAMA;;EAOO;;AAmDH;;;IAGG,MAAAA,uBAAA,QAAAC,iBAAA,CAAAC,gBAAA,CAAAC,iBAAA,CAAAC,6BAAA,EAAAC,aAAA,CAAAC,aAAA;;IAOH,MAAAC,sBAAA,QAAAC,gCAAA,CAAAC,KAAA,CAAAC,6BAAA;;;;MAIG,MAAAC,WAAA,SAAAC,gBAAA,CAAAC,kBAAA,CAAAR,aAAA;MACaL,uBAAA,CAAsBc,GACZ;QAiBpBC,OAAA,MACF;QAmBPC,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}