{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Separators, Constants } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Function to build a client info object from server clientInfo string\n * @param rawClientInfo\n * @param crypto\n */\nfunction buildClientInfo(rawClientInfo, crypto) {\n  if (!rawClientInfo) {\n    throw ClientAuthError.createClientInfoEmptyError();\n  }\n  try {\n    const decodedClientInfo = crypto.base64Decode(rawClientInfo);\n    return JSON.parse(decodedClientInfo);\n  } catch (e) {\n    throw ClientAuthError.createClientInfoDecodingError(e.message);\n  }\n}\n/**\n * Function to build a client info object from cached homeAccountId string\n * @param homeAccountId\n */\nfunction buildClientInfoFromHomeAccountId(homeAccountId) {\n  if (!homeAccountId) {\n    throw ClientAuthError.createClientInfoDecodingError(\"Home account ID was empty.\");\n  }\n  const clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\n  return {\n    uid: clientInfoParts[0],\n    utid: clientInfoParts.length < 2 ? Constants.EMPTY_STRING : clientInfoParts[1]\n  };\n}\nexport { buildClientInfo, buildClientInfoFromHomeAccountId };","map":{"version":3,"names":["rawClientInfo","ClientAuthError","createClientInfoEmptyError","JSON","parse","decodedClientInfo"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\account\\ClientInfo.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { Separators, Constants } from \"../utils/Constants\";\n\n/**\n * Client info object which consists of two IDs. Need to add more info here.\n */\nexport type ClientInfo = {\n    uid: string;\n    utid: string;\n};\n\n/**\n * Function to build a client info object from server clientInfo string\n * @param rawClientInfo\n * @param crypto\n */\nexport function buildClientInfo(\n    rawClientInfo: string,\n    crypto: ICrypto\n): ClientInfo {\n    if (!rawClientInfo) {\n        throw ClientAuthError.createClientInfoEmptyError();\n    }\n\n    try {\n        const decodedClientInfo: string = crypto.base64Decode(rawClientInfo);\n        return JSON.parse(decodedClientInfo) as ClientInfo;\n    } catch (e) {\n        throw ClientAuthError.createClientInfoDecodingError(\n            (e as ClientAuthError).message\n        );\n    }\n}\n\n/**\n * Function to build a client info object from cached homeAccountId string\n * @param homeAccountId\n */\nexport function buildClientInfoFromHomeAccountId(\n    homeAccountId: string\n): ClientInfo {\n    if (!homeAccountId) {\n        throw ClientAuthError.createClientInfoDecodingError(\n            \"Home account ID was empty.\"\n        );\n    }\n    const clientInfoParts: string[] = homeAccountId.split(\n        Separators.CLIENT_INFO_SEPARATOR,\n        2\n    );\n    return {\n        uid: clientInfoParts[0],\n        utid:\n            clientInfoParts.length < 2\n                ? Constants.EMPTY_STRING\n                : clientInfoParts[1],\n    };\n}\n"],"mappings":";;;;;;AAMA;AAGA;;AAEG;;;AAMH;;;;EAIG,KAAAA,aAAA;IACa,MAAAC,eAAA,CAAAC,0BACG;EAiBnB;;;IAGG,OAAAC,IAAA,CAAAC,KAAA,CAAAC,iBAAA;EACH,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}