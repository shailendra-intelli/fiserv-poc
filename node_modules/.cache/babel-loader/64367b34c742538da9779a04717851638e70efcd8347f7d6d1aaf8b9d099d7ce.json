{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { CredentialType, CacheType, Separators, Constants, AuthenticationScheme } from '../../utils/Constants.mjs';\nimport { ClientAuthError } from '../../error/ClientAuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\n *\n * Key:Value Schema:\n *\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      familyId: Family ID identifier, usually only used for refresh tokens\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\n *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request\n *      userAssertionHash: Matches the SHA 256 hash of the obo_assertion for the OBO flow\n * }\n */\nclass CredentialEntity {\n  /**\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n   */\n  generateAccountId() {\n    return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\n  }\n  /**\n   * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\n   */\n  generateCredentialId() {\n    return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);\n  }\n  /**\n   * Generate target key component as per schema: <target>\n   */\n  generateTarget() {\n    return CredentialEntity.generateTargetForCacheKey(this.target);\n  }\n  /**\n   * generates credential key\n   */\n  generateCredentialKey() {\n    return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId, this.tokenType, this.requestedClaimsHash);\n  }\n  /**\n   * returns the type of the cache (in this case credential)\n   */\n  generateType() {\n    switch (this.credentialType) {\n      case CredentialType.ID_TOKEN:\n        return CacheType.ID_TOKEN;\n      case CredentialType.ACCESS_TOKEN:\n      case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n        return CacheType.ACCESS_TOKEN;\n      case CredentialType.REFRESH_TOKEN:\n        return CacheType.REFRESH_TOKEN;\n      default:\n        {\n          throw ClientAuthError.createUnexpectedCredentialTypeError();\n        }\n    }\n  }\n  /**\n   * generates credential key\n   * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\n   */\n  static generateCredentialCacheKey(homeAccountId, environment, credentialType, clientId, realm, target, familyId, tokenType, requestedClaimsHash) {\n    const credentialKey = [this.generateAccountIdForCacheKey(homeAccountId, environment), this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId), this.generateTargetForCacheKey(target), this.generateClaimsHashForCacheKey(requestedClaimsHash), this.generateSchemeForCacheKey(tokenType)];\n    return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  }\n  /**\n   * generates Account Id for keys\n   * @param homeAccountId\n   * @param environment\n   */\n  static generateAccountIdForCacheKey(homeAccountId, environment) {\n    const accountId = [homeAccountId, environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  }\n  /**\n   * Generates Credential Id for keys\n   * @param credentialType\n   * @param realm\n   * @param clientId\n   * @param familyId\n   */\n  static generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId) {\n    const clientOrFamilyId = credentialType === CredentialType.REFRESH_TOKEN ? familyId || clientId : clientId;\n    const credentialId = [credentialType, clientOrFamilyId, realm || Constants.EMPTY_STRING];\n    return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  }\n  /**\n   * Generate target key component as per schema: <target>\n   */\n  static generateTargetForCacheKey(scopes) {\n    return (scopes || Constants.EMPTY_STRING).toLowerCase();\n  }\n  /**\n   * Generate requested claims key component as per schema: <requestedClaims>\n   */\n  static generateClaimsHashForCacheKey(requestedClaimsHash) {\n    return (requestedClaimsHash || Constants.EMPTY_STRING).toLowerCase();\n  }\n  /**\n   * Generate scheme key componenet as per schema: <scheme>\n   */\n  static generateSchemeForCacheKey(tokenType) {\n    /*\n     * PoP Tokens and SSH certs include scheme in cache key\n     * Cast to lowercase to handle \"bearer\" from ADFS\n     */\n    return tokenType && tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? tokenType.toLowerCase() : Constants.EMPTY_STRING;\n  }\n}\nexport { CredentialEntity };","map":{"version":3,"names":["CredentialEntity","generateAccountId","generateAccountIdForCacheKey","homeAccountId","environment","generateCredentialId","generateCredentialIdForCacheKey","credentialType","clientId","realm","familyId","generateTarget","generateCredentialKey","generateCredentialCacheKey","target","tokenType","requestedClaimsHash","generateType","CacheType","ID_TOKEN","CredentialType","ACCESS_TOKEN_WITH_AUTH_SCHEME","ClientAuthError","createUnexpectedCredentialTypeError","credentialKey","generateTargetForCacheKey","generateClaimsHashForCacheKey","join","Separators","CACHE_KEY_SEPARATOR","toLowerCase"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\cache\\entities\\CredentialEntity.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Separators,\n    CredentialType,\n    CacheType,\n    Constants,\n    AuthenticationScheme,\n} from \"../../utils/Constants\";\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\n\n/**\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\n *\n * Key:Value Schema:\n *\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>\n *\n * Value Schema:\n * {\n *      homeAccountId: home account identifier for the auth scheme,\n *      environment: entity that issued the token, represented as a full host\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\n *      clientId: client ID of the application\n *      secret: Actual credential as a string\n *      familyId: Family ID identifier, usually only used for refresh tokens\n *      realm: Full tenant or organizational identifier that the account belongs to\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\n *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request\n *      userAssertionHash: Matches the SHA 256 hash of the obo_assertion for the OBO flow\n * }\n */\nexport class CredentialEntity {\n    homeAccountId: string;\n    environment: string;\n    credentialType: CredentialType;\n    clientId: string;\n    secret: string;\n    familyId?: string;\n    realm?: string;\n    target?: string;\n    userAssertionHash?: string;\n    tokenType?: AuthenticationScheme;\n    keyId?: string;\n    requestedClaimsHash?: string;\n\n    /**\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n     */\n    generateAccountId(): string {\n        return CredentialEntity.generateAccountIdForCacheKey(\n            this.homeAccountId,\n            this.environment\n        );\n    }\n\n    /**\n     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\n     */\n    generateCredentialId(): string {\n        return CredentialEntity.generateCredentialIdForCacheKey(\n            this.credentialType,\n            this.clientId,\n            this.realm,\n            this.familyId\n        );\n    }\n\n    /**\n     * Generate target key component as per schema: <target>\n     */\n    generateTarget(): string {\n        return CredentialEntity.generateTargetForCacheKey(this.target);\n    }\n\n    /**\n     * generates credential key\n     */\n    generateCredentialKey(): string {\n        return CredentialEntity.generateCredentialCacheKey(\n            this.homeAccountId,\n            this.environment,\n            this.credentialType,\n            this.clientId,\n            this.realm,\n            this.target,\n            this.familyId,\n            this.tokenType,\n            this.requestedClaimsHash\n        );\n    }\n\n    /**\n     * returns the type of the cache (in this case credential)\n     */\n    generateType(): number {\n        switch (this.credentialType) {\n            case CredentialType.ID_TOKEN:\n                return CacheType.ID_TOKEN;\n            case CredentialType.ACCESS_TOKEN:\n            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                return CacheType.ACCESS_TOKEN;\n            case CredentialType.REFRESH_TOKEN:\n                return CacheType.REFRESH_TOKEN;\n            default: {\n                throw ClientAuthError.createUnexpectedCredentialTypeError();\n            }\n        }\n    }\n\n    /**\n     * generates credential key\n     * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\n     */\n    static generateCredentialCacheKey(\n        homeAccountId: string,\n        environment: string,\n        credentialType: CredentialType,\n        clientId: string,\n        realm?: string,\n        target?: string,\n        familyId?: string,\n        tokenType?: AuthenticationScheme,\n        requestedClaimsHash?: string\n    ): string {\n        const credentialKey = [\n            this.generateAccountIdForCacheKey(homeAccountId, environment),\n            this.generateCredentialIdForCacheKey(\n                credentialType,\n                clientId,\n                realm,\n                familyId\n            ),\n            this.generateTargetForCacheKey(target),\n            this.generateClaimsHashForCacheKey(requestedClaimsHash),\n            this.generateSchemeForCacheKey(tokenType),\n        ];\n\n        return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * generates Account Id for keys\n     * @param homeAccountId\n     * @param environment\n     */\n    private static generateAccountIdForCacheKey(\n        homeAccountId: string,\n        environment: string\n    ): string {\n        const accountId: Array<string> = [homeAccountId, environment];\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Generates Credential Id for keys\n     * @param credentialType\n     * @param realm\n     * @param clientId\n     * @param familyId\n     */\n    private static generateCredentialIdForCacheKey(\n        credentialType: CredentialType,\n        clientId: string,\n        realm?: string,\n        familyId?: string\n    ): string {\n        const clientOrFamilyId =\n            credentialType === CredentialType.REFRESH_TOKEN\n                ? familyId || clientId\n                : clientId;\n        const credentialId: Array<string> = [\n            credentialType,\n            clientOrFamilyId,\n            realm || Constants.EMPTY_STRING,\n        ];\n\n        return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n\n    /**\n     * Generate target key component as per schema: <target>\n     */\n    private static generateTargetForCacheKey(scopes?: string): string {\n        return (scopes || Constants.EMPTY_STRING).toLowerCase();\n    }\n\n    /**\n     * Generate requested claims key component as per schema: <requestedClaims>\n     */\n    private static generateClaimsHashForCacheKey(\n        requestedClaimsHash?: string\n    ): string {\n        return (requestedClaimsHash || Constants.EMPTY_STRING).toLowerCase();\n    }\n\n    /**\n     * Generate scheme key componenet as per schema: <scheme>\n     */\n    private static generateSchemeForCacheKey(tokenType?: string): string {\n        /*\n         * PoP Tokens and SSH certs include scheme in cache key\n         * Cast to lowercase to handle \"bearer\" from ADFS\n         */\n        return tokenType &&\n            tokenType.toLowerCase() !==\n                AuthenticationScheme.BEARER.toLowerCase()\n            ? tokenType.toLowerCase()\n            : Constants.EMPTY_STRING;\n    }\n}\n"],"mappings":";;;;;;AAKA;AASA;;;;;;;;;;;;;;;;;;;AAqBG;AACH;;;;;AAKU,MAAAA,gBAAS;;;;EAIfC,iBAAiBA,CAAA,EAAG;IACX,OAAGD,gBAAA,CAAAE,4BAAqB,MAAAC,aAAA,OAAAC,WAAA;;;AAIjC;;EAEGC,qBAAA;IACH,OAAAL,gBAA2B,CAAAM,+BAAA,MAAAC,cAAA,OAAAC,QAAA,OAAAC,KAAA,OAAAC,QAAA;EAO3B;;AAEG;AACH;EASAC,eAAA;;EAEG;EACH;AAIA;;EAEGC,sBAAA;IACH,OAAAZ,gBAA+B,CAAAa,0BAAA,MAAAV,aAAA,OAAAC,WAAA,OAAAG,cAAA,OAAAC,QAAA,OAAAC,KAAA,OAAAK,MAAA,OAAAJ,QAAA,OAAAK,SAAA,OAAAC,mBAAA;EAc/B;;AAEG;AACH;EAeAC,aAAA;;;QAGG,OAAAC,SAAA,CAAAC,QAAA;sCAEC;MA0BJ,KAAAC,cAAA,CAAAC,6BAAA;;;;MAIG;QAAA;UACW,MAA6BC,eAAA,CAAAC,mCAAA;QAQ3C;;;;;;AAMG;EACH,OAAOV,0BAAuCA,CAAAV,aAAA,EAAAC,WAAA,EAAAG,cAAA,EAAAC,QAAA,EAAAC,KAAA,EAAAK,MAAA,EAAAJ,QAAA,EAAAK,SAAA,EAAAC,mBAAA;IAmB9C,MAAAQ,aAAA,I,+DAEG,KAAAlB,+BAAA,CAAAC,cAAA,EAAAC,QAAA,EAAAC,KAAA,EAAAC,QAAA,GACK,IAAM,CAAAe,yBAA0B,CAAAX,MAAA,GAIxC,KAAAY,6BAAA,CAAAV,mBAAA,G,0CAEG;IACI,OAAOQ,aAA8B,CAAAG,IAAA,CAAAC,UAAA,CAAAC,mBAAA,EAAAC,WAAA;EAM5C;;AAEG;;AAYN"},"metadata":{},"sourceType":"module","externalDependencies":[]}