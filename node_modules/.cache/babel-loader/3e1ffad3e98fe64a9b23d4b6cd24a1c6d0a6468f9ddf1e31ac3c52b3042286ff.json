{"ast":null,"code":"/*! @azure/msal-common v14.7.0 2024-02-07 */\n'use strict';\n\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Constants, OIDC_SCOPES } from '../utils/Constants.mjs';\nimport { emptyInputScopesError } from '../error/ClientConfigurationErrorCodes.mjs';\nimport { cannotAppendScopeSet, cannotRemoveEmptyScope, emptyInputScopeSet } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\n * to ensure uniqueness of strings.\n */\nclass ScopeSet {\n  constructor(inputScopes) {\n    // Filter empty string and null/undefined array items\n    const scopeArr = inputScopes ? StringUtils.trimArrayEntries([...inputScopes]) : [];\n    const filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n    // Validate and filter scopes (validate function throws if validation fails)\n    this.validateInputScopes(filteredInput);\n    this.scopes = new Set(); // Iterator in constructor not supported by IE11\n    filteredInput.forEach(scope => this.scopes.add(scope));\n  }\n  /**\n   * Factory method to create ScopeSet from space-delimited string\n   * @param inputScopeString\n   * @param appClientId\n   * @param scopesRequired\n   */\n  static fromString(inputScopeString) {\n    const scopeString = inputScopeString || Constants.EMPTY_STRING;\n    const inputScopes = scopeString.split(\" \");\n    return new ScopeSet(inputScopes);\n  }\n  /**\n   * Creates the set of scopes to search for in cache lookups\n   * @param inputScopeString\n   * @returns\n   */\n  static createSearchScopes(inputScopeString) {\n    const scopeSet = new ScopeSet(inputScopeString);\n    if (!scopeSet.containsOnlyOIDCScopes()) {\n      scopeSet.removeOIDCScopes();\n    } else {\n      scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n    }\n    return scopeSet;\n  }\n  /**\n   * Used to validate the scopes input parameter requested  by the developer.\n   * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n   */\n  validateInputScopes(inputScopes) {\n    // Check if scopes are required but not given or is an empty array\n    if (!inputScopes || inputScopes.length < 1) {\n      throw createClientConfigurationError(emptyInputScopesError);\n    }\n  }\n  /**\n   * Check if a given scope is present in this set of scopes.\n   * @param scope\n   */\n  containsScope(scope) {\n    const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n    const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n    // compare lowercase scopes\n    return scope ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n  }\n  /**\n   * Check if a set of scopes is present in this set of scopes.\n   * @param scopeSet\n   */\n  containsScopeSet(scopeSet) {\n    if (!scopeSet || scopeSet.scopes.size <= 0) {\n      return false;\n    }\n    return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(scope => this.containsScope(scope));\n  }\n  /**\n   * Check if set of scopes contains only the defaults\n   */\n  containsOnlyOIDCScopes() {\n    let defaultScopeCount = 0;\n    OIDC_SCOPES.forEach(defaultScope => {\n      if (this.containsScope(defaultScope)) {\n        defaultScopeCount += 1;\n      }\n    });\n    return this.scopes.size === defaultScopeCount;\n  }\n  /**\n   * Appends single scope if passed\n   * @param newScope\n   */\n  appendScope(newScope) {\n    if (newScope) {\n      this.scopes.add(newScope.trim());\n    }\n  }\n  /**\n   * Appends multiple scopes if passed\n   * @param newScopes\n   */\n  appendScopes(newScopes) {\n    try {\n      newScopes.forEach(newScope => this.appendScope(newScope));\n    } catch (e) {\n      throw createClientAuthError(cannotAppendScopeSet);\n    }\n  }\n  /**\n   * Removes element from set of scopes.\n   * @param scope\n   */\n  removeScope(scope) {\n    if (!scope) {\n      throw createClientAuthError(cannotRemoveEmptyScope);\n    }\n    this.scopes.delete(scope.trim());\n  }\n  /**\n   * Removes default scopes from set of scopes\n   * Primarily used to prevent cache misses if the default scopes are not returned from the server\n   */\n  removeOIDCScopes() {\n    OIDC_SCOPES.forEach(defaultScope => {\n      this.scopes.delete(defaultScope);\n    });\n  }\n  /**\n   * Combines an array of scopes with the current set of scopes.\n   * @param otherScopes\n   */\n  unionScopeSets(otherScopes) {\n    if (!otherScopes) {\n      throw createClientAuthError(emptyInputScopeSet);\n    }\n    const unionScopes = new Set(); // Iterator in constructor not supported in IE11\n    otherScopes.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n    this.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n    return unionScopes;\n  }\n  /**\n   * Check if scopes intersect between this set and another.\n   * @param otherScopes\n   */\n  intersectingScopeSets(otherScopes) {\n    if (!otherScopes) {\n      throw createClientAuthError(emptyInputScopeSet);\n    }\n    // Do not allow OIDC scopes to be the only intersecting scopes\n    if (!otherScopes.containsOnlyOIDCScopes()) {\n      otherScopes.removeOIDCScopes();\n    }\n    const unionScopes = this.unionScopeSets(otherScopes);\n    const sizeOtherScopes = otherScopes.getScopeCount();\n    const sizeThisScopes = this.getScopeCount();\n    const sizeUnionScopes = unionScopes.size;\n    return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n  }\n  /**\n   * Returns size of set of scopes.\n   */\n  getScopeCount() {\n    return this.scopes.size;\n  }\n  /**\n   * Returns the scopes as an array of string values\n   */\n  asArray() {\n    const array = [];\n    this.scopes.forEach(val => array.push(val));\n    return array;\n  }\n  /**\n   * Prints scopes into a space-delimited string\n   */\n  printScopes() {\n    if (this.scopes) {\n      const scopeArr = this.asArray();\n      return scopeArr.join(\" \");\n    }\n    return Constants.EMPTY_STRING;\n  }\n  /**\n   * Prints scopes into a space-delimited lower-case string (used for caching)\n   */\n  printScopesLowerCase() {\n    return this.printScopes().toLowerCase();\n  }\n}\nexport { ScopeSet };","map":{"version":3,"names":["ScopeSet","constructor","inputScopes","scopeArr","StringUtils","trimArrayEntries","filteredInput","removeEmptyStringsFromArray","validateInputScopes","scopes","Set","forEach","scope","add","fromString","inputScopeString","scopeString","Constants","EMPTY_STRING","split","createSearchScopes","scopeSet","containsOnlyOIDCScopes","removeOIDCScopes","removeScope","OFFLINE_ACCESS_SCOPE","length","createClientConfigurationError","emptyInputScopesError","containsScope","lowerCaseScopes","printScopesLowerCase","lowerCaseScopesSet","has","toLowerCase","containsScopeSet","size","asArray","every","defaultScopeCount","OIDC_SCOPES","defaultScope","appendScope","newScope","trim","appendScopes","newScopes","e","createClientAuthError","cannotAppendScopeSet","cannotRemoveEmptyScope","delete","unionScopeSets","otherScopes","emptyInputScopeSet","unionScopes","intersectingScopeSets","sizeOtherScopes","getScopeCount","sizeThisScopes","sizeUnionScopes","array","val","push","printScopes","join"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\request\\ScopeSet.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n} from \"../error/ClientConfigurationError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError\";\nimport { Constants, OIDC_SCOPES } from \"../utils/Constants\";\n\n/**\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\n * to ensure uniqueness of strings.\n */\nexport class ScopeSet {\n    // Scopes as a Set of strings\n    private scopes: Set<string>;\n\n    constructor(inputScopes: Array<string>) {\n        // Filter empty string and null/undefined array items\n        const scopeArr = inputScopes\n            ? StringUtils.trimArrayEntries([...inputScopes])\n            : [];\n        const filteredInput = scopeArr\n            ? StringUtils.removeEmptyStringsFromArray(scopeArr)\n            : [];\n\n        // Validate and filter scopes (validate function throws if validation fails)\n        this.validateInputScopes(filteredInput);\n\n        this.scopes = new Set<string>(); // Iterator in constructor not supported by IE11\n        filteredInput.forEach((scope) => this.scopes.add(scope));\n    }\n\n    /**\n     * Factory method to create ScopeSet from space-delimited string\n     * @param inputScopeString\n     * @param appClientId\n     * @param scopesRequired\n     */\n    static fromString(inputScopeString: string): ScopeSet {\n        const scopeString = inputScopeString || Constants.EMPTY_STRING;\n        const inputScopes: Array<string> = scopeString.split(\" \");\n        return new ScopeSet(inputScopes);\n    }\n\n    /**\n     * Creates the set of scopes to search for in cache lookups\n     * @param inputScopeString\n     * @returns\n     */\n    static createSearchScopes(inputScopeString: Array<string>): ScopeSet {\n        const scopeSet = new ScopeSet(inputScopeString);\n        if (!scopeSet.containsOnlyOIDCScopes()) {\n            scopeSet.removeOIDCScopes();\n        } else {\n            scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n        }\n\n        return scopeSet;\n    }\n\n    /**\n     * Used to validate the scopes input parameter requested  by the developer.\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n     */\n    private validateInputScopes(inputScopes: Array<string>): void {\n        // Check if scopes are required but not given or is an empty array\n        if (!inputScopes || inputScopes.length < 1) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.emptyInputScopesError\n            );\n        }\n    }\n\n    /**\n     * Check if a given scope is present in this set of scopes.\n     * @param scope\n     */\n    containsScope(scope: string): boolean {\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n        // compare lowercase scopes\n        return scope\n            ? lowerCaseScopesSet.scopes.has(scope.toLowerCase())\n            : false;\n    }\n\n    /**\n     * Check if a set of scopes is present in this set of scopes.\n     * @param scopeSet\n     */\n    containsScopeSet(scopeSet: ScopeSet): boolean {\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\n            return false;\n        }\n\n        return (\n            this.scopes.size >= scopeSet.scopes.size &&\n            scopeSet.asArray().every((scope) => this.containsScope(scope))\n        );\n    }\n\n    /**\n     * Check if set of scopes contains only the defaults\n     */\n    containsOnlyOIDCScopes(): boolean {\n        let defaultScopeCount = 0;\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            if (this.containsScope(defaultScope)) {\n                defaultScopeCount += 1;\n            }\n        });\n\n        return this.scopes.size === defaultScopeCount;\n    }\n\n    /**\n     * Appends single scope if passed\n     * @param newScope\n     */\n    appendScope(newScope: string): void {\n        if (newScope) {\n            this.scopes.add(newScope.trim());\n        }\n    }\n\n    /**\n     * Appends multiple scopes if passed\n     * @param newScopes\n     */\n    appendScopes(newScopes: Array<string>): void {\n        try {\n            newScopes.forEach((newScope) => this.appendScope(newScope));\n        } catch (e) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.cannotAppendScopeSet\n            );\n        }\n    }\n\n    /**\n     * Removes element from set of scopes.\n     * @param scope\n     */\n    removeScope(scope: string): void {\n        if (!scope) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.cannotRemoveEmptyScope\n            );\n        }\n        this.scopes.delete(scope.trim());\n    }\n\n    /**\n     * Removes default scopes from set of scopes\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\n     */\n    removeOIDCScopes(): void {\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            this.scopes.delete(defaultScope);\n        });\n    }\n\n    /**\n     * Combines an array of scopes with the current set of scopes.\n     * @param otherScopes\n     */\n    unionScopeSets(otherScopes: ScopeSet): Set<string> {\n        if (!otherScopes) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.emptyInputScopeSet\n            );\n        }\n        const unionScopes = new Set<string>(); // Iterator in constructor not supported in IE11\n        otherScopes.scopes.forEach((scope) =>\n            unionScopes.add(scope.toLowerCase())\n        );\n        this.scopes.forEach((scope) => unionScopes.add(scope.toLowerCase()));\n        return unionScopes;\n    }\n\n    /**\n     * Check if scopes intersect between this set and another.\n     * @param otherScopes\n     */\n    intersectingScopeSets(otherScopes: ScopeSet): boolean {\n        if (!otherScopes) {\n            throw createClientAuthError(\n                ClientAuthErrorCodes.emptyInputScopeSet\n            );\n        }\n\n        // Do not allow OIDC scopes to be the only intersecting scopes\n        if (!otherScopes.containsOnlyOIDCScopes()) {\n            otherScopes.removeOIDCScopes();\n        }\n        const unionScopes = this.unionScopeSets(otherScopes);\n        const sizeOtherScopes = otherScopes.getScopeCount();\n        const sizeThisScopes = this.getScopeCount();\n        const sizeUnionScopes = unionScopes.size;\n        return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n    }\n\n    /**\n     * Returns size of set of scopes.\n     */\n    getScopeCount(): number {\n        return this.scopes.size;\n    }\n\n    /**\n     * Returns the scopes as an array of string values\n     */\n    asArray(): Array<string> {\n        const array: Array<string> = [];\n        this.scopes.forEach((val) => array.push(val));\n        return array;\n    }\n\n    /**\n     * Prints scopes into a space-delimited string\n     */\n    printScopes(): string {\n        if (this.scopes) {\n            const scopeArr = this.asArray();\n            return scopeArr.join(\" \");\n        }\n        return Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Prints scopes into a space-delimited lower-case string (used for caching)\n     */\n    printScopesLowerCase(): string {\n        return this.printScopes().toLowerCase();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}