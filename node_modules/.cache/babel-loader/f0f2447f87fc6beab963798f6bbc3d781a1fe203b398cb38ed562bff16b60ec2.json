{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { Constants } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.mjs';\nimport { getRequestFailed, noNetworkConnectivity, failedToParseResponse, postRequestFailed } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n */\nclass FetchClient {\n  /**\n   * Fetch Client for REST endpoints - Get request\n   * @param url\n   * @param headers\n   * @param body\n   */\n  async sendGetRequestAsync(url, options) {\n    let response;\n    try {\n      response = await fetch(url, {\n        method: HTTP_REQUEST_TYPE.GET,\n        headers: this.getFetchHeaders(options)\n      });\n    } catch (e) {\n      if (window.navigator.onLine) {\n        throw createBrowserAuthError(getRequestFailed);\n      } else {\n        throw createBrowserAuthError(noNetworkConnectivity);\n      }\n    }\n    try {\n      return {\n        headers: this.getHeaderDict(response.headers),\n        body: await response.json(),\n        status: response.status\n      };\n    } catch (e) {\n      throw createBrowserAuthError(failedToParseResponse);\n    }\n  }\n  /**\n   * Fetch Client for REST endpoints - Post request\n   * @param url\n   * @param headers\n   * @param body\n   */\n  async sendPostRequestAsync(url, options) {\n    const reqBody = options && options.body || Constants.EMPTY_STRING;\n    let response;\n    try {\n      response = await fetch(url, {\n        method: HTTP_REQUEST_TYPE.POST,\n        headers: this.getFetchHeaders(options),\n        body: reqBody\n      });\n    } catch (e) {\n      if (window.navigator.onLine) {\n        throw createBrowserAuthError(postRequestFailed);\n      } else {\n        throw createBrowserAuthError(noNetworkConnectivity);\n      }\n    }\n    try {\n      return {\n        headers: this.getHeaderDict(response.headers),\n        body: await response.json(),\n        status: response.status\n      };\n    } catch (e) {\n      throw createBrowserAuthError(failedToParseResponse);\n    }\n  }\n  /**\n   * Get Fetch API Headers object from string map\n   * @param inputHeaders\n   */\n  getFetchHeaders(options) {\n    const headers = new Headers();\n    if (!(options && options.headers)) {\n      return headers;\n    }\n    const optionsHeaders = options.headers;\n    Object.keys(optionsHeaders).forEach(key => {\n      headers.append(key, optionsHeaders[key]);\n    });\n    return headers;\n  }\n  getHeaderDict(headers) {\n    const headerDict = {};\n    headers.forEach((value, key) => {\n      headerDict[key] = value;\n    });\n    return headerDict;\n  }\n}\nexport { FetchClient };","map":{"version":3,"names":["FetchClient","sendGetRequestAsync","url","options","response","headers","getFetchHeaders","e"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\network\\FetchClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Constants,\n    INetworkModule,\n    NetworkRequestOptions,\n    NetworkResponse,\n} from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\n\n/**\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n */\nexport class FetchClient implements INetworkModule {\n    /**\n     * Fetch Client for REST endpoints - Get request\n     * @param url\n     * @param headers\n     * @param body\n     */\n    async sendGetRequestAsync<T>(\n        url: string,\n        options?: NetworkRequestOptions\n    ): Promise<NetworkResponse<T>> {\n        let response;\n        try {\n            response = await fetch(url, {\n                method: HTTP_REQUEST_TYPE.GET,\n                headers: this.getFetchHeaders(options),\n            });\n        } catch (e) {\n            if (window.navigator.onLine) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.getRequestFailed\n                );\n            } else {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.noNetworkConnectivity\n                );\n            }\n        }\n\n        try {\n            return {\n                headers: this.getHeaderDict(response.headers),\n                body: (await response.json()) as T,\n                status: response.status,\n            };\n        } catch (e) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.failedToParseResponse\n            );\n        }\n    }\n\n    /**\n     * Fetch Client for REST endpoints - Post request\n     * @param url\n     * @param headers\n     * @param body\n     */\n    async sendPostRequestAsync<T>(\n        url: string,\n        options?: NetworkRequestOptions\n    ): Promise<NetworkResponse<T>> {\n        const reqBody = (options && options.body) || Constants.EMPTY_STRING;\n\n        let response;\n        try {\n            response = await fetch(url, {\n                method: HTTP_REQUEST_TYPE.POST,\n                headers: this.getFetchHeaders(options),\n                body: reqBody,\n            });\n        } catch (e) {\n            if (window.navigator.onLine) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.postRequestFailed\n                );\n            } else {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.noNetworkConnectivity\n                );\n            }\n        }\n\n        try {\n            return {\n                headers: this.getHeaderDict(response.headers),\n                body: (await response.json()) as T,\n                status: response.status,\n            };\n        } catch (e) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.failedToParseResponse\n            );\n        }\n    }\n\n    /**\n     * Get Fetch API Headers object from string map\n     * @param inputHeaders\n     */\n    private getFetchHeaders(options?: NetworkRequestOptions): Headers {\n        const headers = new Headers();\n        if (!(options && options.headers)) {\n            return headers;\n        }\n        const optionsHeaders = options.headers;\n        Object.keys(optionsHeaders).forEach((key) => {\n            headers.append(key, optionsHeaders[key]);\n        });\n        return headers;\n    }\n\n    private getHeaderDict(headers: Headers): Record<string, string> {\n        const headerDict: Record<string, string> = {};\n        headers.forEach((value: string, key: string) => {\n            headerDict[key] = value;\n        });\n        return headerDict;\n    }\n}\n"],"mappings":";;;;;;;;AAKA;AAYA;;AAEG;;;;AAOI,MAAAA,WAAA;EACG;AAmCN;;;;;EAKG,MAAAC,oBAAAC,GAAA,EAAAC,OAAA;IACG,IAAAC,QAAA;IAsCN;;;QAGGC,OAAA,OAAAC,eAAA,CAAAH,OAAA;MACH,CAAuB;IAYvB,EAOH,OAAAI,CAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}