{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-typescript\\\\intelli-gui\\\\src\\\\components\\\\main\\\\subtabs\\\\responses\\\\PathSubTabResponses.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { InputWithMovingLabel } from \"intelli-ui-components-library\";\nimport { useAppDispatch, useAppSelector } from \"../../../../store/hooks\";\nimport Responses from \"./NoMediaTypes\";\nimport { updatePath } from \"../../mainTabsSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PathSubTabResponses = ({\n  pathName,\n  methodName\n}) => {\n  _s();\n  const paths = useAppSelector(state => state.main.paths);\n  const responses = paths[pathName][methodName].responses;\n  const dispatch = useAppDispatch();\n  const [showResponses, setShowResponses] = useState(true); // Initial visibility state\n\n  console.log(responses);\n  const toggleResponses = () => {\n    setShowResponses(prevShowResponses => !prevShowResponses);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [Object.entries(responses || {}).map(([key, value]) => {\n        var _responseDetails$cont, _responseDetails$desc;\n        const responseDetails = value;\n        const mediaTypes = (_responseDetails$cont = responseDetails.content) !== null && _responseDetails$cont !== void 0 ? _responseDetails$cont : [];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(InputWithMovingLabel, {\n            inputProps: {\n              label: \"Status Code\",\n              name: \"response.statusCode\",\n              value: key !== null && key !== void 0 ? key : \"\",\n              onChange: e => console.log(e),\n              type: \"text\"\n            },\n            top: true,\n            className: \"mb-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InputWithMovingLabel, {\n            inputProps: {\n              label: \"Description\",\n              name: \"response.description\",\n              value: (_responseDetails$desc = responseDetails.description) !== null && _responseDetails$desc !== void 0 ? _responseDetails$desc : \"\",\n              onChange: e => console.log(e),\n              type: \"text\"\n            },\n            top: true,\n            className: \"mb-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          dispatch(updatePath({\n            pathName,\n            methodName,\n            methodKey: \"responseBody\",\n            data: {\n              ...paths[pathName][methodName].responseBody,\n              content: {\n                \"change/me\": {\n                  schema: {}\n                }\n              }\n            }\n          }));\n          toggleResponses(); // Togglling the visibility state\n        },\n        children: showResponses && /*#__PURE__*/_jsxDEV(Responses, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(PathSubTabResponses, \"BUt8EImVDV/nTZEUcEihpNbndCg=\", false, function () {\n  return [useAppSelector, useAppDispatch];\n});\n_c = PathSubTabResponses;\nexport default PathSubTabResponses;\nvar _c;\n$RefreshReg$(_c, \"PathSubTabResponses\");","map":{"version":3,"names":["React","useState","InputWithMovingLabel","useAppDispatch","useAppSelector","Responses","updatePath","jsxDEV","_jsxDEV","PathSubTabResponses","pathName","methodName","_s","paths","state","main","responses","dispatch","showResponses","setShowResponses","console","log","toggleResponses","prevShowResponses","className","children","Object","entries","map","key","value","_responseDetails$cont","_responseDetails$desc","responseDetails","mediaTypes","content","inputProps","label","name","onChange","e","type","top","fileName","_jsxFileName","lineNumber","columnNumber","description","onClick","methodKey","data","responseBody","schema","_c","$RefreshReg$"],"sources":["D:/react-typescript/intelli-gui/src/components/main/subtabs/responses/PathSubTabResponses.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Button,\r\n  InputWithMovingLabel,\r\n} from \"intelli-ui-components-library\";\r\nimport { AddIcon } from \"../../../../assets/icons\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../../store/hooks\";\r\nimport Responses from \"./NoMediaTypes\";\r\nimport { updatePath } from \"../../mainTabsSlice\";\r\n\r\nconst PathSubTabResponses = ({ pathName, methodName }: any) => {\r\n  const paths = useAppSelector((state) => state.main.paths);\r\n  const responses = paths[pathName][methodName].responses;\r\n  const dispatch = useAppDispatch();\r\n  const [showResponses, setShowResponses] = useState(true); // Initial visibility state\r\n\r\n  console.log(responses);\r\n\r\n  const toggleResponses = () => {\r\n    setShowResponses((prevShowResponses) => !prevShowResponses);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-6\">\r\n      <div>\r\n        {Object.entries(responses || {}).map(([key, value]) => {\r\n          const responseDetails: any = value;\r\n          const mediaTypes = responseDetails.content ?? [];\r\n          return (\r\n            <div key={key}>\r\n              <InputWithMovingLabel\r\n                inputProps={{\r\n                  label: \"Status Code\",\r\n                  name: \"response.statusCode\",\r\n                  value: key ?? \"\",\r\n                  onChange: (e) => console.log(e),\r\n                  type: \"text\",\r\n                }}\r\n                top\r\n                className=\"mb-4\"\r\n              />\r\n              <InputWithMovingLabel\r\n                inputProps={{\r\n                  label: \"Description\",\r\n                  name: \"response.description\",\r\n                  value: responseDetails.description ?? \"\",\r\n                  onChange: (e) => console.log(e),\r\n                  type: \"text\",\r\n                }}\r\n                top\r\n                className=\"mb-4\"\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n        <button\r\n          onClick={() => {\r\n            dispatch(\r\n              updatePath({\r\n                pathName,\r\n                methodName,\r\n                methodKey: \"responseBody\",\r\n                data: {\r\n                  ...paths[pathName][methodName].responseBody,\r\n                  content: {\r\n                    \"change/me\": {\r\n                      schema: {},\r\n                    },\r\n                  },\r\n                },\r\n              })\r\n            );\r\n            toggleResponses(); // Togglling the visibility state\r\n          }}\r\n        >\r\n          {showResponses && <Responses />}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PathSubTabResponses;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}