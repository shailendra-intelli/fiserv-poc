{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-typescript\\\\intelli-gui\\\\src\\\\components\\\\fileupload\\\\FileUpload.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useAppDispatch } from '../../store/hooks';\nimport { uploadFile } from '../../store/reducers/uploadSlice';\nimport styles from './fileUpload.module.scss';\nimport { FileTextTwoTone } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = () => {\n  _s();\n  const [jsonFileName, setJsonFileName] = useState(\"Upload File\");\n  const dispatch = useAppDispatch();\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    setJsonFileName(file.name);\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        try {\n          const jsonData = JSON.parse(e.target.result);\n          dispatch(uploadFile(jsonData));\n        } catch {\n          dispatch(uploadFile({}));\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    className: `${styles[\"file-upload\"]}`,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      hidden: true,\n      type: \"file\",\n      accept: \".json\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FileTextTwoTone, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 32\n    }, this), jsonFileName]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n_s(FileUpload, \"1RtmUkI7HfiKz3qwsDPP7ZIxfgA=\", false, function () {\n  return [useAppDispatch];\n});\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","useAppDispatch","uploadFile","styles","FileTextTwoTone","jsxDEV","_jsxDEV","FileUpload","_s","jsonFileName","setJsonFileName","dispatch","handleFileChange","e","file","target","files","name","reader","FileReader","onload","jsonData","JSON","parse","result","readAsText","className","children","hidden","type","accept","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/react-typescript/intelli-gui/src/components/fileupload/FileUpload.tsx"],"sourcesContent":["import React,{useState, useEffect} from 'react';\r\nimport { useAppDispatch } from '../../store/hooks';\r\nimport { uploadFile } from '../../store/reducers/uploadSlice';\r\nimport { Button } from 'intelli-ui-components-library';\r\nimport styles from './fileUpload.module.scss';\r\nimport { FileTextTwoTone } from '@ant-design/icons';\r\n\r\nconst FileUpload = () => {\r\n    const [jsonFileName, setJsonFileName] = useState<string>(\"Upload File\");\r\n    const dispatch = useAppDispatch();\r\n    const handleFileChange = (e) => {\r\n      const file = e.target.files[0];\r\n      setJsonFileName(file.name);\r\n      if(file)\r\n      {\r\n        const reader = new FileReader();\r\n        reader.onload = e => {\r\n            try {\r\n                const jsonData = JSON.parse(e.target.result);\r\n                dispatch(uploadFile(jsonData))\r\n            } catch {\r\n                dispatch(uploadFile({}))\r\n            }\r\n        }\r\n        reader.readAsText(file);\r\n      }\r\n    };\r\n    return (\r\n        <label className={`${styles[\"file-upload\"]}`}>\r\n            <input hidden type=\"file\" accept=\".json\" onChange={handleFileChange} />\r\n            <FileTextTwoTone /><br/>\r\n             {jsonFileName}\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default FileUpload;"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAkB,OAAO;AAC/C,SAASC,cAAc,QAAQ,mBAAmB;AAClD,SAASC,UAAU,QAAQ,kCAAkC;AAE7D,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,SAASC,eAAe,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAS,aAAa,CAAC;EACvE,MAAMW,QAAQ,GAAGV,cAAc,CAAC,CAAC;EACjC,MAAMW,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9BN,eAAe,CAACI,IAAI,CAACG,IAAI,CAAC;IAC1B,IAAGH,IAAI,EACP;MACE,MAAMI,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAGP,CAAC,IAAI;QACjB,IAAI;UACA,MAAMQ,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACV,CAAC,CAACE,MAAM,CAACS,MAAM,CAAC;UAC5Cb,QAAQ,CAACT,UAAU,CAACmB,QAAQ,CAAC,CAAC;QAClC,CAAC,CAAC,MAAM;UACJV,QAAQ,CAACT,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5B;MACJ,CAAC;MACDgB,MAAM,CAACO,UAAU,CAACX,IAAI,CAAC;IACzB;EACF,CAAC;EACD,oBACIR,OAAA;IAAOoB,SAAS,EAAG,GAAEvB,MAAM,CAAC,aAAa,CAAE,EAAE;IAAAwB,QAAA,gBACzCrB,OAAA;MAAOsB,MAAM;MAACC,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,OAAO;MAACC,QAAQ,EAAEnB;IAAiB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvE7B,OAAA,CAACF,eAAe;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAAA7B,OAAA;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtB1B,YAAY;EAAA;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEhB,CAAC;AAAA3B,EAAA,CA3BKD,UAAU;EAAA,QAEKN,cAAc;AAAA;AAAAmC,EAAA,GAF7B7B,UAAU;AA6BhB,eAAeA,UAAU;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}