{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass BrowserPerformanceMeasurement {\n  constructor(name, correlationId) {\n    this.correlationId = correlationId;\n    this.measureName = BrowserPerformanceMeasurement.makeMeasureName(name, correlationId);\n    this.startMark = BrowserPerformanceMeasurement.makeStartMark(name, correlationId);\n    this.endMark = BrowserPerformanceMeasurement.makeEndMark(name, correlationId);\n  }\n  static makeMeasureName(name, correlationId) {\n    return `msal.measure.${name}.${correlationId}`;\n  }\n  static makeStartMark(name, correlationId) {\n    return `msal.start.${name}.${correlationId}`;\n  }\n  static makeEndMark(name, correlationId) {\n    return `msal.end.${name}.${correlationId}`;\n  }\n  static supportsBrowserPerformance() {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.mark === \"function\" && typeof window.performance.measure === \"function\" && typeof window.performance.clearMarks === \"function\" && typeof window.performance.clearMeasures === \"function\" && typeof window.performance.getEntriesByName === \"function\";\n  }\n  /**\n   * Flush browser marks and measurements.\n   * @param {string} correlationId\n   * @param {SubMeasurement} measurements\n   */\n  static flushMeasurements(correlationId, measurements) {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        measurements.forEach(measurement => {\n          const measureName = BrowserPerformanceMeasurement.makeMeasureName(measurement.name, correlationId);\n          const entriesForMeasurement = window.performance.getEntriesByName(measureName, \"measure\");\n          if (entriesForMeasurement.length > 0) {\n            window.performance.clearMeasures(measureName);\n            window.performance.clearMarks(BrowserPerformanceMeasurement.makeStartMark(measureName, correlationId));\n            window.performance.clearMarks(BrowserPerformanceMeasurement.makeEndMark(measureName, correlationId));\n          }\n        });\n      } catch (e) {\n        // Silently catch and return null\n      }\n    }\n  }\n  startMeasurement() {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        window.performance.mark(this.startMark);\n      } catch (e) {\n        // Silently catch\n      }\n    }\n  }\n  endMeasurement() {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        window.performance.mark(this.endMark);\n        window.performance.measure(this.measureName, this.startMark, this.endMark);\n      } catch (e) {\n        // Silently catch\n      }\n    }\n  }\n  flushMeasurement() {\n    if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n      try {\n        const entriesForMeasurement = window.performance.getEntriesByName(this.measureName, \"measure\");\n        if (entriesForMeasurement.length > 0) {\n          const durationMs = entriesForMeasurement[0].duration;\n          window.performance.clearMeasures(this.measureName);\n          window.performance.clearMarks(this.startMark);\n          window.performance.clearMarks(this.endMark);\n          return durationMs;\n        }\n      } catch (e) {\n        // Silently catch and return null\n      }\n    }\n    return null;\n  }\n}\nexport { BrowserPerformanceMeasurement };","map":{"version":3,"names":["BrowserPerformanceMeasurement","constructor","name","correlationId","measureName","makeMeasureName","startMark","makeStartMark","endMark","makeEndMark","supportsBrowserPerformance"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\telemetry\\BrowserPerformanceMeasurement.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { IPerformanceMeasurement, SubMeasurement } from \"@azure/msal-common\";\n\nexport class BrowserPerformanceMeasurement implements IPerformanceMeasurement {\n    private readonly measureName: string;\n    private readonly correlationId: string;\n    private readonly startMark: string;\n    private readonly endMark: string;\n\n    constructor(name: string, correlationId: string) {\n        this.correlationId = correlationId;\n        this.measureName = BrowserPerformanceMeasurement.makeMeasureName(\n            name,\n            correlationId\n        );\n        this.startMark = BrowserPerformanceMeasurement.makeStartMark(\n            name,\n            correlationId\n        );\n        this.endMark = BrowserPerformanceMeasurement.makeEndMark(\n            name,\n            correlationId\n        );\n    }\n\n    private static makeMeasureName(name: string, correlationId: string) {\n        return `msal.measure.${name}.${correlationId}`;\n    }\n\n    private static makeStartMark(name: string, correlationId: string) {\n        return `msal.start.${name}.${correlationId}`;\n    }\n\n    private static makeEndMark(name: string, correlationId: string) {\n        return `msal.end.${name}.${correlationId}`;\n    }\n\n    static supportsBrowserPerformance(): boolean {\n        return (\n            typeof window !== \"undefined\" &&\n            typeof window.performance !== \"undefined\" &&\n            typeof window.performance.mark === \"function\" &&\n            typeof window.performance.measure === \"function\" &&\n            typeof window.performance.clearMarks === \"function\" &&\n            typeof window.performance.clearMeasures === \"function\" &&\n            typeof window.performance.getEntriesByName === \"function\"\n        );\n    }\n\n    /**\n     * Flush browser marks and measurements.\n     * @param {string} correlationId\n     * @param {SubMeasurement} measurements\n     */\n    public static flushMeasurements(\n        correlationId: string,\n        measurements: SubMeasurement[]\n    ): void {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                measurements.forEach((measurement) => {\n                    const measureName =\n                        BrowserPerformanceMeasurement.makeMeasureName(\n                            measurement.name,\n                            correlationId\n                        );\n                    const entriesForMeasurement =\n                        window.performance.getEntriesByName(\n                            measureName,\n                            \"measure\"\n                        );\n                    if (entriesForMeasurement.length > 0) {\n                        window.performance.clearMeasures(measureName);\n                        window.performance.clearMarks(\n                            BrowserPerformanceMeasurement.makeStartMark(\n                                measureName,\n                                correlationId\n                            )\n                        );\n                        window.performance.clearMarks(\n                            BrowserPerformanceMeasurement.makeEndMark(\n                                measureName,\n                                correlationId\n                            )\n                        );\n                    }\n                });\n            } catch (e) {\n                // Silently catch and return null\n            }\n        }\n    }\n\n    startMeasurement(): void {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                window.performance.mark(this.startMark);\n            } catch (e) {\n                // Silently catch\n            }\n        }\n    }\n\n    endMeasurement(): void {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                window.performance.mark(this.endMark);\n                window.performance.measure(\n                    this.measureName,\n                    this.startMark,\n                    this.endMark\n                );\n            } catch (e) {\n                // Silently catch\n            }\n        }\n    }\n\n    flushMeasurement(): number | null {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                const entriesForMeasurement =\n                    window.performance.getEntriesByName(\n                        this.measureName,\n                        \"measure\"\n                    );\n                if (entriesForMeasurement.length > 0) {\n                    const durationMs = entriesForMeasurement[0].duration;\n                    window.performance.clearMeasures(this.measureName);\n                    window.performance.clearMarks(this.startMark);\n                    window.performance.clearMarks(this.endMark);\n                    return durationMs;\n                }\n            } catch (e) {\n                // Silently catch and return null\n            }\n        }\n        return null;\n    }\n}\n"],"mappings":";;;AAKA;AAEA;AACI;AACA;AACA,MAAQA,6BAA2B;EACnCC,WAAQA,CAAAC,IAAQ,EAACC,aAAgB;IAErB,KAAAA,aAAM,GAAQA,aAAA;IAgBnB,IAAC,CAAMC,WAAgB,GAAAJ,6BAAA,CAAAK,eAAA,CAAAH,IAAA,EAAAC,aAAA;IAIvB,IAAC,CAAMG,SAAc,GAAAN,6BAAA,CAAAO,aAAA,CAAAL,IAAA,EAAAC,aAAA;IAIrB,IAAC,CAAMK,OAAY,GAAAR,6BAAA,CAAAS,WAAA,CAAAP,IAAA,EAAAC,aAAA;;EAgB1B,OAAAE,gBAAAH,IAAA,EAAAC,aAAA;;;;IAIG,qBAAAD,IAAA,IAAAC,aAAA;;EAwCH,OAAAM,YAAAP,IAAwB,EAAAC,aAAA;IAUxB,mBAAsBD,IAAA,IAAAC,aAAA;;EAoCzB,OAAAO,2BAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}