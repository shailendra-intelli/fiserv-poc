{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { Constants } from '@azure/msal-common';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Utility functions for strings in a browser. See here for implementation details:\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\n */\nclass BrowserStringUtils {\n  /**\n   * Converts string to Uint8Array\n   * @param sDOMStr\n   */\n  static stringToUtf8Arr(sDOMStr) {\n    let nChr;\n    let nArrLen = 0;\n    const nStrLen = sDOMStr.length;\n    /* mapping... */\n    for (let nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {\n      nChr = sDOMStr.charCodeAt(nMapIdx);\n      nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6;\n    }\n    const aBytes = new Uint8Array(nArrLen);\n    /* transcription... */\n    for (let nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {\n      nChr = sDOMStr.charCodeAt(nChrIdx);\n      if (nChr < 128) {\n        /* one byte */\n        aBytes[nIdx++] = nChr;\n      } else if (nChr < 0x800) {\n        /* two bytes */\n        aBytes[nIdx++] = 192 + (nChr >>> 6);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else if (nChr < 0x10000) {\n        /* three bytes */\n        aBytes[nIdx++] = 224 + (nChr >>> 12);\n        aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else if (nChr < 0x200000) {\n        /* four bytes */\n        aBytes[nIdx++] = 240 + (nChr >>> 18);\n        aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else if (nChr < 0x4000000) {\n        /* five bytes */\n        aBytes[nIdx++] = 248 + (nChr >>> 24);\n        aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } /* if (nChr <= 0x7fffffff) */else {\n        /* six bytes */\n        aBytes[nIdx++] = 252 + (nChr >>> 30);\n        aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      }\n    }\n    return aBytes;\n  }\n  /**\n   * Converts Uint8Array to a string\n   * @param aBytes\n   */\n  static utf8ArrToString(aBytes) {\n    let sView = Constants.EMPTY_STRING;\n    for (let nPart, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {\n      nPart = aBytes[nIdx];\n      sView += String.fromCharCode(nPart > 251 && nPart < 254 && nIdx + 5 < nLen /* six bytes */ ? /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\n      (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 247 && nPart < 252 && nIdx + 4 < nLen /* five bytes */ ? (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 239 && nPart < 248 && nIdx + 3 < nLen /* four bytes */ ? (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 223 && nPart < 240 && nIdx + 2 < nLen /* three bytes */ ? (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 191 && nPart < 224 && nIdx + 1 < nLen /* two bytes */ ? (nPart - 192 << 6) + aBytes[++nIdx] - 128 : /* nPart < 127 ? */ /* one byte */\n      nPart);\n    }\n    return sView;\n  }\n  /**\n   * Returns stringified jwk.\n   * @param jwk\n   */\n  static getSortedObjectString(obj) {\n    return JSON.stringify(obj, Object.keys(obj).sort());\n  }\n}\nexport { BrowserStringUtils };","map":{"version":3,"names":["BrowserStringUtils","stringToUtf8Arr","sDOMStr","nChr","nMapIdx","nStrLen","charCodeAt"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\utils\\BrowserStringUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Constants } from \"@azure/msal-common\";\n\n/**\n * Utility functions for strings in a browser. See here for implementation details:\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\n */\nexport class BrowserStringUtils {\n    /**\n     * Converts string to Uint8Array\n     * @param sDOMStr\n     */\n    static stringToUtf8Arr(sDOMStr: string): Uint8Array {\n        let nChr;\n        let nArrLen = 0;\n        const nStrLen = sDOMStr.length;\n        /* mapping... */\n        for (let nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {\n            nChr = sDOMStr.charCodeAt(nMapIdx);\n            nArrLen +=\n                nChr < 0x80\n                    ? 1\n                    : nChr < 0x800\n                    ? 2\n                    : nChr < 0x10000\n                    ? 3\n                    : nChr < 0x200000\n                    ? 4\n                    : nChr < 0x4000000\n                    ? 5\n                    : 6;\n        }\n\n        const aBytes = new Uint8Array(nArrLen);\n\n        /* transcription... */\n\n        for (let nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {\n            nChr = sDOMStr.charCodeAt(nChrIdx);\n            if (nChr < 128) {\n                /* one byte */\n                aBytes[nIdx++] = nChr;\n            } else if (nChr < 0x800) {\n                /* two bytes */\n                aBytes[nIdx++] = 192 + (nChr >>> 6);\n                aBytes[nIdx++] = 128 + (nChr & 63);\n            } else if (nChr < 0x10000) {\n                /* three bytes */\n                aBytes[nIdx++] = 224 + (nChr >>> 12);\n                aBytes[nIdx++] = 128 + ((nChr >>> 6) & 63);\n                aBytes[nIdx++] = 128 + (nChr & 63);\n            } else if (nChr < 0x200000) {\n                /* four bytes */\n                aBytes[nIdx++] = 240 + (nChr >>> 18);\n                aBytes[nIdx++] = 128 + ((nChr >>> 12) & 63);\n                aBytes[nIdx++] = 128 + ((nChr >>> 6) & 63);\n                aBytes[nIdx++] = 128 + (nChr & 63);\n            } else if (nChr < 0x4000000) {\n                /* five bytes */\n                aBytes[nIdx++] = 248 + (nChr >>> 24);\n                aBytes[nIdx++] = 128 + ((nChr >>> 18) & 63);\n                aBytes[nIdx++] = 128 + ((nChr >>> 12) & 63);\n                aBytes[nIdx++] = 128 + ((nChr >>> 6) & 63);\n                aBytes[nIdx++] = 128 + (nChr & 63);\n            } /* if (nChr <= 0x7fffffff) */ else {\n                /* six bytes */\n                aBytes[nIdx++] = 252 + (nChr >>> 30);\n                aBytes[nIdx++] = 128 + ((nChr >>> 24) & 63);\n                aBytes[nIdx++] = 128 + ((nChr >>> 18) & 63);\n                aBytes[nIdx++] = 128 + ((nChr >>> 12) & 63);\n                aBytes[nIdx++] = 128 + ((nChr >>> 6) & 63);\n                aBytes[nIdx++] = 128 + (nChr & 63);\n            }\n        }\n\n        return aBytes;\n    }\n\n    /**\n     * Converts Uint8Array to a string\n     * @param aBytes\n     */\n    static utf8ArrToString(aBytes: Uint8Array): string {\n        let sView = Constants.EMPTY_STRING;\n        for (let nPart, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {\n            nPart = aBytes[nIdx];\n            sView += String.fromCharCode(\n                nPart > 251 && nPart < 254 && nIdx + 5 < nLen /* six bytes */\n                    ? /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\n                      (nPart - 252) * 1073741824 +\n                          ((aBytes[++nIdx] - 128) << 24) +\n                          ((aBytes[++nIdx] - 128) << 18) +\n                          ((aBytes[++nIdx] - 128) << 12) +\n                          ((aBytes[++nIdx] - 128) << 6) +\n                          aBytes[++nIdx] -\n                          128\n                    : nPart > 247 &&\n                      nPart < 252 &&\n                      nIdx + 4 < nLen /* five bytes */\n                    ? ((nPart - 248) << 24) +\n                      ((aBytes[++nIdx] - 128) << 18) +\n                      ((aBytes[++nIdx] - 128) << 12) +\n                      ((aBytes[++nIdx] - 128) << 6) +\n                      aBytes[++nIdx] -\n                      128\n                    : nPart > 239 &&\n                      nPart < 248 &&\n                      nIdx + 3 < nLen /* four bytes */\n                    ? ((nPart - 240) << 18) +\n                      ((aBytes[++nIdx] - 128) << 12) +\n                      ((aBytes[++nIdx] - 128) << 6) +\n                      aBytes[++nIdx] -\n                      128\n                    : nPart > 223 &&\n                      nPart < 240 &&\n                      nIdx + 2 < nLen /* three bytes */\n                    ? ((nPart - 224) << 12) +\n                      ((aBytes[++nIdx] - 128) << 6) +\n                      aBytes[++nIdx] -\n                      128\n                    : nPart > 191 &&\n                      nPart < 224 &&\n                      nIdx + 1 < nLen /* two bytes */\n                    ? ((nPart - 192) << 6) + aBytes[++nIdx] - 128\n                    : /* nPart < 127 ? */ /* one byte */\n                      nPart\n            );\n        }\n        return sView;\n    }\n\n    /**\n     * Returns stringified jwk.\n     * @param jwk\n     */\n    static getSortedObjectString(obj: object): string {\n        return JSON.stringify(obj, Object.keys(obj).sort());\n    }\n}\n"],"mappings":";;;;;AAOA;;;AAGG;AAEC;;;AAGG;AACH,MAAsBA,kBAAA;EAkEtB;;;AAGG;EACH,OAAOC,eAAeA,CAACC,OAAQ;IAiD/B,IAAAC,IAAA;;;IAGG;IACH,KAA4B,IAAAC,OAAA,MAAAA,OAAM,GAAAC,OAAS,EAAMD,OAAA;MAGpDD,IAAA,GAAAD,OAAA,CAAAI,UAAA,CAAAF,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}