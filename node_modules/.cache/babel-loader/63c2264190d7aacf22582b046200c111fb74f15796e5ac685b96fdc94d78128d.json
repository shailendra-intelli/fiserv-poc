{"ast":null,"code":"/*! @azure/msal-browser v3.5.0 2023-11-07 */\n'use strict';\n\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { invalidBase64String } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\n * https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem\n */\n/**\n * Returns a URL-safe plaintext decoded string from b64 encoded input.\n * @param input\n */\nfunction base64Decode(input) {\n  return new TextDecoder().decode(base64DecToArr(input));\n}\n/**\n * Decodes base64 into Uint8Array\n * @param base64String\n */\nfunction base64DecToArr(base64String) {\n  let encodedString = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  switch (encodedString.length % 4) {\n    case 0:\n      break;\n    case 2:\n      encodedString += \"==\";\n      break;\n    case 3:\n      encodedString += \"=\";\n      break;\n    default:\n      throw createBrowserAuthError(invalidBase64String);\n  }\n  const binString = atob(encodedString);\n  return Uint8Array.from(binString, m => m.codePointAt(0) || 0);\n}\nexport { base64Decode };","map":{"version":3,"names":[],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\encode\\Base64Decode.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    BrowserAuthErrorCodes,\n    createBrowserAuthError,\n} from \"../error/BrowserAuthError\";\n\n/**\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\n * https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem\n */\n\n/**\n * Returns a URL-safe plaintext decoded string from b64 encoded input.\n * @param input\n */\nexport function base64Decode(input: string): string {\n    return new TextDecoder().decode(base64DecToArr(input));\n}\n\n/**\n * Decodes base64 into Uint8Array\n * @param base64String\n */\nfunction base64DecToArr(base64String: string): Uint8Array {\n    let encodedString = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (encodedString.length % 4) {\n        case 0:\n            break;\n        case 2:\n            encodedString += \"==\";\n            break;\n        case 3:\n            encodedString += \"=\";\n            break;\n        default:\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.invalidBase64String\n            );\n    }\n    const binString = atob(encodedString);\n    return Uint8Array.from(binString, (m) => m.codePointAt(0) || 0);\n}\n"],"mappings":";;;;;;AAUA;;;AAGG;;;AAKA;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}