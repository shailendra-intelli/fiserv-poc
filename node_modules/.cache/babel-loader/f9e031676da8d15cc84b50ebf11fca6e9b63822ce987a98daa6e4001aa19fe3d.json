{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { AADServerParamKeys, Constants, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.mjs';\nimport { ScopeSet } from './ScopeSet.mjs';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { RequestValidator } from './RequestValidator.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass RequestParameterBuilder {\n  constructor() {\n    this.parameters = new Map();\n  }\n  /**\n   * add response_type = code\n   */\n  addResponseTypeCode() {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\n  }\n  /**\n   * add response_type = token id_token\n   */\n  addResponseTypeForTokenAndIdToken() {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(`${Constants.TOKEN_RESPONSE_TYPE} ${Constants.ID_TOKEN_RESPONSE_TYPE}`));\n  }\n  /**\n   * add response_mode. defaults to query.\n   * @param responseMode\n   */\n  addResponseMode(responseMode) {\n    this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n  }\n  /**\n   * Add flag to indicate STS should attempt to use WAM if available\n   */\n  addNativeBroker() {\n    this.parameters.set(AADServerParamKeys.NATIVE_BROKER, encodeURIComponent(\"1\"));\n  }\n  /**\n   * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n   * @param scopeSet\n   * @param addOidcScopes\n   */\n  addScopes(scopes, addOidcScopes = true, defaultScopes = OIDC_DEFAULT_SCOPES) {\n    // Always add openid to the scopes when adding OIDC scopes\n    if (addOidcScopes && !defaultScopes.includes(\"openid\") && !scopes.includes(\"openid\")) {\n      defaultScopes.push(\"openid\");\n    }\n    const requestScopes = addOidcScopes ? [...(scopes || []), ...defaultScopes] : scopes || [];\n    const scopeSet = new ScopeSet(requestScopes);\n    this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n  }\n  /**\n   * add clientId\n   * @param clientId\n   */\n  addClientId(clientId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n  }\n  /**\n   * add redirect_uri\n   * @param redirectUri\n   */\n  addRedirectUri(redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n  }\n  /**\n   * add post logout redirectUri\n   * @param redirectUri\n   */\n  addPostLogoutRedirectUri(redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n  }\n  /**\n   * add id_token_hint to logout request\n   * @param idTokenHint\n   */\n  addIdTokenHint(idTokenHint) {\n    this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n  }\n  /**\n   * add domain_hint\n   * @param domainHint\n   */\n  addDomainHint(domainHint) {\n    this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n  }\n  /**\n   * add login_hint\n   * @param loginHint\n   */\n  addLoginHint(loginHint) {\n    this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n  }\n  /**\n   * Adds the CCS (Cache Credential Service) query parameter for login_hint\n   * @param loginHint\n   */\n  addCcsUpn(loginHint) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\n  }\n  /**\n   * Adds the CCS (Cache Credential Service) query parameter for account object\n   * @param loginHint\n   */\n  addCcsOid(clientInfo) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\n  }\n  /**\n   * add sid\n   * @param sid\n   */\n  addSid(sid) {\n    this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n  }\n  /**\n   * add claims\n   * @param claims\n   */\n  addClaims(claims, clientCapabilities) {\n    const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n    RequestValidator.validateClaims(mergedClaims);\n    this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n  }\n  /**\n   * add correlationId\n   * @param correlationId\n   */\n  addCorrelationId(correlationId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n  }\n  /**\n   * add library info query params\n   * @param libraryInfo\n   */\n  addLibraryInfo(libraryInfo) {\n    // Telemetry Info\n    this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n    if (libraryInfo.os) {\n      this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n    }\n    if (libraryInfo.cpu) {\n      this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n    }\n  }\n  /**\n   * Add client telemetry parameters\n   * @param appTelemetry\n   */\n  addApplicationTelemetry(appTelemetry) {\n    if (appTelemetry?.appName) {\n      this.parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);\n    }\n    if (appTelemetry?.appVersion) {\n      this.parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);\n    }\n  }\n  /**\n   * add prompt\n   * @param prompt\n   */\n  addPrompt(prompt) {\n    RequestValidator.validatePrompt(prompt);\n    this.parameters.set(`${AADServerParamKeys.PROMPT}`, encodeURIComponent(prompt));\n  }\n  /**\n   * add state\n   * @param state\n   */\n  addState(state) {\n    if (state) {\n      this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n    }\n  }\n  /**\n   * add nonce\n   * @param nonce\n   */\n  addNonce(nonce) {\n    this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n  }\n  /**\n   * add code_challenge and code_challenge_method\n   * - throw if either of them are not passed\n   * @param codeChallenge\n   * @param codeChallengeMethod\n   */\n  addCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n    RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n    if (codeChallenge && codeChallengeMethod) {\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n    } else {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    }\n  }\n  /**\n   * add the `authorization_code` passed by the user to exchange for a token\n   * @param code\n   */\n  addAuthorizationCode(code) {\n    this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n  }\n  /**\n   * add the `authorization_code` passed by the user to exchange for a token\n   * @param code\n   */\n  addDeviceCode(code) {\n    this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n  }\n  /**\n   * add the `refreshToken` passed by the user\n   * @param refreshToken\n   */\n  addRefreshToken(refreshToken) {\n    this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n  }\n  /**\n   * add the `code_verifier` passed by the user to exchange for a token\n   * @param codeVerifier\n   */\n  addCodeVerifier(codeVerifier) {\n    this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n  }\n  /**\n   * add client_secret\n   * @param clientSecret\n   */\n  addClientSecret(clientSecret) {\n    this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n  }\n  /**\n   * add clientAssertion for confidential client flows\n   * @param clientAssertion\n   */\n  addClientAssertion(clientAssertion) {\n    if (clientAssertion) {\n      this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n    }\n  }\n  /**\n   * add clientAssertionType for confidential client flows\n   * @param clientAssertionType\n   */\n  addClientAssertionType(clientAssertionType) {\n    if (clientAssertionType) {\n      this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n    }\n  }\n  /**\n   * add OBO assertion for confidential client flows\n   * @param clientAssertion\n   */\n  addOboAssertion(oboAssertion) {\n    this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n  }\n  /**\n   * add grant type\n   * @param grantType\n   */\n  addRequestTokenUse(tokenUse) {\n    this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n  }\n  /**\n   * add grant type\n   * @param grantType\n   */\n  addGrantType(grantType) {\n    this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n  }\n  /**\n   * add client info\n   *\n   */\n  addClientInfo() {\n    this.parameters.set(CLIENT_INFO, \"1\");\n  }\n  /**\n   * add extraQueryParams\n   * @param eQParams\n   */\n  addExtraQueryParameters(eQParams) {\n    const sanitizedEQParams = RequestValidator.sanitizeEQParams(eQParams, this.parameters);\n    Object.keys(sanitizedEQParams).forEach(key => {\n      this.parameters.set(key, eQParams[key]);\n    });\n  }\n  addClientCapabilitiesToClaims(claims, clientCapabilities) {\n    let mergedClaims;\n    // Parse provided claims into JSON object or initialize empty object\n    if (!claims) {\n      mergedClaims = {};\n    } else {\n      try {\n        mergedClaims = JSON.parse(claims);\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidClaimsRequestError();\n      }\n    }\n    if (clientCapabilities && clientCapabilities.length > 0) {\n      if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n        // Add access_token key to claims object\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n      }\n      // Add xms_cc claim with provided clientCapabilities to access_token key\n      mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n        values: clientCapabilities\n      };\n    }\n    return JSON.stringify(mergedClaims);\n  }\n  /**\n   * adds `username` for Password Grant flow\n   * @param username\n   */\n  addUsername(username) {\n    this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\n  }\n  /**\n   * adds `password` for Password Grant flow\n   * @param password\n   */\n  addPassword(password) {\n    this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\n  }\n  /**\n   * add pop_jwk to query params\n   * @param cnfString\n   */\n  addPopToken(cnfString) {\n    if (cnfString) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n    }\n  }\n  /**\n   * add SSH JWK and key ID to query params\n   */\n  addSshJwk(sshJwkString) {\n    if (sshJwkString) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.SSH);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));\n    }\n  }\n  /**\n   * add server telemetry fields\n   * @param serverTelemetryManager\n   */\n  addServerTelemetry(serverTelemetryManager) {\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n    this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n  }\n  /**\n   * Adds parameter that indicates to the server that throttling is supported\n   */\n  addThrottling() {\n    this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n  }\n  /**\n   * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\n   */\n  addLogoutHint(logoutHint) {\n    this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));\n  }\n  /**\n   * Utility to create a URL from the params map\n   */\n  createQueryString() {\n    const queryParameterArray = new Array();\n    this.parameters.forEach((value, key) => {\n      queryParameterArray.push(`${key}=${value}`);\n    });\n    return queryParameterArray.join(\"&\");\n  }\n}\nexport { RequestParameterBuilder };","map":{"version":3,"names":["RequestParameterBuilder","parameters","Map","addResponseTypeCode","set","AADServerParamKeys","RESPONSE_TYPE","encodeURIComponent","Constants","CODE_RESPONSE_TYPE","addResponseTypeForTokenAndIdToken","RESPONSE_MODE","responseMode","ResponseMode","QUERY","addNativeBroker","NATIVE_BROKER","addOidcScopes","defaultScopes","includes","scopes","requestScopes","addClientId","clientId","CLIENT_ID","addRedirectUri","redirectUri","addPostLogoutRedirectUri","RequestValidator","validateRedirectUri","POST_LOGOUT_URI","addDomainHint","domainHint","SSOTypes","DOMAIN_HINT","addLoginHint","loginHint","HeaderNames","CCS_HEADER","addCcsOid","clientInfo","uid","utid","addSid","sid","SID","validateClaims","mergedClaims","CLAIMS","addCorrelationId","correlationId","X_CLIENT_SKU","libraryInfo","sku","X_CLIENT_VER","version","cpu","X_CLIENT_CPU","appTelemetry","appName","X_APP_NAME","addPrompt","prompt","validatePrompt","state","STATE","addNonce","nonce","addCodeChallengeParams","codeChallenge","codeChallengeMethod","validateCodeChallengeParams","CODE_CHALLENGE","CODE_CHALLENGE_METHOD","addAuthorizationCode","code","addDeviceCode","DEVICE_CODE"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\request\\RequestParameterBuilder.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AADServerParamKeys,\n    Constants,\n    ResponseMode,\n    SSOTypes,\n    CLIENT_INFO,\n    AuthenticationScheme,\n    ClaimsRequestKeys,\n    PasswordGrantConstants,\n    OIDC_DEFAULT_SCOPES,\n    ThrottlingConstants,\n    HeaderNames,\n} from \"../utils/Constants\";\nimport { ScopeSet } from \"./ScopeSet\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { StringDict } from \"../utils/MsalTypes\";\nimport { RequestValidator } from \"./RequestValidator\";\nimport {\n    ApplicationTelemetry,\n    LibraryInfo,\n} from \"../config/ClientConfiguration\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { ClientInfo } from \"../account/ClientInfo\";\n\n/** @internal */\nexport class RequestParameterBuilder {\n    private parameters: Map<string, string>;\n\n    constructor() {\n        this.parameters = new Map<string, string>();\n    }\n\n    /**\n     * add response_type = code\n     */\n    addResponseTypeCode(): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_TYPE,\n            encodeURIComponent(Constants.CODE_RESPONSE_TYPE)\n        );\n    }\n\n    /**\n     * add response_type = token id_token\n     */\n    addResponseTypeForTokenAndIdToken(): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_TYPE,\n            encodeURIComponent(\n                `${Constants.TOKEN_RESPONSE_TYPE} ${Constants.ID_TOKEN_RESPONSE_TYPE}`\n            )\n        );\n    }\n\n    /**\n     * add response_mode. defaults to query.\n     * @param responseMode\n     */\n    addResponseMode(responseMode?: ResponseMode): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_MODE,\n            encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY)\n        );\n    }\n\n    /**\n     * Add flag to indicate STS should attempt to use WAM if available\n     */\n    addNativeBroker(): void {\n        this.parameters.set(\n            AADServerParamKeys.NATIVE_BROKER,\n            encodeURIComponent(\"1\")\n        );\n    }\n\n    /**\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n     * @param scopeSet\n     * @param addOidcScopes\n     */\n    addScopes(\n        scopes: string[],\n        addOidcScopes: boolean = true,\n        defaultScopes: Array<string> = OIDC_DEFAULT_SCOPES\n    ): void {\n        // Always add openid to the scopes when adding OIDC scopes\n        if (\n            addOidcScopes &&\n            !defaultScopes.includes(\"openid\") &&\n            !scopes.includes(\"openid\")\n        ) {\n            defaultScopes.push(\"openid\");\n        }\n        const requestScopes = addOidcScopes\n            ? [...(scopes || []), ...defaultScopes]\n            : scopes || [];\n        const scopeSet = new ScopeSet(requestScopes);\n        this.parameters.set(\n            AADServerParamKeys.SCOPE,\n            encodeURIComponent(scopeSet.printScopes())\n        );\n    }\n\n    /**\n     * add clientId\n     * @param clientId\n     */\n    addClientId(clientId: string): void {\n        this.parameters.set(\n            AADServerParamKeys.CLIENT_ID,\n            encodeURIComponent(clientId)\n        );\n    }\n\n    /**\n     * add redirect_uri\n     * @param redirectUri\n     */\n    addRedirectUri(redirectUri: string): void {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(\n            AADServerParamKeys.REDIRECT_URI,\n            encodeURIComponent(redirectUri)\n        );\n    }\n\n    /**\n     * add post logout redirectUri\n     * @param redirectUri\n     */\n    addPostLogoutRedirectUri(redirectUri: string): void {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(\n            AADServerParamKeys.POST_LOGOUT_URI,\n            encodeURIComponent(redirectUri)\n        );\n    }\n\n    /**\n     * add id_token_hint to logout request\n     * @param idTokenHint\n     */\n    addIdTokenHint(idTokenHint: string): void {\n        this.parameters.set(\n            AADServerParamKeys.ID_TOKEN_HINT,\n            encodeURIComponent(idTokenHint)\n        );\n    }\n\n    /**\n     * add domain_hint\n     * @param domainHint\n     */\n    addDomainHint(domainHint: string): void {\n        this.parameters.set(\n            SSOTypes.DOMAIN_HINT,\n            encodeURIComponent(domainHint)\n        );\n    }\n\n    /**\n     * add login_hint\n     * @param loginHint\n     */\n    addLoginHint(loginHint: string): void {\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n    }\n\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\n     * @param loginHint\n     */\n    addCcsUpn(loginHint: string): void {\n        this.parameters.set(\n            HeaderNames.CCS_HEADER,\n            encodeURIComponent(`UPN:${loginHint}`)\n        );\n    }\n\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for account object\n     * @param loginHint\n     */\n    addCcsOid(clientInfo: ClientInfo): void {\n        this.parameters.set(\n            HeaderNames.CCS_HEADER,\n            encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`)\n        );\n    }\n\n    /**\n     * add sid\n     * @param sid\n     */\n    addSid(sid: string): void {\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n    }\n\n    /**\n     * add claims\n     * @param claims\n     */\n    addClaims(claims?: string, clientCapabilities?: Array<string>): void {\n        const mergedClaims = this.addClientCapabilitiesToClaims(\n            claims,\n            clientCapabilities\n        );\n        RequestValidator.validateClaims(mergedClaims);\n        this.parameters.set(\n            AADServerParamKeys.CLAIMS,\n            encodeURIComponent(mergedClaims)\n        );\n    }\n\n    /**\n     * add correlationId\n     * @param correlationId\n     */\n    addCorrelationId(correlationId: string): void {\n        this.parameters.set(\n            AADServerParamKeys.CLIENT_REQUEST_ID,\n            encodeURIComponent(correlationId)\n        );\n    }\n\n    /**\n     * add library info query params\n     * @param libraryInfo\n     */\n    addLibraryInfo(libraryInfo: LibraryInfo): void {\n        // Telemetry Info\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n        this.parameters.set(\n            AADServerParamKeys.X_CLIENT_VER,\n            libraryInfo.version\n        );\n        if (libraryInfo.os) {\n            this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n        }\n        if (libraryInfo.cpu) {\n            this.parameters.set(\n                AADServerParamKeys.X_CLIENT_CPU,\n                libraryInfo.cpu\n            );\n        }\n    }\n\n    /**\n     * Add client telemetry parameters\n     * @param appTelemetry\n     */\n    addApplicationTelemetry(appTelemetry: ApplicationTelemetry): void {\n        if (appTelemetry?.appName) {\n            this.parameters.set(\n                AADServerParamKeys.X_APP_NAME,\n                appTelemetry.appName\n            );\n        }\n\n        if (appTelemetry?.appVersion) {\n            this.parameters.set(\n                AADServerParamKeys.X_APP_VER,\n                appTelemetry.appVersion\n            );\n        }\n    }\n\n    /**\n     * add prompt\n     * @param prompt\n     */\n    addPrompt(prompt: string): void {\n        RequestValidator.validatePrompt(prompt);\n        this.parameters.set(\n            `${AADServerParamKeys.PROMPT}`,\n            encodeURIComponent(prompt)\n        );\n    }\n\n    /**\n     * add state\n     * @param state\n     */\n    addState(state: string): void {\n        if (state) {\n            this.parameters.set(\n                AADServerParamKeys.STATE,\n                encodeURIComponent(state)\n            );\n        }\n    }\n\n    /**\n     * add nonce\n     * @param nonce\n     */\n    addNonce(nonce: string): void {\n        this.parameters.set(\n            AADServerParamKeys.NONCE,\n            encodeURIComponent(nonce)\n        );\n    }\n\n    /**\n     * add code_challenge and code_challenge_method\n     * - throw if either of them are not passed\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    addCodeChallengeParams(\n        codeChallenge: string,\n        codeChallengeMethod: string\n    ): void {\n        RequestValidator.validateCodeChallengeParams(\n            codeChallenge,\n            codeChallengeMethod\n        );\n        if (codeChallenge && codeChallengeMethod) {\n            this.parameters.set(\n                AADServerParamKeys.CODE_CHALLENGE,\n                encodeURIComponent(codeChallenge)\n            );\n            this.parameters.set(\n                AADServerParamKeys.CODE_CHALLENGE_METHOD,\n                encodeURIComponent(codeChallengeMethod)\n            );\n        } else {\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n        }\n    }\n\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addAuthorizationCode(code: string): void {\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n    }\n\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addDeviceCode(code: string): void {\n        this.parameters.set(\n            AADServerParamKeys.DEVICE_CODE,\n            encodeURIComponent(code)\n        );\n    }\n\n    /**\n     * add the `refreshToken` passed by the user\n     * @param refreshToken\n     */\n    addRefreshToken(refreshToken: string): void {\n        this.parameters.set(\n            AADServerParamKeys.REFRESH_TOKEN,\n            encodeURIComponent(refreshToken)\n        );\n    }\n\n    /**\n     * add the `code_verifier` passed by the user to exchange for a token\n     * @param codeVerifier\n     */\n    addCodeVerifier(codeVerifier: string): void {\n        this.parameters.set(\n            AADServerParamKeys.CODE_VERIFIER,\n            encodeURIComponent(codeVerifier)\n        );\n    }\n\n    /**\n     * add client_secret\n     * @param clientSecret\n     */\n    addClientSecret(clientSecret: string): void {\n        this.parameters.set(\n            AADServerParamKeys.CLIENT_SECRET,\n            encodeURIComponent(clientSecret)\n        );\n    }\n\n    /**\n     * add clientAssertion for confidential client flows\n     * @param clientAssertion\n     */\n    addClientAssertion(clientAssertion: string): void {\n        if (clientAssertion) {\n            this.parameters.set(\n                AADServerParamKeys.CLIENT_ASSERTION,\n                encodeURIComponent(clientAssertion)\n            );\n        }\n    }\n\n    /**\n     * add clientAssertionType for confidential client flows\n     * @param clientAssertionType\n     */\n    addClientAssertionType(clientAssertionType: string): void {\n        if (clientAssertionType) {\n            this.parameters.set(\n                AADServerParamKeys.CLIENT_ASSERTION_TYPE,\n                encodeURIComponent(clientAssertionType)\n            );\n        }\n    }\n\n    /**\n     * add OBO assertion for confidential client flows\n     * @param clientAssertion\n     */\n    addOboAssertion(oboAssertion: string): void {\n        this.parameters.set(\n            AADServerParamKeys.OBO_ASSERTION,\n            encodeURIComponent(oboAssertion)\n        );\n    }\n\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addRequestTokenUse(tokenUse: string): void {\n        this.parameters.set(\n            AADServerParamKeys.REQUESTED_TOKEN_USE,\n            encodeURIComponent(tokenUse)\n        );\n    }\n\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addGrantType(grantType: string): void {\n        this.parameters.set(\n            AADServerParamKeys.GRANT_TYPE,\n            encodeURIComponent(grantType)\n        );\n    }\n\n    /**\n     * add client info\n     *\n     */\n    addClientInfo(): void {\n        this.parameters.set(CLIENT_INFO, \"1\");\n    }\n\n    /**\n     * add extraQueryParams\n     * @param eQParams\n     */\n    addExtraQueryParameters(eQParams: StringDict): void {\n        const sanitizedEQParams = RequestValidator.sanitizeEQParams(\n            eQParams,\n            this.parameters\n        );\n        Object.keys(sanitizedEQParams).forEach((key) => {\n            this.parameters.set(key, eQParams[key]);\n        });\n    }\n\n    addClientCapabilitiesToClaims(\n        claims?: string,\n        clientCapabilities?: Array<string>\n    ): string {\n        let mergedClaims: object;\n\n        // Parse provided claims into JSON object or initialize empty object\n        if (!claims) {\n            mergedClaims = {};\n        } else {\n            try {\n                mergedClaims = JSON.parse(claims);\n            } catch (e) {\n                throw ClientConfigurationError.createInvalidClaimsRequestError();\n            }\n        }\n\n        if (clientCapabilities && clientCapabilities.length > 0) {\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n                // Add access_token key to claims object\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n            }\n\n            // Add xms_cc claim with provided clientCapabilities to access_token key\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][\n                ClaimsRequestKeys.XMS_CC\n            ] = {\n                values: clientCapabilities,\n            };\n        }\n\n        return JSON.stringify(mergedClaims);\n    }\n\n    /**\n     * adds `username` for Password Grant flow\n     * @param username\n     */\n    addUsername(username: string): void {\n        this.parameters.set(\n            PasswordGrantConstants.username,\n            encodeURIComponent(username)\n        );\n    }\n\n    /**\n     * adds `password` for Password Grant flow\n     * @param password\n     */\n    addPassword(password: string): void {\n        this.parameters.set(\n            PasswordGrantConstants.password,\n            encodeURIComponent(password)\n        );\n    }\n\n    /**\n     * add pop_jwk to query params\n     * @param cnfString\n     */\n    addPopToken(cnfString: string): void {\n        if (cnfString) {\n            this.parameters.set(\n                AADServerParamKeys.TOKEN_TYPE,\n                AuthenticationScheme.POP\n            );\n            this.parameters.set(\n                AADServerParamKeys.REQ_CNF,\n                encodeURIComponent(cnfString)\n            );\n        }\n    }\n\n    /**\n     * add SSH JWK and key ID to query params\n     */\n    addSshJwk(sshJwkString: string): void {\n        if (sshJwkString) {\n            this.parameters.set(\n                AADServerParamKeys.TOKEN_TYPE,\n                AuthenticationScheme.SSH\n            );\n            this.parameters.set(\n                AADServerParamKeys.REQ_CNF,\n                encodeURIComponent(sshJwkString)\n            );\n        }\n    }\n\n    /**\n     * add server telemetry fields\n     * @param serverTelemetryManager\n     */\n    addServerTelemetry(serverTelemetryManager: ServerTelemetryManager): void {\n        this.parameters.set(\n            AADServerParamKeys.X_CLIENT_CURR_TELEM,\n            serverTelemetryManager.generateCurrentRequestHeaderValue()\n        );\n        this.parameters.set(\n            AADServerParamKeys.X_CLIENT_LAST_TELEM,\n            serverTelemetryManager.generateLastRequestHeaderValue()\n        );\n    }\n\n    /**\n     * Adds parameter that indicates to the server that throttling is supported\n     */\n    addThrottling(): void {\n        this.parameters.set(\n            AADServerParamKeys.X_MS_LIB_CAPABILITY,\n            ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE\n        );\n    }\n\n    /**\n     * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\n     */\n    addLogoutHint(logoutHint: string): void {\n        this.parameters.set(\n            AADServerParamKeys.LOGOUT_HINT,\n            encodeURIComponent(logoutHint)\n        );\n    }\n\n    /**\n     * Utility to create a URL from the params map\n     */\n    createQueryString(): string {\n        const queryParameterArray: Array<string> = new Array<string>();\n\n        this.parameters.forEach((value, key) => {\n            queryParameterArray.push(`${key}=${value}`);\n        });\n\n        return queryParameterArray.join(\"&\");\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}