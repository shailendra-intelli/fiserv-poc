{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-typescript\\\\intelli-gui\\\\src\\\\components\\\\main\\\\subtabs\\\\responses\\\\PathSubTabResponses.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { InputWithMovingLabel } from \"intelli-ui-components-library\";\nimport { useAppDispatch, useAppSelector } from \"../../../../store/hooks\";\nimport Responses from \"./Responses\";\nimport { updatePath } from \"../../mainTabsSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PathSubTabResponses = ({\n  pathName,\n  methodName\n}) => {\n  _s();\n  const paths = useAppSelector(state => state.main.paths);\n  const dispatch = useAppDispatch();\n  const [showResponses, setShowResponses] = useState(true); // Initial visibility state\n\n  const toggleResponses = () => {\n    setShowResponses(prevShowResponses => !prevShowResponses);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [Object.entries(paths[pathName][methodName].responseBody.content || {}).map(([key, value]) => /*#__PURE__*/_jsxDEV(InputWithMovingLabel, {\n        inputProps: {\n          label: \"Media-Type\",\n          name: \"responseBody.description\",\n          value: key !== null && key !== void 0 ? key : \"\",\n          onChange: e => console.log(e),\n          type: \"text\"\n        },\n        top: true,\n        className: \"mb-4\"\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          dispatch(updatePath({\n            pathName,\n            methodName,\n            methodKey: \"responseBody\",\n            data: {\n              ...paths[pathName][methodName].responseBody,\n              content: {\n                \"change/me\": {\n                  schema: {}\n                }\n              }\n            }\n          }));\n          toggleResponses(); // Togglling the visibility state\n        },\n        children: showResponses && /*#__PURE__*/_jsxDEV(Responses, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(PathSubTabResponses, \"BUt8EImVDV/nTZEUcEihpNbndCg=\", false, function () {\n  return [useAppSelector, useAppDispatch];\n});\n_c = PathSubTabResponses;\nexport default PathSubTabResponses;\nvar _c;\n$RefreshReg$(_c, \"PathSubTabResponses\");","map":{"version":3,"names":["React","useState","InputWithMovingLabel","useAppDispatch","useAppSelector","Responses","updatePath","jsxDEV","_jsxDEV","PathSubTabResponses","pathName","methodName","_s","paths","state","main","dispatch","showResponses","setShowResponses","toggleResponses","prevShowResponses","className","children","Object","entries","responseBody","content","map","key","value","inputProps","label","name","onChange","e","console","log","type","top","fileName","_jsxFileName","lineNumber","columnNumber","onClick","methodKey","data","schema","_c","$RefreshReg$"],"sources":["D:/react-typescript/intelli-gui/src/components/main/subtabs/responses/PathSubTabResponses.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Button,\r\n  InputWithMovingLabel,\r\n} from \"intelli-ui-components-library\";\r\nimport { AddIcon } from \"../../../../assets/icons\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../../store/hooks\";\r\nimport Responses from \"./Responses\";\r\nimport { updatePath } from \"../../mainTabsSlice\";\r\n\r\nconst PathSubTabResponses = ({ pathName, methodName }: any) => {\r\n  const paths = useAppSelector((state) => state.main.paths);\r\n  const dispatch = useAppDispatch();\r\n  const [showResponses, setShowResponses] = useState(true); // Initial visibility state\r\n\r\n  const toggleResponses = () => {\r\n    setShowResponses((prevShowResponses) => !prevShowResponses);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-6\">\r\n      <div>\r\n        {Object.entries(\r\n          paths[pathName][methodName].responseBody.content || {}\r\n        ).map(([key, value]) => (\r\n          <InputWithMovingLabel\r\n            key={key}\r\n            inputProps={{\r\n              label: \"Media-Type\",\r\n              name: \"responseBody.description\",\r\n              value: key ?? \"\",\r\n              onChange: (e) => console.log(e),\r\n              type: \"text\",\r\n            }}\r\n            top\r\n            className=\"mb-4\"\r\n          />\r\n        ))}\r\n        <button\r\n          onClick={() => {\r\n            dispatch(\r\n              updatePath({\r\n                pathName,\r\n                methodName,\r\n                methodKey: \"responseBody\",\r\n                data: {\r\n                  ...paths[pathName][methodName].responseBody,\r\n                  content: {\r\n                    \"change/me\": {\r\n                      schema: {},\r\n                    },\r\n                  },\r\n                },\r\n              })\r\n            );\r\n            toggleResponses(); // Togglling the visibility state\r\n          }}\r\n        >\r\n          {showResponses && <Responses />}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PathSubTabResponses;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAGEC,oBAAoB,QACf,+BAA+B;AAEtC,SAASC,cAAc,EAAEC,cAAc,QAAQ,yBAAyB;AACxE,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,UAAU,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,mBAAmB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC7D,MAAMC,KAAK,GAAGT,cAAc,CAAEU,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACF,KAAK,CAAC;EACzD,MAAMG,QAAQ,GAAGb,cAAc,CAAC,CAAC;EACjC,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1D,MAAMkB,eAAe,GAAGA,CAAA,KAAM;IAC5BD,gBAAgB,CAAEE,iBAAiB,IAAK,CAACA,iBAAiB,CAAC;EAC7D,CAAC;EAED,oBACEZ,OAAA;IAAKa,SAAS,EAAC,MAAM;IAAAC,QAAA,eACnBd,OAAA;MAAAc,QAAA,GACGC,MAAM,CAACC,OAAO,CACbX,KAAK,CAACH,QAAQ,CAAC,CAACC,UAAU,CAAC,CAACc,YAAY,CAACC,OAAO,IAAI,CAAC,CACvD,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,kBACjBrB,OAAA,CAACN,oBAAoB;QAEnB4B,UAAU,EAAE;UACVC,KAAK,EAAE,YAAY;UACnBC,IAAI,EAAE,0BAA0B;UAChCH,KAAK,EAAED,GAAG,aAAHA,GAAG,cAAHA,GAAG,GAAI,EAAE;UAChBK,QAAQ,EAAGC,CAAC,IAAKC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;UAC/BG,IAAI,EAAE;QACR,CAAE;QACFC,GAAG;QACHjB,SAAS,EAAC;MAAM,GATXO,GAAG;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUT,CACF,CAAC,eACFlC,OAAA;QACEmC,OAAO,EAAEA,CAAA,KAAM;UACb3B,QAAQ,CACNV,UAAU,CAAC;YACTI,QAAQ;YACRC,UAAU;YACViC,SAAS,EAAE,cAAc;YACzBC,IAAI,EAAE;cACJ,GAAGhC,KAAK,CAACH,QAAQ,CAAC,CAACC,UAAU,CAAC,CAACc,YAAY;cAC3CC,OAAO,EAAE;gBACP,WAAW,EAAE;kBACXoB,MAAM,EAAE,CAAC;gBACX;cACF;YACF;UACF,CAAC,CACH,CAAC;UACD3B,eAAe,CAAC,CAAC,CAAC,CAAC;QACrB,CAAE;QAAAG,QAAA,EAEDL,aAAa,iBAAIT,OAAA,CAACH,SAAS;UAAAkC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC9B,EAAA,CArDIH,mBAAmB;EAAA,QACTL,cAAc,EACXD,cAAc;AAAA;AAAA4C,EAAA,GAF3BtC,mBAAmB;AAuDzB,eAAeA,mBAAmB;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}