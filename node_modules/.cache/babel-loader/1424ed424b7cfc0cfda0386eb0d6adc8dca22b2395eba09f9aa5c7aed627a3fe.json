{"ast":null,"code":"/*! @azure/msal-common v14.7.0 2024-02-07 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Returns true if tenantId matches the utid portion of homeAccountId\n * @param tenantId\n * @param homeAccountId\n * @returns\n */\nfunction tenantIdMatchesHomeTenant(tenantId, homeAccountId) {\n  return !!tenantId && !!homeAccountId && tenantId === homeAccountId.split(\".\")[1];\n}\nfunction buildTenantProfileFromIdTokenClaims(homeAccountId, idTokenClaims) {\n  const {\n    oid,\n    sub,\n    tid,\n    name,\n    tfp,\n    acr\n  } = idTokenClaims;\n  /**\n   * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:\n   * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.\n   * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.\n   * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.\n   */\n  const tenantId = tid || tfp || acr || \"\";\n  return {\n    tenantId: tenantId,\n    localAccountId: oid || sub || \"\",\n    name: name,\n    isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId)\n  };\n}\n/**\n * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info\n * @param baseAccountInfo\n * @param idTokenClaims\n * @returns\n */\nfunction updateAccountTenantProfileData(baseAccountInfo, tenantProfile, idTokenClaims) {\n  let updatedAccountInfo = baseAccountInfo;\n  // Tenant Profile overrides passed in account info\n  if (tenantProfile) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      isHomeTenant,\n      ...tenantProfileOverride\n    } = tenantProfile;\n    updatedAccountInfo = {\n      ...baseAccountInfo,\n      ...tenantProfileOverride\n    };\n  }\n  // ID token claims override passed in account info and tenant profile\n  if (idTokenClaims) {\n    // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      isHomeTenant,\n      ...claimsSourcedTenantProfile\n    } = buildTenantProfileFromIdTokenClaims(baseAccountInfo.homeAccountId, idTokenClaims);\n    updatedAccountInfo = {\n      ...updatedAccountInfo,\n      ...claimsSourcedTenantProfile,\n      idTokenClaims: idTokenClaims\n    };\n    return updatedAccountInfo;\n  }\n  return updatedAccountInfo;\n}\nexport { buildTenantProfileFromIdTokenClaims, tenantIdMatchesHomeTenant, updateAccountTenantProfileData };","map":{"version":3,"names":["tenantIdMatchesHomeTenant","tenantId","homeAccountId","split","buildTenantProfileFromIdTokenClaims","idTokenClaims","oid","sub","tid","name","tfp","acr","localAccountId","isHomeTenant","updateAccountTenantProfileData","baseAccountInfo","tenantProfile","updatedAccountInfo","tenantProfileOverride","claimsSourcedTenantProfile"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\account\\AccountInfo.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenClaims } from \"./TokenClaims\";\n/**\n * Account object with the following signature:\n * - homeAccountId          - Home account identifier for this account object\n * - environment            - Entity which issued the token represented by the domain of the issuer (e.g. login.microsoftonline.com)\n * - tenantId               - Full tenant or organizational id that this account belongs to\n * - username               - preferred_username claim of the id_token that represents this account\n * - localAccountId         - Local, tenant-specific account identifer for this account object, usually used in legacy cases\n * - name                   - Full name for the account, including given name and family name\n * - idToken                - raw ID token\n * - idTokenClaims          - Object contains claims from ID token\n * - nativeAccountId        - The user's native account ID\n * - tenantProfiles         - Map of tenant profile objects for each tenant that the account has authenticated with in the browser\n */\nexport type AccountInfo = {\n    homeAccountId: string;\n    environment: string;\n    tenantId: string;\n    username: string;\n    localAccountId: string;\n    name?: string;\n    idToken?: string;\n    idTokenClaims?: TokenClaims & {\n        [key: string]:\n            | string\n            | number\n            | string[]\n            | object\n            | undefined\n            | unknown;\n    };\n    nativeAccountId?: string;\n    authorityType?: string;\n    tenantProfiles?: Map<string, TenantProfile>;\n};\n\n/**\n * Account details that vary across tenants for the same user\n */\nexport type TenantProfile = Pick<\n    AccountInfo,\n    \"tenantId\" | \"localAccountId\" | \"name\"\n> & {\n    /**\n     * - isHomeTenant           - True if this is the home tenant profile of the account, false if it's a guest tenant profile\n     */\n    isHomeTenant?: boolean;\n};\n\nexport type ActiveAccountFilters = {\n    homeAccountId: string;\n    localAccountId: string;\n    tenantId?: string;\n};\n\n/**\n * Returns true if tenantId matches the utid portion of homeAccountId\n * @param tenantId\n * @param homeAccountId\n * @returns\n */\nexport function tenantIdMatchesHomeTenant(\n    tenantId?: string,\n    homeAccountId?: string\n): boolean {\n    return (\n        !!tenantId &&\n        !!homeAccountId &&\n        tenantId === homeAccountId.split(\".\")[1]\n    );\n}\n\nexport function buildTenantProfileFromIdTokenClaims(\n    homeAccountId: string,\n    idTokenClaims: TokenClaims\n): TenantProfile {\n    const { oid, sub, tid, name, tfp, acr } = idTokenClaims;\n\n    /**\n     * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:\n     * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.\n     * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.\n     * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.\n     */\n    const tenantId = tid || tfp || acr || \"\";\n\n    return {\n        tenantId: tenantId,\n        localAccountId: oid || sub || \"\",\n        name: name,\n        isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId),\n    };\n}\n\n/**\n * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info\n * @param baseAccountInfo\n * @param idTokenClaims\n * @returns\n */\nexport function updateAccountTenantProfileData(\n    baseAccountInfo: AccountInfo,\n    tenantProfile?: TenantProfile,\n    idTokenClaims?: TokenClaims\n): AccountInfo {\n    let updatedAccountInfo = baseAccountInfo;\n    // Tenant Profile overrides passed in account info\n    if (tenantProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { isHomeTenant, ...tenantProfileOverride } = tenantProfile;\n        updatedAccountInfo = { ...baseAccountInfo, ...tenantProfileOverride };\n    }\n\n    // ID token claims override passed in account info and tenant profile\n    if (idTokenClaims) {\n        // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { isHomeTenant, ...claimsSourcedTenantProfile } =\n            buildTenantProfileFromIdTokenClaims(\n                baseAccountInfo.homeAccountId,\n                idTokenClaims\n            );\n\n        updatedAccountInfo = {\n            ...updatedAccountInfo,\n            ...claimsSourcedTenantProfile,\n            idTokenClaims: idTokenClaims,\n        };\n\n        return updatedAccountInfo;\n    }\n\n    return updatedAccountInfo;\n}\n"],"mappings":";;;AAAA;;;AAGG;AAyDH;;;;;AAKG;AACa,SAAAA,yBAAyBA,CACrCC,QAAiB,EACjBC,aAAsB;EAEtB,OACI,CAAC,CAACD,QAAQ,IACV,CAAC,CAACC,aAAa,IACfD,QAAQ,KAAKC,aAAa,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAEhD;AAEgB,SAAAC,mCAAmCA,CAC/CF,aAAqB,EACrBG,aAA0B;EAE1B,MAAM;IAAEC,GAAG;IAAEC,GAAG;IAAEC,GAAG;IAAEC,IAAI;IAAEC,GAAG;IAAEC;EAAG,CAAE,GAAGN,aAAa;EAEvD;;;;;AAKG;EACH,MAAMJ,QAAQ,GAAGO,GAAG,IAAIE,GAAG,IAAIC,GAAG,IAAI,EAAE;EAExC,OAAO;IACHV,QAAQ,EAAEA,QAAQ;IAClBW,cAAc,EAAEN,GAAG,IAAIC,GAAG,IAAI,EAAE;IAChCE,IAAI,EAAEA,IAAI;IACVI,YAAY,EAAEb,yBAAyB,CAACC,QAAQ,EAAEC,aAAa;GAClE;AACL;AAEA;;;;;AAKG;SACaY,8BAA8BA,CAC1CC,eAA4B,EAC5BC,aAA6B,EAC7BX,aAA2B;EAE3B,IAAIY,kBAAkB,GAAGF,eAAe;;EAExC,IAAIC,aAAa,EAAE;;IAEf,MAAM;MAAEH,YAAY;MAAE,GAAGK;IAAqB,CAAE,GAAGF,aAAa;IAChEC,kBAAkB,GAAG;MAAE,GAAGF,eAAe;MAAE,GAAGG;IAAqB,CAAE;EACxE;;EAGD,IAAIb,aAAa,EAAE;;;IAGf,MAAM;MAAEQ,YAAY;MAAE,GAAGM;IAA0B,CAAE,GACjDf,mCAAmC,CAC/BW,eAAe,CAACb,aAAa,EAC7BG,aAAa,CAChB;IAELY,kBAAkB,GAAG;MACjB,GAAGA,kBAAkB;MACrB,GAAGE,0BAA0B;MAC7Bd,aAAa,EAAEA;KAClB;IAED,OAAOY,kBAAkB;EAC5B;EAED,OAAOA,kBAAkB;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}