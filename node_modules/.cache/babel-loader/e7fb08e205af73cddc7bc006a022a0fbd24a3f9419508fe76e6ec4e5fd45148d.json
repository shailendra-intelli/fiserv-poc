{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Utility class which exposes functions for managing date and time operations.\n */\nclass TimeUtils {\n  /**\n   * return the current time in Unix time (seconds).\n   */\n  static nowSeconds() {\n    // Date.getTime() returns in milliseconds.\n    return Math.round(new Date().getTime() / 1000.0);\n  }\n  /**\n   * check if a token is expired based on given UTC time in seconds.\n   * @param expiresOn\n   */\n  static isTokenExpired(expiresOn, offset) {\n    // check for access token expiry\n    const expirationSec = Number(expiresOn) || 0;\n    const offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\n    // If current time + offset is greater than token expiration time, then token is expired.\n    return offsetCurrentTimeSec > expirationSec;\n  }\n  /**\n   * If the current time is earlier than the time that a token was cached at, we must discard the token\n   * i.e. The system clock was turned back after acquiring the cached token\n   * @param cachedAt\n   * @param offset\n   */\n  static wasClockTurnedBack(cachedAt) {\n    const cachedAtSec = Number(cachedAt);\n    return cachedAtSec > TimeUtils.nowSeconds();\n  }\n  /**\n   * Waits for t number of milliseconds\n   * @param t number\n   * @param value T\n   */\n  static delay(t, value) {\n    return new Promise(resolve => setTimeout(() => resolve(value), t));\n  }\n}\nexport { TimeUtils };","map":{"version":3,"names":["TimeUtils","nowSeconds","Math","round","Date","getTime","isTokenExpired","expiresOn","offset","offsetCurrentTimeSec","expirationSec"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\utils\\TimeUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Utility class which exposes functions for managing date and time operations.\n */\nexport class TimeUtils {\n    /**\n     * return the current time in Unix time (seconds).\n     */\n    static nowSeconds(): number {\n        // Date.getTime() returns in milliseconds.\n        return Math.round(new Date().getTime() / 1000.0);\n    }\n\n    /**\n     * check if a token is expired based on given UTC time in seconds.\n     * @param expiresOn\n     */\n    static isTokenExpired(expiresOn: string, offset: number): boolean {\n        // check for access token expiry\n        const expirationSec = Number(expiresOn) || 0;\n        const offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\n\n        // If current time + offset is greater than token expiration time, then token is expired.\n        return offsetCurrentTimeSec > expirationSec;\n    }\n\n    /**\n     * If the current time is earlier than the time that a token was cached at, we must discard the token\n     * i.e. The system clock was turned back after acquiring the cached token\n     * @param cachedAt\n     * @param offset\n     */\n    static wasClockTurnedBack(cachedAt: string): boolean {\n        const cachedAtSec = Number(cachedAt);\n\n        return cachedAtSec > TimeUtils.nowSeconds();\n    }\n\n    /**\n     * Waits for t number of milliseconds\n     * @param t number\n     * @param value T\n     */\n    static delay<T>(t: number, value?: T): Promise<T | void> {\n        return new Promise((resolve) => setTimeout(() => resolve(value), t));\n    }\n}\n"],"mappings":";;;AAKA;;AAEG;AACH;AACI;;AAEG;AACG,MAAWA,SAAA;EAKjB;;;EAGG,OAAAC,WAAA;;IAUH,OAAAC,IAAA,CAAAC,KAAA,KAAAC,IAAA,GAAAC,OAAA;;;;;AAKG;EACH,OAAOC,cAAkBA,CAAAC,SAAA,EAAAC,MAAW;IAMpC;;;;IAIG,OAAAC,oBAAA,GAAAC,aAAA;EACH;EAGH"},"metadata":{},"sourceType":"module","externalDependencies":[]}