{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { AUTHORITY_METADATA_CONSTANTS } from '../../utils/Constants.mjs';\nimport { TimeUtils } from '../../utils/TimeUtils.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass AuthorityMetadataEntity {\n  constructor() {\n    this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n  }\n  /**\n   * Update the entity with new aliases, preferred_cache and preferred_network values\n   * @param metadata\n   * @param fromNetwork\n   */\n  updateCloudDiscoveryMetadata(metadata, fromNetwork) {\n    this.aliases = metadata.aliases;\n    this.preferred_cache = metadata.preferred_cache;\n    this.preferred_network = metadata.preferred_network;\n    this.aliasesFromNetwork = fromNetwork;\n  }\n  /**\n   * Update the entity with new endpoints\n   * @param metadata\n   * @param fromNetwork\n   */\n  updateEndpointMetadata(metadata, fromNetwork) {\n    this.authorization_endpoint = metadata.authorization_endpoint;\n    this.token_endpoint = metadata.token_endpoint;\n    this.end_session_endpoint = metadata.end_session_endpoint;\n    this.issuer = metadata.issuer;\n    this.endpointsFromNetwork = fromNetwork;\n    this.jwks_uri = metadata.jwks_uri;\n  }\n  /**\n   * Save the authority that was used to create this cache entry\n   * @param authority\n   */\n  updateCanonicalAuthority(authority) {\n    this.canonical_authority = authority;\n  }\n  /**\n   * Reset the exiresAt value\n   */\n  resetExpiresAt() {\n    this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n  }\n  /**\n   * Returns whether or not the data needs to be refreshed\n   */\n  isExpired() {\n    return this.expiresAt <= TimeUtils.nowSeconds();\n  }\n  /**\n   * Validates an entity: checks for all expected params\n   * @param entity\n   */\n  static isAuthorityMetadataEntity(key, entity) {\n    if (!entity) {\n      return false;\n    }\n    return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 && entity.hasOwnProperty(\"aliases\") && entity.hasOwnProperty(\"preferred_cache\") && entity.hasOwnProperty(\"preferred_network\") && entity.hasOwnProperty(\"canonical_authority\") && entity.hasOwnProperty(\"authorization_endpoint\") && entity.hasOwnProperty(\"token_endpoint\") && entity.hasOwnProperty(\"issuer\") && entity.hasOwnProperty(\"aliasesFromNetwork\") && entity.hasOwnProperty(\"endpointsFromNetwork\") && entity.hasOwnProperty(\"expiresAt\") && entity.hasOwnProperty(\"jwks_uri\");\n  }\n}\nexport { AuthorityMetadataEntity };","map":{"version":3,"names":["AuthorityMetadataEntity","constructor","expiresAt","TimeUtils","nowSeconds","REFRESH_TIME_SECONDS","preferred_network","metadata","aliasesFromNetwork","fromNetwork","updateEndpointMetadata","end_session_endpoint","issuer","endpointsFromNetwork","updateCanonicalAuthority","authority","canonical_authority","resetExpiresAt"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\cache\\entities\\AuthorityMetadataEntity.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { CloudDiscoveryMetadata } from \"../../authority/CloudDiscoveryMetadata\";\nimport { OpenIdConfigResponse } from \"../../authority/OpenIdConfigResponse\";\nimport { AUTHORITY_METADATA_CONSTANTS } from \"../../utils/Constants\";\nimport { TimeUtils } from \"../../utils/TimeUtils\";\n\n/** @internal */\nexport class AuthorityMetadataEntity {\n    aliases: Array<string>;\n    preferred_cache: string;\n    preferred_network: string;\n    canonical_authority: string;\n    authorization_endpoint: string;\n    token_endpoint: string;\n    end_session_endpoint?: string;\n    issuer: string;\n    aliasesFromNetwork: boolean;\n    endpointsFromNetwork: boolean;\n    expiresAt: number;\n    jwks_uri: string;\n\n    constructor() {\n        this.expiresAt =\n            TimeUtils.nowSeconds() +\n            AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n    }\n\n    /**\n     * Update the entity with new aliases, preferred_cache and preferred_network values\n     * @param metadata\n     * @param fromNetwork\n     */\n    updateCloudDiscoveryMetadata(\n        metadata: CloudDiscoveryMetadata,\n        fromNetwork: boolean\n    ): void {\n        this.aliases = metadata.aliases;\n        this.preferred_cache = metadata.preferred_cache;\n        this.preferred_network = metadata.preferred_network;\n        this.aliasesFromNetwork = fromNetwork;\n    }\n\n    /**\n     * Update the entity with new endpoints\n     * @param metadata\n     * @param fromNetwork\n     */\n    updateEndpointMetadata(\n        metadata: OpenIdConfigResponse,\n        fromNetwork: boolean\n    ): void {\n        this.authorization_endpoint = metadata.authorization_endpoint;\n        this.token_endpoint = metadata.token_endpoint;\n        this.end_session_endpoint = metadata.end_session_endpoint;\n        this.issuer = metadata.issuer;\n        this.endpointsFromNetwork = fromNetwork;\n        this.jwks_uri = metadata.jwks_uri;\n    }\n\n    /**\n     * Save the authority that was used to create this cache entry\n     * @param authority\n     */\n    updateCanonicalAuthority(authority: string): void {\n        this.canonical_authority = authority;\n    }\n\n    /**\n     * Reset the exiresAt value\n     */\n    resetExpiresAt(): void {\n        this.expiresAt =\n            TimeUtils.nowSeconds() +\n            AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n    }\n\n    /**\n     * Returns whether or not the data needs to be refreshed\n     */\n    isExpired(): boolean {\n        return this.expiresAt <= TimeUtils.nowSeconds();\n    }\n\n    /**\n     * Validates an entity: checks for all expected params\n     * @param entity\n     */\n    static isAuthorityMetadataEntity(key: string, entity: object): boolean {\n        if (!entity) {\n            return false;\n        }\n\n        return (\n            key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&\n            entity.hasOwnProperty(\"aliases\") &&\n            entity.hasOwnProperty(\"preferred_cache\") &&\n            entity.hasOwnProperty(\"preferred_network\") &&\n            entity.hasOwnProperty(\"canonical_authority\") &&\n            entity.hasOwnProperty(\"authorization_endpoint\") &&\n            entity.hasOwnProperty(\"token_endpoint\") &&\n            entity.hasOwnProperty(\"issuer\") &&\n            entity.hasOwnProperty(\"aliasesFromNetwork\") &&\n            entity.hasOwnProperty(\"endpointsFromNetwork\") &&\n            entity.hasOwnProperty(\"expiresAt\") &&\n            entity.hasOwnProperty(\"jwks_uri\")\n        );\n    }\n}\n"],"mappings":";;;;;;AAKA;AACA;AAIA;AACA;;AAIuB,MAAAA,uBAAS;EAC5BC,WAAsBA,CAAA;IACR,KAAAC,SAAA,GACMC,SAAA,CAAAC,UAAG,EAAO,G,4BACf,CAAAC,oBAAA;;;;;;AAYf;;;;IAIG,KAAAC,iBAAA,GAAAC,QAAA,CAAAD,iBAAA;IACyB,KAAAE,kBAAA,GAAAC,WACd;EASd;;;;AAIG;;EAaHC,uBAAAH,QAAA,EAAAE,WAAA;;;IAGG,KAAAE,oBAAA,GAAAJ,QAAA,CAAAI,oBAAA;IACH,KAAAC,MAAA,GAAAL,QAAyB,CAAAK,MAAA;IAIzB,KAAAC,oBAAA,GAAAJ,WAAA;;EAEG;EACH;AAMA;;AAEG;EACHK,wBAAoBA,CAAAC,SAAA;IAIpB,KAAAC,mBAAA,GAAAD,SAAA;;;AAGG;;EAqBNE,eAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}