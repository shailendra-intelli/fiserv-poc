{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { ThrottlingUtils } from './ThrottlingUtils.mjs';\nimport { AuthError } from '../error/AuthError.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass NetworkManager {\n  constructor(networkClient, cacheManager) {\n    this.networkClient = networkClient;\n    this.cacheManager = cacheManager;\n  }\n  /**\n   * Wraps sendPostRequestAsync with necessary preflight and postflight logic\n   * @param thumbprint\n   * @param tokenEndpoint\n   * @param options\n   */\n  async sendPostRequest(thumbprint, tokenEndpoint, options) {\n    ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n    let response;\n    try {\n      response = await this.networkClient.sendPostRequestAsync(tokenEndpoint, options);\n    } catch (e) {\n      if (e instanceof AuthError) {\n        throw e;\n      } else {\n        throw ClientAuthError.createNetworkError(tokenEndpoint, e);\n      }\n    }\n    ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n    return response;\n  }\n}\nexport { NetworkManager };","map":{"version":3,"names":["NetworkManager","constructor","networkClient","cacheManager","sendPostRequest","thumbprint","tokenEndpoint","options","ThrottlingUtils","preProcess","response","sendPostRequestAsync","e","ClientAuthError","createNetworkError"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\network\\NetworkManager.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule, NetworkRequestOptions } from \"./INetworkModule\";\nimport { RequestThumbprint } from \"./RequestThumbprint\";\nimport { ThrottlingUtils } from \"./ThrottlingUtils\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { AuthError } from \"../error/AuthError\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\n\nexport type NetworkResponse<T> = {\n    headers: Record<string, string>;\n    body: T;\n    status: number;\n};\n\nexport type UrlToHttpRequestOptions = {\n    protocol: string;\n    hostname: string;\n    hash: string;\n    search: string;\n    pathname: string;\n    path: string;\n    href: string;\n    port?: number;\n    auth?: string;\n};\n\n/** @internal */\nexport class NetworkManager {\n    private networkClient: INetworkModule;\n    private cacheManager: CacheManager;\n\n    constructor(networkClient: INetworkModule, cacheManager: CacheManager) {\n        this.networkClient = networkClient;\n        this.cacheManager = cacheManager;\n    }\n\n    /**\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\n     * @param thumbprint\n     * @param tokenEndpoint\n     * @param options\n     */\n    async sendPostRequest<T extends ServerAuthorizationTokenResponse>(\n        thumbprint: RequestThumbprint,\n        tokenEndpoint: string,\n        options: NetworkRequestOptions\n    ): Promise<NetworkResponse<T>> {\n        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n\n        let response;\n        try {\n            response = await this.networkClient.sendPostRequestAsync<T>(\n                tokenEndpoint,\n                options\n            );\n        } catch (e) {\n            if (e instanceof AuthError) {\n                throw e;\n            } else {\n                throw ClientAuthError.createNetworkError(\n                    tokenEndpoint,\n                    e as string\n                );\n            }\n        }\n\n        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n\n        return response;\n    }\n}\n"],"mappings":";;;;;;;AAKA;AACA;AAEA;AAGA;;AAME,MAAAA,cAAA;EAEIC,YAAAC,aAAA,EAAAC,YAAgC;IAC1B,KAAAD,aAAS,GAAAA,aAAA;IACT,KAAAC,YAAS,GAAAA,YAAA;;;;;;;;EAQnB,MAAAC,gBAAAC,UAAA,EAAAC,aAAA,EAAAC,OAAA;IAEcC,eAAA,CAAAC,UAAA,MAAAN,YAAA,EAAAE,UAAA;IAChB,IAAAK,QAAA;IACW,IAAC;MACAA,QAAA,SAA2B,KAAAR,aAAA,CAAAS,oBAAA,CAAAL,aAAA,EAAAC,OAAA;IAEvB,EAKZ,OAAAK,CAAA;;;;QAKG,MAAAC,eAAA,CAAAC,kBAAA,CAAAR,aAAA,EAAAM,CAAA;;IA6BN"},"metadata":{},"sourceType":"module","externalDependencies":[]}