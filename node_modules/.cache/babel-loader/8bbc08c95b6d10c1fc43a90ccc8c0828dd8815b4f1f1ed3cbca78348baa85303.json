{"ast":null,"code":"/*! @azure/msal-browser v3.9.0 2024-02-07 */\n'use strict';\n\nimport { invokeAsync, PerformanceEvents, AuthError, Constants, UrlString, UrlUtils, ProtocolUtils, ThrottlingUtils, ProtocolMode, ServerResponseType } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { InteractionType, ApiId, TemporaryCacheKeys } from '../utils/BrowserConstants.mjs';\nimport { RedirectHandler } from '../interaction_handler/RedirectHandler.mjs';\nimport { replaceHash, isInIframe, getHomepage, clearHash, getCurrentUri } from '../utils/BrowserUtils.mjs';\nimport { EventType } from '../event/EventType.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { NativeInteractionClient } from './NativeInteractionClient.mjs';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.mjs';\nimport { validateInteractionType } from '../response/ResponseHandler.mjs';\nimport { noStateInHash, nativeConnectionNotEstablished, noCachedAuthorityError } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass RedirectClient extends StandardInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n    this.nativeStorage = nativeStorageImpl;\n  }\n  /**\n   * Redirects the page to the /authorize endpoint of the IDP\n   * @param request\n   */\n  async acquireToken(request) {\n    const validRequest = await invokeAsync(this.initializeAuthorizationRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, this.correlationId)(request, InteractionType.Redirect);\n    this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || \"\", validRequest.account || null);\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\n    const handleBackButton = event => {\n      // Clear temporary cache if the back button is clicked during the redirect flow.\n      if (event.persisted) {\n        this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\n        this.browserStorage.cleanRequestByState(validRequest.state);\n        this.eventHandler.emitEvent(EventType.RESTORE_FROM_BFCACHE, InteractionType.Redirect);\n      }\n    };\n    try {\n      // Create auth code request and generate PKCE params\n      const authCodeRequest = await invokeAsync(this.initializeAuthorizationCodeRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.logger, this.performanceClient, this.correlationId)(validRequest);\n      // Initialize the client\n      const authClient = await invokeAsync(this.createAuthCodeClient.bind(this), PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions, validRequest.account);\n      // Create redirect interaction handler.\n      const interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n      // Create acquire token url.\n      const navigateUrl = await authClient.getAuthCodeUrl({\n        ...validRequest,\n        nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)\n      });\n      const redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n      this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);\n      // Clear temporary cache if the back button is clicked during the redirect flow.\n      window.addEventListener(\"pageshow\", handleBackButton);\n      // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n      return await interactionHandler.initiateAuthRequest(navigateUrl, {\n        navigationClient: this.navigationClient,\n        redirectTimeout: this.config.system.redirectNavigationTimeout,\n        redirectStartPage: redirectStartPage,\n        onRedirectNavigate: request.onRedirectNavigate\n      });\n    } catch (e) {\n      if (e instanceof AuthError) {\n        e.setCorrelationId(this.correlationId);\n        serverTelemetryManager.cacheFailedRequest(e);\n      }\n      window.removeEventListener(\"pageshow\", handleBackButton);\n      this.browserStorage.cleanRequestByState(validRequest.state);\n      throw e;\n    }\n  }\n  /**\n   * Checks if navigateToLoginRequestUrl is set, and:\n   * - if true, performs logic to cache and navigate\n   * - if false, handles hash string and parses response\n   * @param hash {string?} url hash\n   * @param performanceClient {IPerformanceClient?}\n   * @param correlationId {string?} correlation identifier\n   */\n  async handleRedirectPromise(hash, performanceClient, correlationId) {\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\n    try {\n      if (!this.browserStorage.isInteractionInProgress(true)) {\n        this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n        return null;\n      }\n      const [serverParams, responseString] = this.getRedirectResponse(hash || \"\");\n      if (!serverParams) {\n        // Not a recognized server response hash or hash not associated with a redirect request\n        this.logger.info(\"handleRedirectPromise did not detect a response as a result of a redirect. Cleaning temporary cache.\");\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n        if (performanceClient && correlationId) {\n          performanceClient?.addFields({\n            errorCode: \"no_server_response\"\n          }, correlationId);\n        }\n        return null;\n      }\n      // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated\n      const loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;\n      const loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\n      const currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\n      if (loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl) {\n        // We are on the page we need to navigate to - handle hash\n        this.logger.verbose(\"Current page is loginRequestUrl, handling response\");\n        if (loginRequestUrl.indexOf(\"#\") > -1) {\n          // Replace current hash with non-msal hash, if present\n          replaceHash(loginRequestUrl);\n        }\n        const handleHashResult = await this.handleResponse(serverParams, serverTelemetryManager);\n        return handleHashResult;\n      } else if (!this.config.auth.navigateToLoginRequestUrl) {\n        this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling response\");\n        return await this.handleResponse(serverParams, serverTelemetryManager);\n      } else if (!isInIframe() || this.config.system.allowRedirectInIframe) {\n        /*\n         * Returned from authority using redirect - need to perform navigation before processing response\n         * Cache the hash to be retrieved after the next redirect\n         */\n        this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseString, true);\n        const navigationOptions = {\n          apiId: ApiId.handleRedirectPromise,\n          timeout: this.config.system.redirectNavigationTimeout,\n          noHistory: true\n        };\n        /**\n         * Default behavior is to redirect to the start page and not process the hash now.\n         * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.\n         */\n        let processHashOnRedirect = true;\n        if (!loginRequestUrl || loginRequestUrl === \"null\") {\n          // Redirect to home page if login request url is null (real null or the string null)\n          const homepage = getHomepage();\n          // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n          this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n          this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n          processHashOnRedirect = await this.navigationClient.navigateInternal(homepage, navigationOptions);\n        } else {\n          // Navigate to page that initiated the redirect request\n          this.logger.verbose(`Navigating to loginRequestUrl: ${loginRequestUrl}`);\n          processHashOnRedirect = await this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions);\n        }\n        // If navigateInternal implementation returns false, handle the hash now\n        if (!processHashOnRedirect) {\n          return await this.handleResponse(serverParams, serverTelemetryManager);\n        }\n      }\n      return null;\n    } catch (e) {\n      if (e instanceof AuthError) {\n        e.setCorrelationId(this.correlationId);\n        serverTelemetryManager.cacheFailedRequest(e);\n      }\n      this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n      throw e;\n    }\n  }\n  /**\n   * Gets the response hash for a redirect request\n   * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\n   * @param hash\n   */\n  getRedirectResponse(userProvidedResponse) {\n    this.logger.verbose(\"getRedirectResponseHash called\");\n    // Get current location hash from window or cache.\n    let responseString = userProvidedResponse;\n    if (!responseString) {\n      if (this.config.auth.OIDCOptions.serverResponseType === ServerResponseType.QUERY) {\n        responseString = window.location.search;\n      } else {\n        responseString = window.location.hash;\n      }\n    }\n    let response = UrlUtils.getDeserializedResponse(responseString);\n    if (response) {\n      try {\n        validateInteractionType(response, this.browserCrypto, InteractionType.Redirect);\n      } catch (e) {\n        if (e instanceof AuthError) {\n          this.logger.error(`Interaction type validation failed due to ${e.errorCode}: ${e.errorMessage}`);\n        }\n        return [null, \"\"];\n      }\n      clearHash(window);\n      this.logger.verbose(\"Hash contains known properties, returning response hash\");\n      return [response, responseString];\n    }\n    const cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\n    this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    if (cachedHash) {\n      response = UrlUtils.getDeserializedResponse(cachedHash);\n      if (response) {\n        this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n        return [response, cachedHash];\n      }\n    }\n    return [null, \"\"];\n  }\n  /**\n   * Checks if hash exists and handles in window.\n   * @param hash\n   * @param state\n   */\n  async handleResponse(serverParams, serverTelemetryManager) {\n    const state = serverParams.state;\n    if (!state) {\n      throw createBrowserAuthError(noStateInHash);\n    }\n    const cachedRequest = this.browserStorage.getCachedRequest(state);\n    this.logger.verbose(\"handleResponse called, retrieved cached request\");\n    if (serverParams.accountId) {\n      this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n      if (!this.nativeMessageHandler) {\n        throw createBrowserAuthError(nativeConnectionNotEstablished);\n      }\n      const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, cachedRequest.correlationId);\n      const {\n        userRequestState\n      } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\n      return nativeInteractionClient.acquireToken({\n        ...cachedRequest,\n        state: userRequestState,\n        prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n      }).finally(() => {\n        this.browserStorage.cleanRequestByState(state);\n      });\n    }\n    // Hash contains known properties - handle and return in callback\n    const currentAuthority = this.browserStorage.getCachedAuthority(state);\n    if (!currentAuthority) {\n      throw createBrowserAuthError(noCachedAuthorityError);\n    }\n    const authClient = await invokeAsync(this.createAuthCodeClient.bind(this), PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, currentAuthority);\n    ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\n    const interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.performanceClient);\n    return interactionHandler.handleCodeResponse(serverParams, state);\n  }\n  /**\n   * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n   * Default behaviour is to redirect the user to `window.location.href`.\n   * @param logoutRequest\n   */\n  async logout(logoutRequest) {\n    this.logger.verbose(\"logoutRedirect called\");\n    const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\n    try {\n      this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest);\n      // Clear cache on logout\n      await this.clearCacheOnLogout(validLogoutRequest.account);\n      const navigationOptions = {\n        apiId: ApiId.logout,\n        timeout: this.config.system.redirectNavigationTimeout,\n        noHistory: false\n      };\n      const authClient = await invokeAsync(this.createAuthCodeClient.bind(this), PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, logoutRequest && logoutRequest.authority, undefined,\n      // AzureCloudOptions\n      logoutRequest && logoutRequest.account || undefined);\n      if (authClient.authority.protocolMode === ProtocolMode.OIDC) {\n        try {\n          authClient.authority.endSessionEndpoint;\n        } catch {\n          if (validLogoutRequest.account?.homeAccountId) {\n            void this.browserStorage.removeAccount(validLogoutRequest.account?.homeAccountId);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n            return;\n          }\n        }\n      }\n      // Create logout string and navigate user window to logout.\n      const logoutUri = authClient.getLogoutUri(validLogoutRequest);\n      this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n      // Check if onRedirectNavigate is implemented, and invoke it if so\n      if (logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\") {\n        const navigate = logoutRequest.onRedirectNavigate(logoutUri);\n        if (navigate !== false) {\n          this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\n          // Ensure interaction is in progress\n          if (!this.browserStorage.getInteractionInProgress()) {\n            this.browserStorage.setInteractionInProgress(true);\n          }\n          await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n          return;\n        } else {\n          // Ensure interaction is not in progress\n          this.browserStorage.setInteractionInProgress(false);\n          this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n        }\n      } else {\n        // Ensure interaction is in progress\n        if (!this.browserStorage.getInteractionInProgress()) {\n          this.browserStorage.setInteractionInProgress(true);\n        }\n        await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n        return;\n      }\n    } catch (e) {\n      if (e instanceof AuthError) {\n        e.setCorrelationId(this.correlationId);\n        serverTelemetryManager.cacheFailedRequest(e);\n      }\n      this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e);\n      this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n      throw e;\n    }\n    this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n  }\n  /**\n   * Use to get the redirectStartPage either from request or use current window\n   * @param requestStartPage\n   */\n  getRedirectStartPage(requestStartPage) {\n    const redirectStartPage = requestStartPage || window.location.href;\n    return UrlString.getAbsoluteUrl(redirectStartPage, getCurrentUri());\n  }\n}\nexport { RedirectClient };","map":{"version":3,"names":["RedirectClient","StandardInteractionClient","constructor","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","nativeStorage","acquireToken","request","validRequest","invokeAsync","initializeAuthorizationRequest","bind","PerformanceEvents","StandardInteractionClientInitializeAuthorizationRequest","InteractionType","Redirect","browserStorage","updateCacheEntries","state","nonce","authority","loginHint","account","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenRedirect","handleBackButton","event","persisted","verbose","cleanRequestByState","emitEvent","EventType","RESTORE_FROM_BFCACHE","authCodeRequest","initializeAuthorizationCodeRequest","StandardInteractionClientInitializeAuthorizationCodeRequest","authClient","createAuthCodeClient","StandardInteractionClientCreateAuthCodeClient","azureCloudOptions","interactionHandler","RedirectHandler","navigateUrl","getAuthCodeUrl","nativeBroker","NativeMessageHandler","isNativeAvailable","authenticationScheme","redirectStartPage","getRedirectStartPage","verbosePii","window","addEventListener","initiateAuthRequest","redirectTimeout","system","redirectNavigationTimeout","onRedirectNavigate","e","AuthError","setCorrelationId","cacheFailedRequest","removeEventListener","handleRedirectPromise","hash","isInteractionInProgress","info","serverParams","responseString","getRedirectResponse","cleanRequestByInteractionType","addFields","errorCode","loginRequestUrl","getTemporaryCache","TemporaryCacheKeys","ORIGIN_URI","Constants","EMPTY_STRING","loginRequestUrlNormalized","UrlString","removeHashFromUrl","currentUrlNormalized","location","href","auth","navigateToLoginRequestUrl","indexOf","replaceHash","handleHashResult","handleResponse","isInIframe","allowRedirectInIframe","setTemporaryCache","URL_HASH","navigationOptions","apiId","timeout","noHistory","processHashOnRedirect","homepage","getHomepage","warning","navigateInternal","userProvidedResponse","OIDCOptions","serverResponseType","ServerResponseType","QUERY","search","response","UrlUtils","getDeserializedResponse","validateInteractionType","error","errorMessage","clearHash","cachedHash","removeItem","generateCacheKey","createBrowserAuthError","noStateInHash","cachedRequest","getCachedRequest","accountId","nativeConnectionNotEstablished","nativeInteractionClient","NativeInteractionClient","acquireTokenPopup","userRequestState","ProtocolUtils","parseRequestState","prompt","undefined","finally","currentAuthority","getCachedAuthority","noCachedAuthorityError","ThrottlingUtils","removeThrottle","clientId","handleCodeResponse","logout","logoutRequest","validLogoutRequest","initializeLogoutRequest","LOGOUT_START","clearCacheOnLogout","protocolMode","ProtocolMode","OIDC","endSessionEndpoint","homeAccountId","removeAccount","LOGOUT_SUCCESS","logoutUri","getLogoutUri","navigate","getInteractionInProgress","setInteractionInProgress","navigateExternal","LOGOUT_FAILURE","LOGOUT_END","requestStartPage","getAbsoluteUrl","getCurrentUri"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\RedirectClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    CommonAuthorizationCodeRequest,\n    AuthorizationCodeClient,\n    UrlString,\n    AuthError,\n    ServerTelemetryManager,\n    Constants,\n    ProtocolUtils,\n    ServerAuthorizationCodeResponse,\n    ThrottlingUtils,\n    ICrypto,\n    Logger,\n    IPerformanceClient,\n    PerformanceEvents,\n    ProtocolMode,\n    invokeAsync,\n    ServerResponseType,\n    UrlUtils,\n} from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport {\n    ApiId,\n    InteractionType,\n    TemporaryCacheKeys,\n} from \"../utils/BrowserConstants\";\nimport { RedirectHandler } from \"../interaction_handler/RedirectHandler\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { EventType } from \"../event/EventType\";\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { EventError } from \"../event/EventMessage\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport * as ResponseHandler from \"../response/ResponseHandler\";\n\nexport class RedirectClient extends StandardInteractionClient {\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        performanceClient: IPerformanceClient,\n        nativeStorageImpl: BrowserCacheManager,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            storageImpl,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            nativeMessageHandler,\n            correlationId\n        );\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Redirects the page to the /authorize endpoint of the IDP\n     * @param request\n     */\n    async acquireToken(request: RedirectRequest): Promise<void> {\n        const validRequest = await invokeAsync(\n            this.initializeAuthorizationRequest.bind(this),\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(request, InteractionType.Redirect);\n\n        this.browserStorage.updateCacheEntries(\n            validRequest.state,\n            validRequest.nonce,\n            validRequest.authority,\n            validRequest.loginHint || \"\",\n            validRequest.account || null\n        );\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenRedirect\n        );\n\n        const handleBackButton = (event: PageTransitionEvent) => {\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            if (event.persisted) {\n                this.logger.verbose(\n                    \"Page was restored from back/forward cache. Clearing temporary cache.\"\n                );\n                this.browserStorage.cleanRequestByState(validRequest.state);\n                this.eventHandler.emitEvent(\n                    EventType.RESTORE_FROM_BFCACHE,\n                    InteractionType.Redirect\n                );\n            }\n        };\n\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest: CommonAuthorizationCodeRequest =\n                await invokeAsync(\n                    this.initializeAuthorizationCodeRequest.bind(this),\n                    PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n                    this.logger,\n                    this.performanceClient,\n                    this.correlationId\n                )(validRequest);\n\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(\n                serverTelemetryManager,\n                validRequest.authority,\n                validRequest.azureCloudOptions,\n                validRequest.account\n            );\n\n            // Create redirect interaction handler.\n            const interactionHandler = new RedirectHandler(\n                authClient,\n                this.browserStorage,\n                authCodeRequest,\n                this.logger,\n                this.performanceClient\n            );\n\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl({\n                ...validRequest,\n                nativeBroker: NativeMessageHandler.isNativeAvailable(\n                    this.config,\n                    this.logger,\n                    this.nativeMessageHandler,\n                    request.authenticationScheme\n                ),\n            });\n\n            const redirectStartPage = this.getRedirectStartPage(\n                request.redirectStartPage\n            );\n            this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);\n\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            window.addEventListener(\"pageshow\", handleBackButton);\n\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return await interactionHandler.initiateAuthRequest(navigateUrl, {\n                navigationClient: this.navigationClient,\n                redirectTimeout: this.config.system.redirectNavigationTimeout,\n                redirectStartPage: redirectStartPage,\n                onRedirectNavigate: request.onRedirectNavigate,\n            });\n        } catch (e) {\n            if (e instanceof AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            window.removeEventListener(\"pageshow\", handleBackButton);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Checks if navigateToLoginRequestUrl is set, and:\n     * - if true, performs logic to cache and navigate\n     * - if false, handles hash string and parses response\n     * @param hash {string?} url hash\n     * @param performanceClient {IPerformanceClient?}\n     * @param correlationId {string?} correlation identifier\n     */\n    async handleRedirectPromise(\n        hash?: string,\n        performanceClient?: IPerformanceClient,\n        correlationId?: string\n    ): Promise<AuthenticationResult | null> {\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.handleRedirectPromise\n        );\n        try {\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n                this.logger.info(\n                    \"handleRedirectPromise called but there is no interaction in progress, returning null.\"\n                );\n                return null;\n            }\n            const [serverParams, responseString] = this.getRedirectResponse(\n                hash || \"\"\n            );\n            if (!serverParams) {\n                // Not a recognized server response hash or hash not associated with a redirect request\n                this.logger.info(\n                    \"handleRedirectPromise did not detect a response as a result of a redirect. Cleaning temporary cache.\"\n                );\n                this.browserStorage.cleanRequestByInteractionType(\n                    InteractionType.Redirect\n                );\n                if (performanceClient && correlationId) {\n                    performanceClient?.addFields(\n                        { errorCode: \"no_server_response\" },\n                        correlationId\n                    );\n                }\n                return null;\n            }\n\n            // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated\n            const loginRequestUrl =\n                this.browserStorage.getTemporaryCache(\n                    TemporaryCacheKeys.ORIGIN_URI,\n                    true\n                ) || Constants.EMPTY_STRING;\n            const loginRequestUrlNormalized =\n                UrlString.removeHashFromUrl(loginRequestUrl);\n            const currentUrlNormalized = UrlString.removeHashFromUrl(\n                window.location.href\n            );\n\n            if (\n                loginRequestUrlNormalized === currentUrlNormalized &&\n                this.config.auth.navigateToLoginRequestUrl\n            ) {\n                // We are on the page we need to navigate to - handle hash\n                this.logger.verbose(\n                    \"Current page is loginRequestUrl, handling response\"\n                );\n\n                if (loginRequestUrl.indexOf(\"#\") > -1) {\n                    // Replace current hash with non-msal hash, if present\n                    BrowserUtils.replaceHash(loginRequestUrl);\n                }\n\n                const handleHashResult = await this.handleResponse(\n                    serverParams,\n                    serverTelemetryManager\n                );\n\n                return handleHashResult;\n            } else if (!this.config.auth.navigateToLoginRequestUrl) {\n                this.logger.verbose(\n                    \"NavigateToLoginRequestUrl set to false, handling response\"\n                );\n                return await this.handleResponse(\n                    serverParams,\n                    serverTelemetryManager\n                );\n            } else if (\n                !BrowserUtils.isInIframe() ||\n                this.config.system.allowRedirectInIframe\n            ) {\n                /*\n                 * Returned from authority using redirect - need to perform navigation before processing response\n                 * Cache the hash to be retrieved after the next redirect\n                 */\n                this.browserStorage.setTemporaryCache(\n                    TemporaryCacheKeys.URL_HASH,\n                    responseString,\n                    true\n                );\n                const navigationOptions: NavigationOptions = {\n                    apiId: ApiId.handleRedirectPromise,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: true,\n                };\n\n                /**\n                 * Default behavior is to redirect to the start page and not process the hash now.\n                 * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.\n                 */\n                let processHashOnRedirect: boolean = true;\n                if (!loginRequestUrl || loginRequestUrl === \"null\") {\n                    // Redirect to home page if login request url is null (real null or the string null)\n                    const homepage = BrowserUtils.getHomepage();\n                    // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n                    this.browserStorage.setTemporaryCache(\n                        TemporaryCacheKeys.ORIGIN_URI,\n                        homepage,\n                        true\n                    );\n                    this.logger.warning(\n                        \"Unable to get valid login request url from cache, redirecting to home page\"\n                    );\n                    processHashOnRedirect =\n                        await this.navigationClient.navigateInternal(\n                            homepage,\n                            navigationOptions\n                        );\n                } else {\n                    // Navigate to page that initiated the redirect request\n                    this.logger.verbose(\n                        `Navigating to loginRequestUrl: ${loginRequestUrl}`\n                    );\n                    processHashOnRedirect =\n                        await this.navigationClient.navigateInternal(\n                            loginRequestUrl,\n                            navigationOptions\n                        );\n                }\n\n                // If navigateInternal implementation returns false, handle the hash now\n                if (!processHashOnRedirect) {\n                    return await this.handleResponse(\n                        serverParams,\n                        serverTelemetryManager\n                    );\n                }\n            }\n\n            return null;\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.browserStorage.cleanRequestByInteractionType(\n                InteractionType.Redirect\n            );\n            throw e;\n        }\n    }\n\n    /**\n     * Gets the response hash for a redirect request\n     * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\n     * @param hash\n     */\n    protected getRedirectResponse(\n        userProvidedResponse: string\n    ): [ServerAuthorizationCodeResponse | null, string] {\n        this.logger.verbose(\"getRedirectResponseHash called\");\n        // Get current location hash from window or cache.\n        let responseString = userProvidedResponse;\n        if (!responseString) {\n            if (\n                this.config.auth.OIDCOptions.serverResponseType ===\n                ServerResponseType.QUERY\n            ) {\n                responseString = window.location.search;\n            } else {\n                responseString = window.location.hash;\n            }\n        }\n        let response = UrlUtils.getDeserializedResponse(responseString);\n\n        if (response) {\n            try {\n                ResponseHandler.validateInteractionType(\n                    response,\n                    this.browserCrypto,\n                    InteractionType.Redirect\n                );\n            } catch (e) {\n                if (e instanceof AuthError) {\n                    this.logger.error(\n                        `Interaction type validation failed due to ${e.errorCode}: ${e.errorMessage}`\n                    );\n                }\n                return [null, \"\"];\n            }\n\n            BrowserUtils.clearHash(window);\n            this.logger.verbose(\n                \"Hash contains known properties, returning response hash\"\n            );\n            return [response, responseString];\n        }\n\n        const cachedHash = this.browserStorage.getTemporaryCache(\n            TemporaryCacheKeys.URL_HASH,\n            true\n        );\n        this.browserStorage.removeItem(\n            this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH)\n        );\n\n        if (cachedHash) {\n            response = UrlUtils.getDeserializedResponse(cachedHash);\n            if (response) {\n                this.logger.verbose(\n                    \"Hash does not contain known properties, returning cached hash\"\n                );\n                return [response, cachedHash];\n            }\n        }\n\n        return [null, \"\"];\n    }\n\n    /**\n     * Checks if hash exists and handles in window.\n     * @param hash\n     * @param state\n     */\n    protected async handleResponse(\n        serverParams: ServerAuthorizationCodeResponse,\n        serverTelemetryManager: ServerTelemetryManager\n    ): Promise<AuthenticationResult> {\n        const state = serverParams.state;\n        if (!state) {\n            throw createBrowserAuthError(BrowserAuthErrorCodes.noStateInHash);\n        }\n\n        const cachedRequest = this.browserStorage.getCachedRequest(state);\n        this.logger.verbose(\"handleResponse called, retrieved cached request\");\n\n        if (serverParams.accountId) {\n            this.logger.verbose(\n                \"Account id found in hash, calling WAM for token\"\n            );\n            if (!this.nativeMessageHandler) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.nativeConnectionNotEstablished\n                );\n            }\n            const nativeInteractionClient = new NativeInteractionClient(\n                this.config,\n                this.browserStorage,\n                this.browserCrypto,\n                this.logger,\n                this.eventHandler,\n                this.navigationClient,\n                ApiId.acquireTokenPopup,\n                this.performanceClient,\n                this.nativeMessageHandler,\n                serverParams.accountId,\n                this.nativeStorage,\n                cachedRequest.correlationId\n            );\n            const { userRequestState } = ProtocolUtils.parseRequestState(\n                this.browserCrypto,\n                state\n            );\n            return nativeInteractionClient\n                .acquireToken({\n                    ...cachedRequest,\n                    state: userRequestState,\n                    prompt: undefined, // Server should handle the prompt, ideally native broker can do this part silently\n                })\n                .finally(() => {\n                    this.browserStorage.cleanRequestByState(state);\n                });\n        }\n\n        // Hash contains known properties - handle and return in callback\n        const currentAuthority = this.browserStorage.getCachedAuthority(state);\n        if (!currentAuthority) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.noCachedAuthorityError\n            );\n        }\n\n        const authClient = await invokeAsync(\n            this.createAuthCodeClient.bind(this),\n            PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(serverTelemetryManager, currentAuthority);\n\n        ThrottlingUtils.removeThrottle(\n            this.browserStorage,\n            this.config.auth.clientId,\n            cachedRequest\n        );\n        const interactionHandler = new RedirectHandler(\n            authClient,\n            this.browserStorage,\n            cachedRequest,\n            this.logger,\n            this.performanceClient\n        );\n        return interactionHandler.handleCodeResponse(serverParams, state);\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param logoutRequest\n     */\n    async logout(logoutRequest?: EndSessionRequest): Promise<void> {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.logout\n        );\n\n        try {\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_START,\n                InteractionType.Redirect,\n                logoutRequest\n            );\n\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validLogoutRequest.account);\n\n            const navigationOptions: NavigationOptions = {\n                apiId: ApiId.logout,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false,\n            };\n\n            const authClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(\n                serverTelemetryManager,\n                logoutRequest && logoutRequest.authority,\n                undefined, // AzureCloudOptions\n                (logoutRequest && logoutRequest.account) || undefined\n            );\n\n            if (authClient.authority.protocolMode === ProtocolMode.OIDC) {\n                try {\n                    authClient.authority.endSessionEndpoint;\n                } catch {\n                    if (validLogoutRequest.account?.homeAccountId) {\n                        void this.browserStorage.removeAccount(\n                            validLogoutRequest.account?.homeAccountId\n                        );\n\n                        this.eventHandler.emitEvent(\n                            EventType.LOGOUT_SUCCESS,\n                            InteractionType.Redirect,\n                            validLogoutRequest\n                        );\n\n                        return;\n                    }\n                }\n            }\n\n            // Create logout string and navigate user window to logout.\n            const logoutUri: string =\n                authClient.getLogoutUri(validLogoutRequest);\n\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_SUCCESS,\n                InteractionType.Redirect,\n                validLogoutRequest\n            );\n            // Check if onRedirectNavigate is implemented, and invoke it if so\n            if (\n                logoutRequest &&\n                typeof logoutRequest.onRedirectNavigate === \"function\"\n            ) {\n                const navigate = logoutRequest.onRedirectNavigate(logoutUri);\n\n                if (navigate !== false) {\n                    this.logger.verbose(\n                        \"Logout onRedirectNavigate did not return false, navigating\"\n                    );\n                    // Ensure interaction is in progress\n                    if (!this.browserStorage.getInteractionInProgress()) {\n                        this.browserStorage.setInteractionInProgress(true);\n                    }\n                    await this.navigationClient.navigateExternal(\n                        logoutUri,\n                        navigationOptions\n                    );\n                    return;\n                } else {\n                    // Ensure interaction is not in progress\n                    this.browserStorage.setInteractionInProgress(false);\n                    this.logger.verbose(\n                        \"Logout onRedirectNavigate returned false, stopping navigation\"\n                    );\n                }\n            } else {\n                // Ensure interaction is in progress\n                if (!this.browserStorage.getInteractionInProgress()) {\n                    this.browserStorage.setInteractionInProgress(true);\n                }\n                await this.navigationClient.navigateExternal(\n                    logoutUri,\n                    navigationOptions\n                );\n                return;\n            }\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_FAILURE,\n                InteractionType.Redirect,\n                null,\n                e as EventError\n            );\n            this.eventHandler.emitEvent(\n                EventType.LOGOUT_END,\n                InteractionType.Redirect\n            );\n            throw e;\n        }\n\n        this.eventHandler.emitEvent(\n            EventType.LOGOUT_END,\n            InteractionType.Redirect\n        );\n    }\n\n    /**\n     * Use to get the redirectStartPage either from request or use current window\n     * @param requestStartPage\n     */\n    protected getRedirectStartPage(requestStartPage?: string): string {\n        const redirectStartPage = requestStartPage || window.location.href;\n        return UrlString.getAbsoluteUrl(\n            redirectStartPage,\n            BrowserUtils.getCurrentUri()\n        );\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}