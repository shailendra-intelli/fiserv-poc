{"ast":null,"code":"/*! @azure/msal-react v2.0.3 2023-09-05 */\n'use strict';\n\nimport { useState, useEffect } from 'react';\nimport { useMsal } from './useMsal.js';\nimport { InteractionStatus } from '@azure/msal-browser';\nimport { getAccountByIdentifiers } from '../utils/utilities.js';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nfunction isAuthenticated(allAccounts, matchAccount) {\n  if (matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {\n    return !!getAccountByIdentifiers(allAccounts, matchAccount);\n  }\n  return allAccounts.length > 0;\n}\n/**\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\n * @param matchAccount\n */\nfunction useIsAuthenticated(matchAccount) {\n  const {\n    accounts: allAccounts,\n    inProgress\n  } = useMsal();\n  const [hasAuthenticated, setHasAuthenticated] = useState(() => {\n    if (inProgress === InteractionStatus.Startup) {\n      return false;\n    }\n    return isAuthenticated(allAccounts, matchAccount);\n  });\n  useEffect(() => {\n    setHasAuthenticated(isAuthenticated(allAccounts, matchAccount));\n  }, [allAccounts, matchAccount]);\n  return hasAuthenticated;\n}\nexport { useIsAuthenticated };","map":{"version":3,"names":["isAuthenticated","allAccounts","matchAccount","username","homeAccountId","localAccountId","getAccountByIdentifiers","length","useIsAuthenticated","accounts","inProgress","useMsal","hasAuthenticated","setHasAuthenticated","useState","InteractionStatus","Startup","useEffect"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-react\\src\\hooks\\useIsAuthenticated.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { useState, useEffect } from \"react\";\nimport { useMsal } from \"./useMsal\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\nimport { getAccountByIdentifiers } from \"../utils/utilities\";\nfunction isAuthenticated(allAccounts, matchAccount) {\n    if (matchAccount &&\n        (matchAccount.username ||\n            matchAccount.homeAccountId ||\n            matchAccount.localAccountId)) {\n        return !!getAccountByIdentifiers(allAccounts, matchAccount);\n    }\n    return allAccounts.length > 0;\n}\n/**\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\n * @param matchAccount\n */\nexport function useIsAuthenticated(matchAccount) {\n    const { accounts: allAccounts, inProgress } = useMsal();\n    const [hasAuthenticated, setHasAuthenticated] = useState(() => {\n        if (inProgress === InteractionStatus.Startup) {\n            return false;\n        }\n        return isAuthenticated(allAccounts, matchAccount);\n    });\n    useEffect(() => {\n        setHasAuthenticated(isAuthenticated(allAccounts, matchAccount));\n    }, [allAccounts, matchAccount]);\n    return hasAuthenticated;\n}\n//# sourceMappingURL=useIsAuthenticated.js.map"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AAKA,SAASA,eAAeA,CAACC,WAAW,EAAEC,YAAY,EAAE;EAChD,IAAIA,YAAY,KACXA,YAAY,CAACC,QAAQ,IAClBD,YAAY,CAACE,aAAa,IAC1BF,YAAY,CAACG,cAAc,CAAC,EAAE;IAClC,OAAO,CAAC,CAACC,uBAAuB,CAACL,WAAW,EAAEC,YAAY,CAAC;EACnE;EACI,OAAOD,WAAW,CAACM,MAAM,GAAG,CAAC;AACjC;AACA;AACA;AACA;AACA;AACO,SAASC,kBAAkBA,CAACN,YAAY,EAAE;EAC7C,MAAM;IAAEO,QAAQ,EAAER,WAAW;IAAES;EAAU,CAAE,GAAGC,OAAO,EAAE;EACvD,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGC,QAAQ,CAAC,MAAM;IAC3D,IAAIJ,UAAU,KAAKK,iBAAiB,CAACC,OAAO,EAAE;MAC1C,OAAO,KAAK;IACxB;IACQ,OAAOhB,eAAe,CAACC,WAAW,EAAEC,YAAY,CAAC;EACzD,CAAK,CAAC;EACFe,SAAS,CAAC,MAAM;IACZJ,mBAAmB,CAACb,eAAe,CAACC,WAAW,EAAEC,YAAY,CAAC,CAAC;EACvE,CAAK,EAAE,CAACD,WAAW,EAAEC,YAAY,CAAC,CAAC;EAC/B,OAAOU,gBAAgB;AAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}