{"ast":null,"code":"/*! @azure/msal-browser v3.9.0 2024-02-07 */\n'use strict';\n\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { PerformanceEvents, invokeAsync, RefreshTokenClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { silentLogoutUnsupported } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SilentRefreshClient extends StandardInteractionClient {\n  /**\n   * Exchanges the refresh token for new tokens\n   * @param request\n   */\n  async acquireToken(request) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);\n    const baseRequest = await invokeAsync(this.initializeBaseRequest.bind(this), PerformanceEvents.InitializeBaseRequest, this.logger, this.performanceClient, request.correlationId)(request);\n    const silentRequest = {\n      ...request,\n      ...baseRequest\n    };\n    if (request.redirectUri) {\n      // Make sure any passed redirectUri is converted to an absolute URL - redirectUri is not a required parameter for refresh token redemption so only include if explicitly provided\n      silentRequest.redirectUri = this.getRedirectUri(request.redirectUri);\n    }\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n    const refreshTokenClient = await this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions, silentRequest.account);\n    // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n    return invokeAsync(refreshTokenClient.acquireTokenByRefreshToken.bind(refreshTokenClient), PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, this.logger, this.performanceClient, request.correlationId)(silentRequest).catch(e => {\n      e.setCorrelationId(this.correlationId);\n      serverTelemetryManager.cacheFailedRequest(e);\n      throw e;\n    });\n  }\n  /**\n   * Currently Unsupported\n   */\n  logout() {\n    // Synchronous so we must reject\n    return Promise.reject(createBrowserAuthError(silentLogoutUnsupported));\n  }\n  /**\n   * Creates a Refresh Client with the given authority, or the default authority.\n   * @param serverTelemetryManager\n   * @param authorityUrl\n   */\n  async createRefreshTokenClient(serverTelemetryManager, authorityUrl, azureCloudOptions, account) {\n    // Create auth module.\n    const clientConfig = await invokeAsync(this.getClientConfiguration.bind(this), PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, authorityUrl, azureCloudOptions, account);\n    return new RefreshTokenClient(clientConfig, this.performanceClient);\n  }\n}\nexport { SilentRefreshClient };","map":{"version":3,"names":["SilentRefreshClient","StandardInteractionClient","acquireToken","request","performanceClient","addQueueMeasurement","PerformanceEvents","SilentRefreshClientAcquireToken","correlationId","baseRequest","invokeAsync","initializeBaseRequest","bind","InitializeBaseRequest","logger","silentRequest","redirectUri","getRedirectUri","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","refreshTokenClient","createRefreshTokenClient","authority","azureCloudOptions","account","acquireTokenByRefreshToken","RefreshTokenClientAcquireTokenByRefreshToken","catch","e","setCorrelationId","cacheFailedRequest","logout","Promise","reject","createBrowserAuthError","silentLogoutUnsupported","authorityUrl","clientConfig","getClientConfiguration","StandardInteractionClientGetClientConfiguration","RefreshTokenClient"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentRefreshClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport {\n    CommonSilentFlowRequest,\n    ServerTelemetryManager,\n    RefreshTokenClient,\n    AuthError,\n    AzureCloudOptions,\n    PerformanceEvents,\n    invokeAsync,\n    AccountInfo,\n} from \"@azure/msal-common\";\nimport { ApiId } from \"../utils/BrowserConstants\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\n\nexport class SilentRefreshClient extends StandardInteractionClient {\n    /**\n     * Exchanges the refresh token for new tokens\n     * @param request\n     */\n    async acquireToken(\n        request: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentRefreshClientAcquireToken,\n            request.correlationId\n        );\n\n        const baseRequest = await invokeAsync(\n            this.initializeBaseRequest.bind(this),\n            PerformanceEvents.InitializeBaseRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request);\n        const silentRequest: CommonSilentFlowRequest = {\n            ...request,\n            ...baseRequest,\n        };\n\n        if (request.redirectUri) {\n            // Make sure any passed redirectUri is converted to an absolute URL - redirectUri is not a required parameter for refresh token redemption so only include if explicitly provided\n            silentRequest.redirectUri = this.getRedirectUri(\n                request.redirectUri\n            );\n        }\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenSilent_silentFlow\n        );\n\n        const refreshTokenClient = await this.createRefreshTokenClient(\n            serverTelemetryManager,\n            silentRequest.authority,\n            silentRequest.azureCloudOptions,\n            silentRequest.account\n        );\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n        return invokeAsync(\n            refreshTokenClient.acquireTokenByRefreshToken.bind(\n                refreshTokenClient\n            ),\n            PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(silentRequest).catch((e: AuthError) => {\n            (e as AuthError).setCorrelationId(this.correlationId);\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }) as Promise<AuthenticationResult>;\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(\n            createBrowserAuthError(\n                BrowserAuthErrorCodes.silentLogoutUnsupported\n            )\n        );\n    }\n\n    /**\n     * Creates a Refresh Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createRefreshTokenClient(\n        serverTelemetryManager: ServerTelemetryManager,\n        authorityUrl?: string,\n        azureCloudOptions?: AzureCloudOptions,\n        account?: AccountInfo\n    ): Promise<RefreshTokenClient> {\n        // Create auth module.\n        const clientConfig = await invokeAsync(\n            this.getClientConfiguration.bind(this),\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(serverTelemetryManager, authorityUrl, azureCloudOptions, account);\n        return new RefreshTokenClient(clientConfig, this.performanceClient);\n    }\n}\n"],"mappings":";;;;;;;;;AAAA;;;AAGG;AAoBG,MAAOA,mBAAoB,SAAQC,yBAAyB;EAC9D;;;AAGG;EACH,MAAMC,YAAYA,CACdC,OAAgC;IAEhC,IAAI,CAACC,iBAAiB,CAACC,mBAAmB,CACtCC,iBAAiB,CAACC,+BAA+B,EACjDJ,OAAO,CAACK,aAAa,CACxB;IAED,MAAMC,WAAW,GAAG,MAAMC,WAAW,CACjC,IAAI,CAACC,qBAAqB,CAACC,IAAI,CAAC,IAAI,CAAC,EACrCN,iBAAiB,CAACO,qBAAqB,EACvC,IAAI,CAACC,MAAM,EACX,IAAI,CAACV,iBAAiB,EACtBD,OAAO,CAACK,aAAa,CACxB,CAACL,OAAO,CAAC;IACV,MAAMY,aAAa,GAA4B;MAC3C,GAAGZ,OAAO;MACV,GAAGM;KACN;IAED,IAAIN,OAAO,CAACa,WAAW,EAAE;;MAErBD,aAAa,CAACC,WAAW,GAAG,IAAI,CAACC,cAAc,CAC3Cd,OAAO,CAACa,WAAW,CACtB;IACJ;IAED,MAAME,sBAAsB,GAAG,IAAI,CAACC,gCAAgC,CAChEC,KAAK,CAACC,6BAA6B,CACtC;IAED,MAAMC,kBAAkB,GAAG,MAAM,IAAI,CAACC,wBAAwB,CAC1DL,sBAAsB,EACtBH,aAAa,CAACS,SAAS,EACvBT,aAAa,CAACU,iBAAiB,EAC/BV,aAAa,CAACW,OAAO,CACxB;;IAED,OAAOhB,WAAW,CACdY,kBAAkB,CAACK,0BAA0B,CAACf,IAAI,CAC9CU,kBAAkB,CACrB,EACDhB,iBAAiB,CAACsB,4CAA4C,EAC9D,IAAI,CAACd,MAAM,EACX,IAAI,CAACV,iBAAiB,EACtBD,OAAO,CAACK,aAAa,CACxB,CAACO,aAAa,CAAC,CAACc,KAAK,CAAEC,CAAY,IAAI;MACnCA,CAAe,CAACC,gBAAgB,CAAC,IAAI,CAACvB,aAAa,CAAC;MACrDU,sBAAsB,CAACc,kBAAkB,CAACF,CAAC,CAAC;MAC5C,MAAMA,CAAC;IACX,CAAC,CAAkC;;EAGvC;;AAEG;EACHG,MAAMA,CAAA;;IAEF,OAAOC,OAAO,CAACC,MAAM,CACjBC,sBAAsB,CAClBC,uBAA6C,CAChD,CACJ;;EAGL;;;;AAIG;EACO,MAAMd,wBAAwBA,CACpCL,sBAA8C,EAC9CoB,YAAqB,EACrBb,iBAAqC,EACrCC,OAAqB;;IAGrB,MAAMa,YAAY,GAAG,MAAM7B,WAAW,CAClC,IAAI,CAAC8B,sBAAsB,CAAC5B,IAAI,CAAC,IAAI,CAAC,EACtCN,iBAAiB,CAACmC,+CAA+C,EACjE,IAAI,CAAC3B,MAAM,EACX,IAAI,CAACV,iBAAiB,EACtB,IAAI,CAACI,aAAa,CACrB,CAACU,sBAAsB,EAAEoB,YAAY,EAAEb,iBAAiB,EAAEC,OAAO,CAAC;IACnE,OAAO,IAAIgB,kBAAkB,CAACH,YAAY,EAAE,IAAI,CAACnC,iBAAiB,CAAC;;AAE1E"},"metadata":{},"sourceType":"module","externalDependencies":[]}