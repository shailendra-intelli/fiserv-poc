{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { NativeConstants, NativeExtensionMethod } from '../../utils/BrowserConstants.mjs';\nimport { PerformanceEvents, AuthError, AuthenticationScheme } from '@azure/msal-common';\nimport { NativeAuthError } from '../../error/NativeAuthError.mjs';\nimport { createBrowserAuthError } from '../../error/BrowserAuthError.mjs';\nimport { nativeHandshakeTimeout, nativeExtensionNotInstalled } from '../../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass NativeMessageHandler {\n  constructor(logger, handshakeTimeoutMs, performanceClient, crypto, extensionId) {\n    this.logger = logger;\n    this.handshakeTimeoutMs = handshakeTimeoutMs;\n    this.extensionId = extensionId;\n    this.resolvers = new Map(); // Used for non-handshake messages\n    this.handshakeResolvers = new Map(); // Used for handshake messages\n    this.messageChannel = new MessageChannel();\n    this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\n    this.performanceClient = performanceClient;\n    this.handshakeEvent = performanceClient.startMeasurement(PerformanceEvents.NativeMessageHandlerHandshake);\n    this.crypto = crypto;\n  }\n  /**\n   * Sends a given message to the extension and resolves with the extension response\n   * @param body\n   */\n  async sendMessage(body) {\n    this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\n    const req = {\n      channel: NativeConstants.CHANNEL_ID,\n      extensionId: this.extensionId,\n      responseId: this.crypto.createNewGuid(),\n      body: body\n    };\n    this.logger.trace(\"NativeMessageHandler - Sending request to browser extension\");\n    this.logger.tracePii(`NativeMessageHandler - Sending request to browser extension: ${JSON.stringify(req)}`);\n    this.messageChannel.port1.postMessage(req);\n    return new Promise((resolve, reject) => {\n      this.resolvers.set(req.responseId, {\n        resolve,\n        reject\n      });\n    });\n  }\n  /**\n   * Returns an instance of the MessageHandler that has successfully established a connection with an extension\n   * @param {Logger} logger\n   * @param {number} handshakeTimeoutMs\n   * @param {IPerformanceClient} performanceClient\n   * @param {ICrypto} crypto\n   */\n  static async createProvider(logger, handshakeTimeoutMs, performanceClient, crypto) {\n    logger.trace(\"NativeMessageHandler - createProvider called.\");\n    try {\n      const preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, crypto, NativeConstants.PREFERRED_EXTENSION_ID);\n      await preferredProvider.sendHandshakeRequest();\n      return preferredProvider;\n    } catch (e) {\n      // If preferred extension fails for whatever reason, fallback to using any installed extension\n      const backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, crypto);\n      await backupProvider.sendHandshakeRequest();\n      return backupProvider;\n    }\n  }\n  /**\n   * Send handshake request helper.\n   */\n  async sendHandshakeRequest() {\n    this.logger.trace(\"NativeMessageHandler - sendHandshakeRequest called.\");\n    // Register this event listener before sending handshake\n    window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\n    const req = {\n      channel: NativeConstants.CHANNEL_ID,\n      extensionId: this.extensionId,\n      responseId: this.crypto.createNewGuid(),\n      body: {\n        method: NativeExtensionMethod.HandshakeRequest\n      }\n    };\n    this.handshakeEvent.add({\n      extensionId: this.extensionId,\n      extensionHandshakeTimeoutMs: this.handshakeTimeoutMs\n    });\n    this.messageChannel.port1.onmessage = event => {\n      this.onChannelMessage(event);\n    };\n    window.postMessage(req, window.origin, [this.messageChannel.port2]);\n    return new Promise((resolve, reject) => {\n      this.handshakeResolvers.set(req.responseId, {\n        resolve,\n        reject\n      });\n      this.timeoutId = window.setTimeout(() => {\n        /*\n         * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\n         * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\n         */\n        window.removeEventListener(\"message\", this.windowListener, false);\n        this.messageChannel.port1.close();\n        this.messageChannel.port2.close();\n        this.handshakeEvent.end({\n          extensionHandshakeTimedOut: true,\n          success: false\n        });\n        reject(createBrowserAuthError(nativeHandshakeTimeout));\n        this.handshakeResolvers.delete(req.responseId);\n      }, this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\n    });\n  }\n  /**\n   * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\n   * @param event\n   */\n  onWindowMessage(event) {\n    this.logger.trace(\"NativeMessageHandler - onWindowMessage called\");\n    // We only accept messages from ourselves\n    if (event.source !== window) {\n      return;\n    }\n    const request = event.data;\n    if (!request.channel || request.channel !== NativeConstants.CHANNEL_ID) {\n      return;\n    }\n    if (request.extensionId && request.extensionId !== this.extensionId) {\n      return;\n    }\n    if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\n      const handshakeResolver = this.handshakeResolvers.get(request.responseId);\n      /*\n       * Filter out responses with no matched resolvers sooner to keep channel ports open while waiting for\n       * the proper response.\n       */\n      if (!handshakeResolver) {\n        this.logger.trace(`NativeMessageHandler.onWindowMessage - resolver can't be found for request ${request.responseId}`);\n        return;\n      }\n      // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\n      this.logger.verbose(request.extensionId ? `Extension with id: ${request.extensionId} not installed` : \"No extension installed\");\n      clearTimeout(this.timeoutId);\n      this.messageChannel.port1.close();\n      this.messageChannel.port2.close();\n      window.removeEventListener(\"message\", this.windowListener, false);\n      this.handshakeEvent.end({\n        success: false,\n        extensionInstalled: false\n      });\n      handshakeResolver.reject(createBrowserAuthError(nativeExtensionNotInstalled));\n    }\n  }\n  /**\n   * Invoked when a message is received from the extension on the MessageChannel port\n   * @param event\n   */\n  onChannelMessage(event) {\n    this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\n    const request = event.data;\n    const resolver = this.resolvers.get(request.responseId);\n    const handshakeResolver = this.handshakeResolvers.get(request.responseId);\n    try {\n      const method = request.body.method;\n      if (method === NativeExtensionMethod.Response) {\n        if (!resolver) {\n          return;\n        }\n        const response = request.body.response;\n        this.logger.trace(\"NativeMessageHandler - Received response from browser extension\");\n        this.logger.tracePii(`NativeMessageHandler - Received response from browser extension: ${JSON.stringify(response)}`);\n        if (response.status !== \"Success\") {\n          resolver.reject(NativeAuthError.createError(response.code, response.description, response.ext));\n        } else if (response.result) {\n          if (response.result[\"code\"] && response.result[\"description\"]) {\n            resolver.reject(NativeAuthError.createError(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\n          } else {\n            resolver.resolve(response.result);\n          }\n        } else {\n          throw AuthError.createUnexpectedError(\"Event does not contain result.\");\n        }\n        this.resolvers.delete(request.responseId);\n      } else if (method === NativeExtensionMethod.HandshakeResponse) {\n        if (!handshakeResolver) {\n          this.logger.trace(`NativeMessageHandler.onChannelMessage - resolver can't be found for request ${request.responseId}`);\n          return;\n        }\n        clearTimeout(this.timeoutId); // Clear setTimeout\n        window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\n        this.extensionId = request.extensionId;\n        this.extensionVersion = request.body.version;\n        this.logger.verbose(`NativeMessageHandler - Received HandshakeResponse from extension: ${this.extensionId}`);\n        this.handshakeEvent.end({\n          extensionInstalled: true,\n          success: true\n        });\n        handshakeResolver.resolve();\n        this.handshakeResolvers.delete(request.responseId);\n      }\n      // Do nothing if method is not Response or HandshakeResponse\n    } catch (err) {\n      this.logger.error(\"Error parsing response from WAM Extension\");\n      this.logger.errorPii(`Error parsing response from WAM Extension: ${err}`);\n      this.logger.errorPii(`Unable to parse ${event}`);\n      if (resolver) {\n        resolver.reject(err);\n      } else if (handshakeResolver) {\n        handshakeResolver.reject(err);\n      }\n    }\n  }\n  /**\n   * Returns the Id for the browser extension this handler is communicating with\n   * @returns\n   */\n  getExtensionId() {\n    return this.extensionId;\n  }\n  /**\n   * Returns the version for the browser extension this handler is communicating with\n   * @returns\n   */\n  getExtensionVersion() {\n    return this.extensionVersion;\n  }\n  /**\n   * Returns boolean indicating whether or not the request should attempt to use native broker\n   * @param logger\n   * @param config\n   * @param nativeExtensionProvider\n   * @param authenticationScheme\n   */\n  static isNativeAvailable(config, logger, nativeExtensionProvider, authenticationScheme) {\n    logger.trace(\"isNativeAvailable called\");\n    if (!config.system.allowNativeBroker) {\n      logger.trace(\"isNativeAvailable: allowNativeBroker is not enabled, returning false\");\n      // Developer disabled WAM\n      return false;\n    }\n    if (!nativeExtensionProvider) {\n      logger.trace(\"isNativeAvailable: WAM extension provider is not initialized, returning false\");\n      // Extension is not available\n      return false;\n    }\n    if (authenticationScheme) {\n      switch (authenticationScheme) {\n        case AuthenticationScheme.BEARER:\n        case AuthenticationScheme.POP:\n          logger.trace(\"isNativeAvailable: authenticationScheme is supported, returning true\");\n          return true;\n        default:\n          logger.trace(\"isNativeAvailable: authenticationScheme is not supported, returning false\");\n          return false;\n      }\n    }\n    return true;\n  }\n}\nexport { NativeMessageHandler };","map":{"version":3,"names":["NativeMessageHandler","constructor","logger","handshakeTimeoutMs","performanceClient","crypto","extensionId","resolvers","Map","handshakeResolvers","messageChannel","MessageChannel","windowListener","onWindowMessage","bind","channel","NativeConstants","CHANNEL_ID","responseId","createNewGuid","trace","tracePii","JSON","stringify","req","set","resolve","reject","createProvider","preferredProvider","e"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\broker\\nativeBroker\\NativeMessageHandler.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    NativeConstants,\n    NativeExtensionMethod,\n} from \"../../utils/BrowserConstants\";\nimport {\n    Logger,\n    AuthError,\n    AuthenticationScheme,\n    InProgressPerformanceEvent,\n    PerformanceEvents,\n    IPerformanceClient,\n    ICrypto,\n} from \"@azure/msal-common\";\nimport {\n    NativeExtensionRequest,\n    NativeExtensionRequestBody,\n} from \"./NativeRequest\";\nimport { NativeAuthError } from \"../../error/NativeAuthError\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../../error/BrowserAuthError\";\nimport { BrowserConfiguration } from \"../../config/Configuration\";\n\ntype ResponseResolvers<T> = {\n    resolve: (value: T | PromiseLike<T>) => void;\n    reject: (\n        value: AuthError | Error | PromiseLike<Error> | PromiseLike<AuthError>\n    ) => void;\n};\n\nexport class NativeMessageHandler {\n    private extensionId: string | undefined;\n    private extensionVersion: string | undefined;\n    private logger: Logger;\n    private crypto: ICrypto;\n    private readonly handshakeTimeoutMs: number;\n    private timeoutId: number | undefined;\n    private resolvers: Map<string, ResponseResolvers<object>>;\n    private handshakeResolvers: Map<string, ResponseResolvers<void>>;\n    private messageChannel: MessageChannel;\n    private readonly windowListener: (event: MessageEvent) => void;\n    private readonly performanceClient: IPerformanceClient;\n    private readonly handshakeEvent: InProgressPerformanceEvent;\n\n    constructor(\n        logger: Logger,\n        handshakeTimeoutMs: number,\n        performanceClient: IPerformanceClient,\n        crypto: ICrypto,\n        extensionId?: string\n    ) {\n        this.logger = logger;\n        this.handshakeTimeoutMs = handshakeTimeoutMs;\n        this.extensionId = extensionId;\n        this.resolvers = new Map(); // Used for non-handshake messages\n        this.handshakeResolvers = new Map(); // Used for handshake messages\n        this.messageChannel = new MessageChannel();\n        this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\n        this.performanceClient = performanceClient;\n        this.handshakeEvent = performanceClient.startMeasurement(\n            PerformanceEvents.NativeMessageHandlerHandshake\n        );\n        this.crypto = crypto;\n    }\n\n    /**\n     * Sends a given message to the extension and resolves with the extension response\n     * @param body\n     */\n    async sendMessage(body: NativeExtensionRequestBody): Promise<object> {\n        this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\n        const req: NativeExtensionRequest = {\n            channel: NativeConstants.CHANNEL_ID,\n            extensionId: this.extensionId,\n            responseId: this.crypto.createNewGuid(),\n            body: body,\n        };\n\n        this.logger.trace(\n            \"NativeMessageHandler - Sending request to browser extension\"\n        );\n        this.logger.tracePii(\n            `NativeMessageHandler - Sending request to browser extension: ${JSON.stringify(\n                req\n            )}`\n        );\n        this.messageChannel.port1.postMessage(req);\n\n        return new Promise((resolve, reject) => {\n            this.resolvers.set(req.responseId, { resolve, reject });\n        });\n    }\n\n    /**\n     * Returns an instance of the MessageHandler that has successfully established a connection with an extension\n     * @param {Logger} logger\n     * @param {number} handshakeTimeoutMs\n     * @param {IPerformanceClient} performanceClient\n     * @param {ICrypto} crypto\n     */\n    static async createProvider(\n        logger: Logger,\n        handshakeTimeoutMs: number,\n        performanceClient: IPerformanceClient,\n        crypto: ICrypto\n    ): Promise<NativeMessageHandler> {\n        logger.trace(\"NativeMessageHandler - createProvider called.\");\n        try {\n            const preferredProvider = new NativeMessageHandler(\n                logger,\n                handshakeTimeoutMs,\n                performanceClient,\n                crypto,\n                NativeConstants.PREFERRED_EXTENSION_ID\n            );\n            await preferredProvider.sendHandshakeRequest();\n            return preferredProvider;\n        } catch (e) {\n            // If preferred extension fails for whatever reason, fallback to using any installed extension\n            const backupProvider = new NativeMessageHandler(\n                logger,\n                handshakeTimeoutMs,\n                performanceClient,\n                crypto\n            );\n            await backupProvider.sendHandshakeRequest();\n            return backupProvider;\n        }\n    }\n\n    /**\n     * Send handshake request helper.\n     */\n    private async sendHandshakeRequest(): Promise<void> {\n        this.logger.trace(\n            \"NativeMessageHandler - sendHandshakeRequest called.\"\n        );\n        // Register this event listener before sending handshake\n        window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\n\n        const req: NativeExtensionRequest = {\n            channel: NativeConstants.CHANNEL_ID,\n            extensionId: this.extensionId,\n            responseId: this.crypto.createNewGuid(),\n            body: {\n                method: NativeExtensionMethod.HandshakeRequest,\n            },\n        };\n        this.handshakeEvent.add({\n            extensionId: this.extensionId,\n            extensionHandshakeTimeoutMs: this.handshakeTimeoutMs,\n        });\n\n        this.messageChannel.port1.onmessage = (event) => {\n            this.onChannelMessage(event);\n        };\n\n        window.postMessage(req, window.origin, [this.messageChannel.port2]);\n\n        return new Promise((resolve, reject) => {\n            this.handshakeResolvers.set(req.responseId, { resolve, reject });\n            this.timeoutId = window.setTimeout(() => {\n                /*\n                 * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\n                 * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\n                 */\n                window.removeEventListener(\n                    \"message\",\n                    this.windowListener,\n                    false\n                );\n                this.messageChannel.port1.close();\n                this.messageChannel.port2.close();\n                this.handshakeEvent.end({\n                    extensionHandshakeTimedOut: true,\n                    success: false,\n                });\n                reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.nativeHandshakeTimeout\n                    )\n                );\n                this.handshakeResolvers.delete(req.responseId);\n            }, this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\n        });\n    }\n\n    /**\n     * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\n     * @param event\n     */\n    private onWindowMessage(event: MessageEvent): void {\n        this.logger.trace(\"NativeMessageHandler - onWindowMessage called\");\n        // We only accept messages from ourselves\n        if (event.source !== window) {\n            return;\n        }\n\n        const request = event.data;\n\n        if (\n            !request.channel ||\n            request.channel !== NativeConstants.CHANNEL_ID\n        ) {\n            return;\n        }\n\n        if (request.extensionId && request.extensionId !== this.extensionId) {\n            return;\n        }\n\n        if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\n            const handshakeResolver = this.handshakeResolvers.get(\n                request.responseId\n            );\n            /*\n             * Filter out responses with no matched resolvers sooner to keep channel ports open while waiting for\n             * the proper response.\n             */\n            if (!handshakeResolver) {\n                this.logger.trace(\n                    `NativeMessageHandler.onWindowMessage - resolver can't be found for request ${request.responseId}`\n                );\n                return;\n            }\n\n            // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\n            this.logger.verbose(\n                request.extensionId\n                    ? `Extension with id: ${request.extensionId} not installed`\n                    : \"No extension installed\"\n            );\n            clearTimeout(this.timeoutId);\n            this.messageChannel.port1.close();\n            this.messageChannel.port2.close();\n            window.removeEventListener(\"message\", this.windowListener, false);\n            this.handshakeEvent.end({\n                success: false,\n                extensionInstalled: false,\n            });\n            handshakeResolver.reject(\n                createBrowserAuthError(\n                    BrowserAuthErrorCodes.nativeExtensionNotInstalled\n                )\n            );\n        }\n    }\n\n    /**\n     * Invoked when a message is received from the extension on the MessageChannel port\n     * @param event\n     */\n    private onChannelMessage(event: MessageEvent): void {\n        this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\n        const request = event.data;\n\n        const resolver = this.resolvers.get(request.responseId);\n        const handshakeResolver = this.handshakeResolvers.get(\n            request.responseId\n        );\n\n        try {\n            const method = request.body.method;\n\n            if (method === NativeExtensionMethod.Response) {\n                if (!resolver) {\n                    return;\n                }\n                const response = request.body.response;\n                this.logger.trace(\n                    \"NativeMessageHandler - Received response from browser extension\"\n                );\n                this.logger.tracePii(\n                    `NativeMessageHandler - Received response from browser extension: ${JSON.stringify(\n                        response\n                    )}`\n                );\n                if (response.status !== \"Success\") {\n                    resolver.reject(\n                        NativeAuthError.createError(\n                            response.code,\n                            response.description,\n                            response.ext\n                        )\n                    );\n                } else if (response.result) {\n                    if (\n                        response.result[\"code\"] &&\n                        response.result[\"description\"]\n                    ) {\n                        resolver.reject(\n                            NativeAuthError.createError(\n                                response.result[\"code\"],\n                                response.result[\"description\"],\n                                response.result[\"ext\"]\n                            )\n                        );\n                    } else {\n                        resolver.resolve(response.result);\n                    }\n                } else {\n                    throw AuthError.createUnexpectedError(\n                        \"Event does not contain result.\"\n                    );\n                }\n                this.resolvers.delete(request.responseId);\n            } else if (method === NativeExtensionMethod.HandshakeResponse) {\n                if (!handshakeResolver) {\n                    this.logger.trace(\n                        `NativeMessageHandler.onChannelMessage - resolver can't be found for request ${request.responseId}`\n                    );\n                    return;\n                }\n                clearTimeout(this.timeoutId); // Clear setTimeout\n                window.removeEventListener(\n                    \"message\",\n                    this.windowListener,\n                    false\n                ); // Remove 'No extension' listener\n                this.extensionId = request.extensionId;\n                this.extensionVersion = request.body.version;\n                this.logger.verbose(\n                    `NativeMessageHandler - Received HandshakeResponse from extension: ${this.extensionId}`\n                );\n                this.handshakeEvent.end({\n                    extensionInstalled: true,\n                    success: true,\n                });\n\n                handshakeResolver.resolve();\n                this.handshakeResolvers.delete(request.responseId);\n            }\n            // Do nothing if method is not Response or HandshakeResponse\n        } catch (err) {\n            this.logger.error(\"Error parsing response from WAM Extension\");\n            this.logger.errorPii(\n                `Error parsing response from WAM Extension: ${err as string}`\n            );\n            this.logger.errorPii(`Unable to parse ${event}`);\n\n            if (resolver) {\n                resolver.reject(err as AuthError);\n            } else if (handshakeResolver) {\n                handshakeResolver.reject(err as AuthError);\n            }\n        }\n    }\n\n    /**\n     * Returns the Id for the browser extension this handler is communicating with\n     * @returns\n     */\n    getExtensionId(): string | undefined {\n        return this.extensionId;\n    }\n\n    /**\n     * Returns the version for the browser extension this handler is communicating with\n     * @returns\n     */\n    getExtensionVersion(): string | undefined {\n        return this.extensionVersion;\n    }\n\n    /**\n     * Returns boolean indicating whether or not the request should attempt to use native broker\n     * @param logger\n     * @param config\n     * @param nativeExtensionProvider\n     * @param authenticationScheme\n     */\n    static isNativeAvailable(\n        config: BrowserConfiguration,\n        logger: Logger,\n        nativeExtensionProvider?: NativeMessageHandler,\n        authenticationScheme?: AuthenticationScheme\n    ): boolean {\n        logger.trace(\"isNativeAvailable called\");\n        if (!config.system.allowNativeBroker) {\n            logger.trace(\n                \"isNativeAvailable: allowNativeBroker is not enabled, returning false\"\n            );\n            // Developer disabled WAM\n            return false;\n        }\n\n        if (!nativeExtensionProvider) {\n            logger.trace(\n                \"isNativeAvailable: WAM extension provider is not initialized, returning false\"\n            );\n            // Extension is not available\n            return false;\n        }\n\n        if (authenticationScheme) {\n            switch (authenticationScheme) {\n                case AuthenticationScheme.BEARER:\n                case AuthenticationScheme.POP:\n                    logger.trace(\n                        \"isNativeAvailable: authenticationScheme is supported, returning true\"\n                    );\n                    return true;\n                default:\n                    logger.trace(\n                        \"isNativeAvailable: authenticationScheme is not supported, returning false\"\n                    );\n                    return false;\n            }\n        }\n\n        return true;\n    }\n}\n"],"mappings":";;;;;;;;;AASA;AASA;AASA;AASA;AAKI,MAAQA,oBAAS;EACjBC,YAAAC,MAAsC,EAAAC,kBAAA,EAAAC,iBAAA,EAAAC,MAAA,EAAAC,WAAA;IAC/B,IAAC,CAAAJ,MAAA,GAAkDA,MAAA;IACnD,IAAC,CAAAC,kBAAyD,GAAAA,kBAAA;IAC1D,IAAC,CAAAG,WAAA,GAA+BA,WAAA;IACvC,IAAQ,CAAAC,SAAS,OAAAC,GAAA,GAAc;IAC/B,IAAQ,CAAAC,kBAAS,OAAiBD,GAAqB;IACvD,IAAQ,CAAAE,cAAS,OAAAC,cAA2C;IAGxD,KAAAC,cAAc,QAAAC,eACI,CAAEC,IAAA,KACpB,CAAiB;IAkBrB,KAAAV,iBAAA,GAAAA,iBAAA;;;EAGG;;AAyBH;;;;;;MAMGW,OAAA,EAAAC,eAAA,CAAAC,UAAA;MACwBX,WAAA,OAAAA,WAAA;MA8B3BY,UAAA,OAAAb,MAAA,CAAAc,aAAA;;IAEG;QACW,CAAoBjB,MAAA,CAAAkB,KAAA;IAsDlC,KAAAlB,MAAA,CAAAmB,QAAA,iEAAAC,IAAA,CAAAC,SAAA,CAAAC,GAAA;;;MAGG,KAAAjB,SAAA,CAAAkB,GAAA,CAAAD,GAAA,CAAAN,UAAA;QAAAQ,OAAA;QAAAC;MAAA;IACH;EAyDA;;;AAGG;AACH;AAgGA;;;EAGG,aAAAC,eAAA1B,MAAA,EAAAC,kBAAA,EAAAC,iBAAA,EAAAC,MAAA;IACWH,MAAA,CAAAkB,KAAA,gDAAsB;IAIpC;;;MAGG,OAAAS,iBAAA;KACgB,CAInB,OAAAC,CAAA;;;;;;EAMG;;AA0CN"},"metadata":{},"sourceType":"module","externalDependencies":[]}