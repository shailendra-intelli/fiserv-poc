{"ast":null,"code":"/*! @azure/msal-browser v3.5.0 2023-11-07 */\n'use strict';\n\nimport { createBrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.mjs';\nimport { BrowserCacheLocation } from '../utils/BrowserConstants.mjs';\nimport { storageNotSupported } from '../error/BrowserConfigurationAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass BrowserStorage {\n  constructor(cacheLocation) {\n    this.validateWindowStorage(cacheLocation);\n    this.windowStorage = window[cacheLocation];\n  }\n  validateWindowStorage(cacheLocation) {\n    if (cacheLocation !== BrowserCacheLocation.LocalStorage && cacheLocation !== BrowserCacheLocation.SessionStorage || !window[cacheLocation]) {\n      throw createBrowserConfigurationAuthError(storageNotSupported);\n    }\n  }\n  getItem(key) {\n    return this.windowStorage.getItem(key);\n  }\n  setItem(key, value) {\n    this.windowStorage.setItem(key, value);\n  }\n  removeItem(key) {\n    this.windowStorage.removeItem(key);\n  }\n  getKeys() {\n    return Object.keys(this.windowStorage);\n  }\n  containsKey(key) {\n    return this.windowStorage.hasOwnProperty(key);\n  }\n}\nexport { BrowserStorage };","map":{"version":3,"names":["BrowserStorage","constructor","cacheLocation","validateWindowStorage","windowStorage","window"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\cache\\BrowserStorage.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    BrowserConfigurationAuthErrorCodes,\n    createBrowserConfigurationAuthError,\n} from \"../error/BrowserConfigurationAuthError\";\nimport { BrowserCacheLocation } from \"../utils/BrowserConstants\";\nimport { IWindowStorage } from \"./IWindowStorage\";\n\nexport class BrowserStorage implements IWindowStorage<string> {\n    private windowStorage: Storage;\n\n    constructor(cacheLocation: string) {\n        this.validateWindowStorage(cacheLocation);\n        this.windowStorage = window[cacheLocation];\n    }\n\n    private validateWindowStorage(cacheLocation: string): void {\n        if (\n            (cacheLocation !== BrowserCacheLocation.LocalStorage &&\n                cacheLocation !== BrowserCacheLocation.SessionStorage) ||\n            !window[cacheLocation]\n        ) {\n            throw createBrowserConfigurationAuthError(\n                BrowserConfigurationAuthErrorCodes.storageNotSupported\n            );\n        }\n    }\n\n    getItem(key: string): string | null {\n        return this.windowStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        this.windowStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        this.windowStorage.removeItem(key);\n    }\n\n    getKeys(): string[] {\n        return Object.keys(this.windowStorage);\n    }\n\n    containsKey(key: string): boolean {\n        return this.windowStorage.hasOwnProperty(key);\n    }\n}\n"],"mappings":";;;;;;;AAUA;AAEA;;AAGgB;AAqBL,MAAAA,cAAmB;EAI1BC,WAAWA,CAAAC,aAAc,EAAI;IAItB,KAAAC,qBAAY,CAAAD,aAAA;IAInB,KAAAE,aAAiB,GAAAC,MAAgB,CAAAH,aAAA;EAGpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}