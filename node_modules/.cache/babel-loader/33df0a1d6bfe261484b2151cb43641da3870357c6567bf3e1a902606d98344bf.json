{"ast":null,"code":"/*! @azure/msal-browser v3.5.0 2023-11-07 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * BridgeProxy\n * Provides a proxy for accessing a bridge to a host app and/or\n * platform broker\n */\nclass BridgeProxy {\n  /**\n   * initializeNestedAppAuthBridge - Initializes the bridge to the host app\n   * @returns a promise that resolves to an InitializeBridgeResponse or rejects with an Error\n   * @remarks This method will be called by the create factory method\n   * @remarks If the bridge is not available, this method will throw an error\n   */\n  static async initializeNestedAppAuthBridge() {\n    if (window === undefined) {\n      throw new Error(\"window is undefined\");\n    }\n    if (window.nestedAppAuthBridge === undefined) {\n      throw new Error(\"window.nestedAppAuthBridge is undefined\");\n    }\n    if (window.crypto === undefined) {\n      throw new Error(\"window.crypto is undefined\");\n    }\n    try {\n      BridgeProxy.crypto = window.crypto;\n      window.nestedAppAuthBridge.addEventListener(\"message\", response => {\n        const responseEnvelope = JSON.parse(response);\n        const request = BridgeProxy.bridgeRequests.find(element => element.requestId === responseEnvelope.requestId);\n        if (request !== undefined) {\n          BridgeProxy.bridgeRequests.splice(BridgeProxy.bridgeRequests.indexOf(request), 1);\n          if (responseEnvelope.success) {\n            request.resolve(responseEnvelope.body);\n          } else {\n            request.reject(responseEnvelope.body);\n          }\n        }\n      });\n      const promise = new Promise((resolve, reject) => {\n        const message = {\n          messageType: \"NestedAppAuthRequest\",\n          method: \"GetInitContext\",\n          requestId: BridgeProxy.getRandomId()\n        };\n        const request = {\n          requestId: message.requestId,\n          method: message.method,\n          resolve: resolve,\n          reject: reject\n        };\n        BridgeProxy.bridgeRequests.push(request);\n        window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n      });\n      return promise;\n    } catch (error) {\n      window.console.log(error);\n      throw error;\n    }\n  }\n  static getRandomId() {\n    return BridgeProxy.crypto.randomUUID();\n  }\n  /**\n   * getTokenInteractive - Attempts to get a token interactively from the bridge\n   * @param request A token request\n   * @returns a promise that resolves to a token response or rejects with a BridgeError\n   */\n  getTokenInteractive(request) {\n    return this.sendRequest(\"GetTokenPopup\", request);\n  }\n  /**\n   * getTokenSilent Attempts to get a token silently from the bridge\n   * @param request A token request\n   * @returns a promise that resolves to a token response or rejects with a BridgeError\n   */\n  getTokenSilent(request) {\n    return this.sendRequest(\"GetToken\", request);\n  }\n  /**\n   * getAccountInfo - Gets account information from the bridge\n   *\n   * @param request A request for account information\n   */\n  getAccountInfo(request) {\n    let method = \"GetAccountByHomeId\";\n    if (request.homeAccountId !== undefined) {\n      method = \"GetAccountByHomeId\";\n    }\n    if (request.localAccountId !== undefined) {\n      method = \"GetAccountByLocalId\";\n    }\n    if (request.username !== undefined) {\n      method = \"GetAccountByUsername\";\n    }\n    return this.sendRequest(method, request);\n  }\n  getActiveAccount() {\n    return this.sendRequest(\"GetActiveAccount\", undefined);\n  }\n  /**\n   * A method used to send a request to the bridge\n   * @param request A token request\n   * @returns a promise that resolves to a response of provided type or rejects with a BridgeError\n   */\n  sendRequest(method, request) {\n    const message = {\n      messageType: \"NestedAppAuthRequest\",\n      method: method,\n      requestId: BridgeProxy.getRandomId(),\n      body: request\n    };\n    const promise = new Promise((resolve, reject) => {\n      const request = {\n        requestId: message.requestId,\n        method: message.method,\n        resolve: resolve,\n        reject: reject\n      };\n      BridgeProxy.bridgeRequests.push(request);\n      window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n    });\n    return promise;\n  }\n  /**\n   * Private constructor for BridgeProxy\n   * @param sdkName The name of the SDK being used to make requests on behalf of the app\n   * @param sdkVersion The version of the SDK being used to make requests on behalf of the app\n   * @param capabilities The capabilities of the bridge / SDK / platform broker\n   */\n  constructor(sdkName, sdkVersion, capabilities) {\n    this.sdkName = sdkName;\n    this.sdkVersion = sdkVersion;\n    this.capabilities = capabilities;\n  }\n  /**\n   * Factory method for creating an implementation of IBridgeProxy\n   * @returns A promise that resolves to a BridgeProxy implementation\n   */\n  static async create() {\n    const response = await BridgeProxy.initializeNestedAppAuthBridge();\n    return new BridgeProxy(response.sdkName, response.sdkVersion, response.capabilities);\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nBridgeProxy.bridgeRequests = [];\nexport { BridgeProxy, BridgeProxy as default };","map":{"version":3,"names":["BridgeProxy","window","undefined","Error","nestedAppAuthBridge","crypto","responseEnvelope","JSON","parse","response","request","bridgeRequests","find","element","requestId","splice","indexOf","reject","body","message","method","resolve","promise","getRandomId","randomUUID"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\naa\\BridgeProxy.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountInfo } from \"./AccountInfo\";\nimport {\n    AccountByHomeIdRequest,\n    AccountByLocalIdRequest,\n    AccountByUsernameRequest,\n} from \"./AccountRequests\";\nimport { AuthBridge } from \"./AuthBridge\";\nimport { BridgeCapabilities } from \"./BridgeCapabilities\";\nimport { BridgeRequest } from \"./BridgeRequest\";\nimport { BridgeRequestEnvelope, BridgeMethods } from \"./BridgeRequestEnvelope\";\nimport { BridgeResponseEnvelope } from \"./BridgeResponseEnvelope\";\nimport { IBridgeProxy } from \"./IBridgeProxy\";\nimport { InitializeBridgeResponse } from \"./InitializeBridgeResponse\";\nimport { TokenRequest } from \"./TokenRequest\";\nimport { TokenResponse } from \"./TokenResponse\";\n\ndeclare global {\n    interface Window {\n        nestedAppAuthBridge: AuthBridge;\n    }\n}\n\n/**\n * BridgeProxy\n * Provides a proxy for accessing a bridge to a host app and/or\n * platform broker\n */\nexport class BridgeProxy implements IBridgeProxy {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static bridgeRequests: any[] = [];\n    static crypto: Crypto;\n    sdkName: string;\n    sdkVersion: string;\n    capabilities: BridgeCapabilities;\n\n    /**\n     * initializeNestedAppAuthBridge - Initializes the bridge to the host app\n     * @returns a promise that resolves to an InitializeBridgeResponse or rejects with an Error\n     * @remarks This method will be called by the create factory method\n     * @remarks If the bridge is not available, this method will throw an error\n     */\n    protected static async initializeNestedAppAuthBridge(): Promise<InitializeBridgeResponse> {\n        if (window === undefined) {\n            throw new Error(\"window is undefined\");\n        }\n        if (window.nestedAppAuthBridge === undefined) {\n            throw new Error(\"window.nestedAppAuthBridge is undefined\");\n        }\n        if (window.crypto === undefined) {\n            throw new Error(\"window.crypto is undefined\");\n        }\n\n        try {\n            BridgeProxy.crypto = window.crypto;\n\n            window.nestedAppAuthBridge.addEventListener(\n                \"message\",\n                (response: string) => {\n                    const responseEnvelope: BridgeResponseEnvelope =\n                        JSON.parse(response);\n                    const request = BridgeProxy.bridgeRequests.find(\n                        (element) =>\n                            element.requestId === responseEnvelope.requestId\n                    );\n                    if (request !== undefined) {\n                        BridgeProxy.bridgeRequests.splice(\n                            BridgeProxy.bridgeRequests.indexOf(request),\n                            1\n                        );\n                        if (responseEnvelope.success) {\n                            request.resolve(responseEnvelope.body);\n                        } else {\n                            request.reject(responseEnvelope.body);\n                        }\n                    }\n                }\n            );\n\n            const promise = new Promise<InitializeBridgeResponse>(\n                (resolve, reject) => {\n                    const message: BridgeRequestEnvelope = {\n                        messageType: \"NestedAppAuthRequest\",\n                        method: \"GetInitContext\",\n                        requestId: BridgeProxy.getRandomId(),\n                    };\n                    const request: BridgeRequest<InitializeBridgeResponse> = {\n                        requestId: message.requestId,\n                        method: message.method,\n                        resolve: resolve,\n                        reject: reject,\n                    };\n                    BridgeProxy.bridgeRequests.push(request);\n                    window.nestedAppAuthBridge.postMessage(\n                        JSON.stringify(message)\n                    );\n                }\n            );\n\n            return promise;\n        } catch (error) {\n            window.console.log(error);\n            throw error;\n        }\n    }\n\n    public static getRandomId(): string {\n        return BridgeProxy.crypto.randomUUID();\n    }\n\n    /**\n     * getTokenInteractive - Attempts to get a token interactively from the bridge\n     * @param request A token request\n     * @returns a promise that resolves to a token response or rejects with a BridgeError\n     */\n    public getTokenInteractive(request: TokenRequest): Promise<TokenResponse> {\n        return this.sendRequest<TokenResponse>(\"GetTokenPopup\", request);\n    }\n\n    /**\n     * getTokenSilent Attempts to get a token silently from the bridge\n     * @param request A token request\n     * @returns a promise that resolves to a token response or rejects with a BridgeError\n     */\n    public getTokenSilent(request: TokenRequest): Promise<TokenResponse> {\n        return this.sendRequest<TokenResponse>(\"GetToken\", request);\n    }\n\n    /**\n     * getAccountInfo - Gets account information from the bridge\n     *\n     * @param request A request for account information\n     */\n    public getAccountInfo(\n        request:\n            | AccountByHomeIdRequest\n            | AccountByLocalIdRequest\n            | AccountByUsernameRequest\n    ): Promise<AccountInfo> {\n        let method: BridgeMethods = \"GetAccountByHomeId\";\n\n        if ((request as AccountByHomeIdRequest).homeAccountId !== undefined) {\n            method = \"GetAccountByHomeId\";\n        }\n\n        if ((request as AccountByLocalIdRequest).localAccountId !== undefined) {\n            method = \"GetAccountByLocalId\";\n        }\n\n        if ((request as AccountByUsernameRequest).username !== undefined) {\n            method = \"GetAccountByUsername\";\n        }\n\n        return this.sendRequest<AccountInfo>(method, request);\n    }\n\n    public getActiveAccount(): Promise<AccountInfo> {\n        return this.sendRequest<AccountInfo>(\"GetActiveAccount\", undefined);\n    }\n\n    /**\n     * A method used to send a request to the bridge\n     * @param request A token request\n     * @returns a promise that resolves to a response of provided type or rejects with a BridgeError\n     */\n    private sendRequest<TResponse>(\n        method: BridgeMethods,\n        request:\n            | TokenRequest\n            | AccountByHomeIdRequest\n            | AccountByLocalIdRequest\n            | AccountByUsernameRequest\n            | undefined\n    ): Promise<TResponse> {\n        const message: BridgeRequestEnvelope = {\n            messageType: \"NestedAppAuthRequest\",\n            method: method,\n            requestId: BridgeProxy.getRandomId(),\n            body: request,\n        };\n\n        const promise = new Promise<TResponse>((resolve, reject) => {\n            const request: BridgeRequest<TResponse> = {\n                requestId: message.requestId,\n                method: message.method,\n                resolve: resolve,\n                reject: reject,\n            };\n            BridgeProxy.bridgeRequests.push(request);\n            window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n        });\n\n        return promise;\n    }\n\n    /**\n     * Private constructor for BridgeProxy\n     * @param sdkName The name of the SDK being used to make requests on behalf of the app\n     * @param sdkVersion The version of the SDK being used to make requests on behalf of the app\n     * @param capabilities The capabilities of the bridge / SDK / platform broker\n     */\n    private constructor(\n        sdkName: string,\n        sdkVersion: string,\n        capabilities: BridgeCapabilities\n    ) {\n        this.sdkName = sdkName;\n        this.sdkVersion = sdkVersion;\n        this.capabilities = capabilities;\n    }\n\n    /**\n     * Factory method for creating an implementation of IBridgeProxy\n     * @returns A promise that resolves to a BridgeProxy implementation\n     */\n    public static async create(): Promise<IBridgeProxy> {\n        const response = await BridgeProxy.initializeNestedAppAuthBridge();\n        return new BridgeProxy(\n            response.sdkName,\n            response.sdkVersion,\n            response.capabilities\n        );\n    }\n}\n\nexport default BridgeProxy;\n"],"mappings":";;;AAKA;AACA;AAKA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACI,MAAAA,WAAgB;;AAEf;AACJ;AAED;;;;IAIG,IAAAC,MAAA,KAAAC,SAAA;MACU,UAAAC,KAAA,sBAAmC;IAE5C;IACA,IAAOF,MAAQ,CAAAG,mBAAO,KAAAF,SAAA;MACf,UAASC,KAAA;;IAEJ,IAAAF,MAAE,CAAAI,MAAA,KAAAH,SAAmB;MAEjC,UAAAC,KAAA;;;;;QAKG,MAAAG,gBAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAC,QAAA;QACoB,MAAAC,OAAA,GAAAV,WAAA,CAAAW,cAAiC,CAAAC,IAAQ,CAAAC,OAAA,IAAAA,OAAA,CAAAC,SAAyB,KAAAR,gBAAA,CAAAQ,SAAA;QAgE3E,IAAAJ,OAAqB,KAAAR,SAAA;UAInCF,WAAA,CAAAW,cAAA,CAAAI,MAAA,CAAAf,WAAA,CAAAW,cAAA,CAAAK,OAAA,CAAAN,OAAA;;;iBAIG;YACwBA,OAAO,CAAEO,MAAA,CAAAX,gBAAsB,CAACY,IAAA;UAI3D;;;;QAIG,MAAAC,OAAA;qBAC4B;UAI/BC,MAAA;;;;UAIGN,SAAA,EAAAK,OAAA,CAAAL,SAAA;UAECM,MAAO,EACDD,OAAA,CAAAC,MAAA;UAqBaC,OAAI,EAAAA,OAAQ;UAInCJ,MAAA,EAAAA;;;;MAIG;MACK,OAAWK,OAAA;IA8BnB,E;;;;EAKG;EACH,OAAOC,YAAA;IAUP,OAAAvB,WAAA,CAAAK,MAAA,CAAAmB,UAAA;;;AAGG;AACiB;AAQvB;AAED"},"metadata":{},"sourceType":"module","externalDependencies":[]}