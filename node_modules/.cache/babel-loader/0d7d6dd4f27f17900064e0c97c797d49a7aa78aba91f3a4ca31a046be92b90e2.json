{"ast":null,"code":"/*! @azure/msal-browser v3.9.0 2024-02-07 */\n'use strict';\n\nimport { invokeAsync, PerformanceEvents, AuthError } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { InteractionType } from '../utils/BrowserConstants.mjs';\nimport { HybridSpaAuthorizationCodeClient } from './HybridSpaAuthorizationCodeClient.mjs';\nimport { InteractionHandler } from '../interaction_handler/InteractionHandler.mjs';\nimport { authCodeRequired, silentLogoutUnsupported } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SilentAuthCodeClient extends StandardInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeMessageHandler, correlationId) {\n    super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n    this.apiId = apiId;\n  }\n  /**\n   * Acquires a token silently by redeeming an authorization code against the /token endpoint\n   * @param request\n   */\n  async acquireToken(request) {\n    // Auth code payload is required\n    if (!request.code) {\n      throw createBrowserAuthError(authCodeRequired);\n    }\n    // Create silent request\n    const silentRequest = await invokeAsync(this.initializeAuthorizationRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(request, InteractionType.Silent);\n    const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n    try {\n      // Create auth code request (PKCE not needed)\n      const authCodeRequest = {\n        ...silentRequest,\n        code: request.code\n      };\n      // Initialize the client\n      const clientConfig = await invokeAsync(this.getClientConfiguration.bind(this), PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, request.correlationId)(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions, silentRequest.account);\n      const authClient = new HybridSpaAuthorizationCodeClient(clientConfig);\n      this.logger.verbose(\"Auth code client created\");\n      // Create silent handler\n      const interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n      // Handle auth code parameters from request\n      return await invokeAsync(interactionHandler.handleCodeResponseFromServer.bind(interactionHandler), PerformanceEvents.HandleCodeResponseFromServer, this.logger, this.performanceClient, request.correlationId)({\n        code: request.code,\n        msgraph_host: request.msGraphHost,\n        cloud_graph_host_name: request.cloudGraphHostName,\n        cloud_instance_host_name: request.cloudInstanceHostName\n      }, silentRequest, false);\n    } catch (e) {\n      if (e instanceof AuthError) {\n        e.setCorrelationId(this.correlationId);\n        serverTelemetryManager.cacheFailedRequest(e);\n      }\n      throw e;\n    }\n  }\n  /**\n   * Currently Unsupported\n   */\n  logout() {\n    // Synchronous so we must reject\n    return Promise.reject(createBrowserAuthError(silentLogoutUnsupported));\n  }\n}\nexport { SilentAuthCodeClient };","map":{"version":3,"names":["SilentAuthCodeClient","StandardInteractionClient","constructor","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","performanceClient","nativeMessageHandler","correlationId","acquireToken","request","code","createBrowserAuthError","authCodeRequired","silentRequest","invokeAsync","initializeAuthorizationRequest","bind","PerformanceEvents","StandardInteractionClientInitializeAuthorizationRequest","InteractionType","Silent","serverTelemetryManager","initializeServerTelemetryManager","authCodeRequest","clientConfig","getClientConfiguration","StandardInteractionClientGetClientConfiguration","authority","azureCloudOptions","account","authClient","HybridSpaAuthorizationCodeClient","verbose","interactionHandler","InteractionHandler","browserStorage","handleCodeResponseFromServer","HandleCodeResponseFromServer","msgraph_host","msGraphHost","cloud_graph_host_name","cloudGraphHostName","cloud_instance_host_name","cloudInstanceHostName","e","AuthError","setCorrelationId","cacheFailedRequest","logout","Promise","reject","silentLogoutUnsupported"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentAuthCodeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    Logger,\n    CommonAuthorizationCodeRequest,\n    AuthError,\n    IPerformanceClient,\n    PerformanceEvents,\n    invokeAsync,\n} from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { HybridSpaAuthorizationCodeClient } from \"./HybridSpaAuthorizationCodeClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { InteractionHandler } from \"../interaction_handler/InteractionHandler\";\n\nexport class SilentAuthCodeClient extends StandardInteractionClient {\n    private apiId: ApiId;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        apiId: ApiId,\n        performanceClient: IPerformanceClient,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            storageImpl,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            nativeMessageHandler,\n            correlationId\n        );\n        this.apiId = apiId;\n    }\n\n    /**\n     * Acquires a token silently by redeeming an authorization code against the /token endpoint\n     * @param request\n     */\n    async acquireToken(\n        request: AuthorizationCodeRequest\n    ): Promise<AuthenticationResult> {\n        // Auth code payload is required\n        if (!request.code) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.authCodeRequired\n            );\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await invokeAsync(\n            this.initializeAuthorizationRequest.bind(this),\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(request, InteractionType.Silent);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            this.apiId\n        );\n\n        try {\n            // Create auth code request (PKCE not needed)\n            const authCodeRequest: CommonAuthorizationCodeRequest = {\n                ...silentRequest,\n                code: request.code,\n            };\n\n            // Initialize the client\n            const clientConfig = await invokeAsync(\n                this.getClientConfiguration.bind(this),\n                PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(\n                serverTelemetryManager,\n                silentRequest.authority,\n                silentRequest.azureCloudOptions,\n                silentRequest.account\n            );\n            const authClient: HybridSpaAuthorizationCodeClient =\n                new HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n\n            // Create silent handler\n            const interactionHandler = new InteractionHandler(\n                authClient,\n                this.browserStorage,\n                authCodeRequest,\n                this.logger,\n                this.performanceClient\n            );\n\n            // Handle auth code parameters from request\n            return await invokeAsync(\n                interactionHandler.handleCodeResponseFromServer.bind(\n                    interactionHandler\n                ),\n                PerformanceEvents.HandleCodeResponseFromServer,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(\n                {\n                    code: request.code,\n                    msgraph_host: request.msGraphHost,\n                    cloud_graph_host_name: request.cloudGraphHostName,\n                    cloud_instance_host_name: request.cloudInstanceHostName,\n                },\n                silentRequest,\n                false\n            );\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(\n            createBrowserAuthError(\n                BrowserAuthErrorCodes.silentLogoutUnsupported\n            )\n        );\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}