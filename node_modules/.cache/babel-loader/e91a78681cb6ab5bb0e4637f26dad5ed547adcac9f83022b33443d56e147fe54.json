{"ast":null,"code":"/*! @azure/msal-browser v3.9.0 2024-02-07 */\n'use strict';\n\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { PerformanceEvents } from '@azure/msal-common';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.mjs';\nimport { cryptoNonExistent } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This file defines functions used by the browser library to perform cryptography operations such as\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\n */\n/**\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\n */\n// RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\n// UUID hex digits\nconst UUID_CHARS = \"0123456789abcdef\";\n// Array to store UINT32 random value\nconst UINT32_ARR = new Uint32Array(1);\nconst keygenAlgorithmOptions = {\n  name: PKCS1_V15_KEYGEN_ALG,\n  hash: S256_HASH_ALG,\n  modulusLength: MODULUS_LENGTH,\n  publicExponent: PUBLIC_EXPONENT\n};\n/**\n * Check whether browser crypto is available.\n */\nfunction validateCryptoAvailable(logger) {\n  if (\"crypto\" in window) {\n    logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n  } else {\n    logger.error(\"BrowserCrypto: crypto interface is unavailable\");\n    throw createBrowserAuthError(cryptoNonExistent);\n  }\n}\n/**\n * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\n * @param dataString {string} data string\n * @param performanceClient {?IPerformanceClient}\n * @param correlationId {?string} correlation id\n */\nasync function sha256Digest(dataString, performanceClient, correlationId) {\n  performanceClient?.addQueueMeasurement(PerformanceEvents.Sha256Digest, correlationId);\n  const encoder = new TextEncoder();\n  const data = encoder.encode(dataString);\n  return window.crypto.subtle.digest(S256_HASH_ALG, data);\n}\n/**\n * Populates buffer with cryptographically random values.\n * @param dataBuffer\n */\nfunction getRandomValues(dataBuffer) {\n  return window.crypto.getRandomValues(dataBuffer);\n}\n/**\n * Returns random Uint32 value.\n * @returns {number}\n */\nfunction getRandomUint32() {\n  window.crypto.getRandomValues(UINT32_ARR);\n  return UINT32_ARR[0];\n}\n/**\n * Creates a UUID v7 from the current timestamp.\n * Implementation relies on the system clock to guarantee increasing order of generated identifiers.\n * @returns {number}\n */\nfunction createNewGuid() {\n  const currentTimestamp = Date.now();\n  const baseRand = getRandomUint32() * 0x400 + (getRandomUint32() & 0x3ff);\n  // Result byte array\n  const bytes = new Uint8Array(16);\n  // A 12-bit `rand_a` field value\n  const randA = Math.trunc(baseRand / 2 ** 30);\n  // The higher 30 bits of 62-bit `rand_b` field value\n  const randBHi = baseRand & 2 ** 30 - 1;\n  // The lower 32 bits of 62-bit `rand_b` field value\n  const randBLo = getRandomUint32();\n  bytes[0] = currentTimestamp / 2 ** 40;\n  bytes[1] = currentTimestamp / 2 ** 32;\n  bytes[2] = currentTimestamp / 2 ** 24;\n  bytes[3] = currentTimestamp / 2 ** 16;\n  bytes[4] = currentTimestamp / 2 ** 8;\n  bytes[5] = currentTimestamp;\n  bytes[6] = 0x70 | randA >>> 8;\n  bytes[7] = randA;\n  bytes[8] = 0x80 | randBHi >>> 24;\n  bytes[9] = randBHi >>> 16;\n  bytes[10] = randBHi >>> 8;\n  bytes[11] = randBHi;\n  bytes[12] = randBLo >>> 24;\n  bytes[13] = randBLo >>> 16;\n  bytes[14] = randBLo >>> 8;\n  bytes[15] = randBLo;\n  let text = \"\";\n  for (let i = 0; i < bytes.length; i++) {\n    text += UUID_CHARS.charAt(bytes[i] >>> 4);\n    text += UUID_CHARS.charAt(bytes[i] & 0xf);\n    if (i === 3 || i === 5 || i === 7 || i === 9) {\n      text += \"-\";\n    }\n  }\n  return text;\n}\n/**\n * Generates a keypair based on current keygen algorithm config.\n * @param extractable\n * @param usages\n */\nasync function generateKeyPair(extractable, usages) {\n  return window.crypto.subtle.generateKey(keygenAlgorithmOptions, extractable, usages);\n}\n/**\n * Export key as Json Web Key (JWK)\n * @param key\n */\nasync function exportJwk(key) {\n  return window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key);\n}\n/**\n * Imports key as Json Web Key (JWK), can set extractable and usages.\n * @param key\n * @param extractable\n * @param usages\n */\nasync function importJwk(key, extractable, usages) {\n  return window.crypto.subtle.importKey(KEY_FORMAT_JWK, key, keygenAlgorithmOptions, extractable, usages);\n}\n/**\n * Signs given data with given key\n * @param key\n * @param data\n */\nasync function sign(key, data) {\n  return window.crypto.subtle.sign(keygenAlgorithmOptions, key, data);\n}\nexport { createNewGuid, exportJwk, generateKeyPair, getRandomValues, importJwk, sha256Digest, sign, validateCryptoAvailable };","map":{"version":3,"names":["PKCS1_V15_KEYGEN_ALG","S256_HASH_ALG","MODULUS_LENGTH","PUBLIC_EXPONENT","Uint8Array","UUID_CHARS","UINT32_ARR","Uint32Array","keygenAlgorithmOptions","name","hash","modulusLength","publicExponent","validateCryptoAvailable","logger","window","verbose","error","createBrowserAuthError","cryptoNonExistent","sha256Digest","dataString","performanceClient","correlationId","addQueueMeasurement","PerformanceEvents","Sha256Digest","encoder","TextEncoder","data","encode","crypto","subtle","digest","getRandomValues","dataBuffer","getRandomUint32","createNewGuid","currentTimestamp","Date","now","baseRand","bytes","randA","Math","trunc","randBHi","randBLo","text","i","length","charAt","generateKeyPair","extractable","usages","generateKey","exportJwk","key","exportKey","KEY_FORMAT_JWK","importJwk","importKey","sign"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\crypto\\BrowserCrypto.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport {\n    IPerformanceClient,\n    Logger,\n    PerformanceEvents,\n} from \"@azure/msal-common\";\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\n\n/**\n * This file defines functions used by the browser library to perform cryptography operations such as\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\n */\n\n/**\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\n */\n// RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT: Uint8Array = new Uint8Array([0x01, 0x00, 0x01]);\n// UUID hex digits\nconst UUID_CHARS = \"0123456789abcdef\";\n// Array to store UINT32 random value\nconst UINT32_ARR = new Uint32Array(1);\n\nconst keygenAlgorithmOptions: RsaHashedKeyGenParams = {\n    name: PKCS1_V15_KEYGEN_ALG,\n    hash: S256_HASH_ALG,\n    modulusLength: MODULUS_LENGTH,\n    publicExponent: PUBLIC_EXPONENT,\n};\n\n/**\n * Check whether browser crypto is available.\n */\nexport function validateCryptoAvailable(logger: Logger): void {\n    if (\"crypto\" in window) {\n        logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n    } else {\n        logger.error(\"BrowserCrypto: crypto interface is unavailable\");\n        throw createBrowserAuthError(BrowserAuthErrorCodes.cryptoNonExistent);\n    }\n}\n\n/**\n * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\n * @param dataString {string} data string\n * @param performanceClient {?IPerformanceClient}\n * @param correlationId {?string} correlation id\n */\nexport async function sha256Digest(\n    dataString: string,\n    performanceClient?: IPerformanceClient,\n    correlationId?: string\n): Promise<ArrayBuffer> {\n    performanceClient?.addQueueMeasurement(\n        PerformanceEvents.Sha256Digest,\n        correlationId\n    );\n    const encoder = new TextEncoder();\n    const data = encoder.encode(dataString);\n    return window.crypto.subtle.digest(\n        S256_HASH_ALG,\n        data\n    ) as Promise<ArrayBuffer>;\n}\n\n/**\n * Populates buffer with cryptographically random values.\n * @param dataBuffer\n */\nexport function getRandomValues(dataBuffer: Uint8Array): Uint8Array {\n    return window.crypto.getRandomValues(dataBuffer);\n}\n\n/**\n * Returns random Uint32 value.\n * @returns {number}\n */\nfunction getRandomUint32(): number {\n    window.crypto.getRandomValues(UINT32_ARR);\n    return UINT32_ARR[0];\n}\n\n/**\n * Creates a UUID v7 from the current timestamp.\n * Implementation relies on the system clock to guarantee increasing order of generated identifiers.\n * @returns {number}\n */\nexport function createNewGuid(): string {\n    const currentTimestamp = Date.now();\n    const baseRand = getRandomUint32() * 0x400 + (getRandomUint32() & 0x3ff);\n\n    // Result byte array\n    const bytes = new Uint8Array(16);\n    // A 12-bit `rand_a` field value\n    const randA = Math.trunc(baseRand / 2 ** 30);\n    // The higher 30 bits of 62-bit `rand_b` field value\n    const randBHi = baseRand & (2 ** 30 - 1);\n    // The lower 32 bits of 62-bit `rand_b` field value\n    const randBLo = getRandomUint32();\n\n    bytes[0] = currentTimestamp / 2 ** 40;\n    bytes[1] = currentTimestamp / 2 ** 32;\n    bytes[2] = currentTimestamp / 2 ** 24;\n    bytes[3] = currentTimestamp / 2 ** 16;\n    bytes[4] = currentTimestamp / 2 ** 8;\n    bytes[5] = currentTimestamp;\n    bytes[6] = 0x70 | (randA >>> 8);\n    bytes[7] = randA;\n    bytes[8] = 0x80 | (randBHi >>> 24);\n    bytes[9] = randBHi >>> 16;\n    bytes[10] = randBHi >>> 8;\n    bytes[11] = randBHi;\n    bytes[12] = randBLo >>> 24;\n    bytes[13] = randBLo >>> 16;\n    bytes[14] = randBLo >>> 8;\n    bytes[15] = randBLo;\n\n    let text = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n        text += UUID_CHARS.charAt(bytes[i] >>> 4);\n        text += UUID_CHARS.charAt(bytes[i] & 0xf);\n        if (i === 3 || i === 5 || i === 7 || i === 9) {\n            text += \"-\";\n        }\n    }\n    return text;\n}\n\n/**\n * Generates a keypair based on current keygen algorithm config.\n * @param extractable\n * @param usages\n */\nexport async function generateKeyPair(\n    extractable: boolean,\n    usages: Array<KeyUsage>\n): Promise<CryptoKeyPair> {\n    return window.crypto.subtle.generateKey(\n        keygenAlgorithmOptions,\n        extractable,\n        usages\n    ) as Promise<CryptoKeyPair>;\n}\n\n/**\n * Export key as Json Web Key (JWK)\n * @param key\n */\nexport async function exportJwk(key: CryptoKey): Promise<JsonWebKey> {\n    return window.crypto.subtle.exportKey(\n        KEY_FORMAT_JWK,\n        key\n    ) as Promise<JsonWebKey>;\n}\n\n/**\n * Imports key as Json Web Key (JWK), can set extractable and usages.\n * @param key\n * @param extractable\n * @param usages\n */\nexport async function importJwk(\n    key: JsonWebKey,\n    extractable: boolean,\n    usages: Array<KeyUsage>\n): Promise<CryptoKey> {\n    return window.crypto.subtle.importKey(\n        KEY_FORMAT_JWK,\n        key,\n        keygenAlgorithmOptions,\n        extractable,\n        usages\n    ) as Promise<CryptoKey>;\n}\n\n/**\n * Signs given data with given key\n * @param key\n * @param data\n */\nexport async function sign(\n    key: CryptoKey,\n    data: ArrayBuffer\n): Promise<ArrayBuffer> {\n    return window.crypto.subtle.sign(\n        keygenAlgorithmOptions,\n        key,\n        data\n    ) as Promise<ArrayBuffer>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}