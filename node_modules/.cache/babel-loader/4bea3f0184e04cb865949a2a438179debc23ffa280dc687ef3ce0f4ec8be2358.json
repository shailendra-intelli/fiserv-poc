{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { PerformanceEventStatus } from './PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass StubPerformanceMeasurement {\n  startMeasurement() {\n    return;\n  }\n  endMeasurement() {\n    return;\n  }\n  flushMeasurement() {\n    return null;\n  }\n}\nclass StubPerformanceClient {\n  generateId() {\n    return \"callback-id\";\n  }\n  startMeasurement(measureName, correlationId) {\n    return {\n      end: () => null,\n      discard: () => {},\n      add: () => {},\n      increment: () => {},\n      event: {\n        eventId: this.generateId(),\n        status: PerformanceEventStatus.InProgress,\n        authority: \"\",\n        libraryName: \"\",\n        libraryVersion: \"\",\n        clientId: \"\",\n        name: measureName,\n        startTimeMs: Date.now(),\n        correlationId: correlationId || \"\"\n      },\n      measurement: new StubPerformanceMeasurement()\n    };\n  }\n  startPerformanceMeasurement() {\n    return new StubPerformanceMeasurement();\n  }\n  calculateQueuedTime() {\n    return 0;\n  }\n  addQueueMeasurement() {\n    return;\n  }\n  setPreQueueTime() {\n    return;\n  }\n  endMeasurement() {\n    return null;\n  }\n  discardMeasurements() {\n    return;\n  }\n  removePerformanceCallback() {\n    return true;\n  }\n  addPerformanceCallback() {\n    return \"\";\n  }\n  emitEvents() {\n    return;\n  }\n  addFields() {\n    return;\n  }\n  incrementFields() {\n    return;\n  }\n  cacheEventByCorrelationId() {\n    return;\n  }\n}\nexport { StubPerformanceClient, StubPerformanceMeasurement };","map":{"version":3,"names":["StubPerformanceMeasurement","startMeasurement","endMeasurement","flushMeasurement","StubPerformanceClient","generateId","measureName","correlationId","end","discard"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\telemetry\\performance\\StubPerformanceClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    IPerformanceClient,\n    InProgressPerformanceEvent,\n} from \"./IPerformanceClient\";\nimport { IPerformanceMeasurement } from \"./IPerformanceMeasurement\";\nimport { PerformanceEvent, PerformanceEventStatus } from \"./PerformanceEvent\";\n\nexport class StubPerformanceMeasurement implements IPerformanceMeasurement {\n    startMeasurement(): void {\n        return;\n    }\n    endMeasurement(): void {\n        return;\n    }\n    flushMeasurement(): number | null {\n        return null;\n    }\n}\n\nexport class StubPerformanceClient implements IPerformanceClient {\n    generateId(): string {\n        return \"callback-id\";\n    }\n\n    startMeasurement(\n        measureName: string,\n        correlationId?: string | undefined\n    ): InProgressPerformanceEvent {\n        return {\n            end: () => null,\n            discard: () => {},\n            add: () => {},\n            increment: () => {},\n            event: {\n                eventId: this.generateId(),\n                status: PerformanceEventStatus.InProgress,\n                authority: \"\",\n                libraryName: \"\",\n                libraryVersion: \"\",\n                clientId: \"\",\n                name: measureName,\n                startTimeMs: Date.now(),\n                correlationId: correlationId || \"\",\n            },\n            measurement: new StubPerformanceMeasurement(),\n        };\n    }\n\n    startPerformanceMeasurement(): IPerformanceMeasurement {\n        return new StubPerformanceMeasurement();\n    }\n\n    calculateQueuedTime(): number {\n        return 0;\n    }\n\n    addQueueMeasurement(): void {\n        return;\n    }\n\n    setPreQueueTime(): void {\n        return;\n    }\n\n    endMeasurement(): PerformanceEvent | null {\n        return null;\n    }\n\n    discardMeasurements(): void {\n        return;\n    }\n\n    removePerformanceCallback(): boolean {\n        return true;\n    }\n\n    addPerformanceCallback(): string {\n        return \"\";\n    }\n\n    emitEvents(): void {\n        return;\n    }\n\n    addFields(): void {\n        return;\n    }\n\n    incrementFields(): void {\n        return;\n    }\n\n    cacheEventByCorrelationId(): void {\n        return;\n    }\n}\n"],"mappings":";;;;;AAKA;AAIA;AACA;AAEA;AAII,MAAAA,0BAAsB;EAGtBC,gBAAgBA,CAAA;IAGnB;EAED;EACIC,cAAcA,CAAA,EAAM;IAIpB;EAwBA;EAIAC,iBAAA,EAAmB;IAInB;EAIA;;AAQA,MAAAC,qBAA2B;EAI3BC,WAAA;IAIA;EAIA;EAIAJ,gBAAiBA,CAAAK,WAAA,EAAAC,aAAA;IAIjB;MAIAC,GAAA,EAAAA,CAAA;MAGHC,OAAA,EAAAA,CAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}