{"ast":null,"code":"/*! @azure/msal-common v14.7.0 2024-02-07 */\n'use strict';\n\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { hashNotDeserialized } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Parses hash string from given string. Returns empty string if no hash symbol is found.\n * @param hashString\n */\nfunction stripLeadingHashOrQuery(responseString) {\n  if (responseString.startsWith(\"#/\")) {\n    return responseString.substring(2);\n  } else if (responseString.startsWith(\"#\") || responseString.startsWith(\"?\")) {\n    return responseString.substring(1);\n  }\n  return responseString;\n}\n/**\n * Returns URL hash as server auth code response object.\n */\nfunction getDeserializedResponse(responseString) {\n  // Check if given hash is empty\n  if (!responseString || responseString.indexOf(\"=\") < 0) {\n    return null;\n  }\n  try {\n    // Strip the # or ? symbol if present\n    const normalizedResponse = stripLeadingHashOrQuery(responseString);\n    // If # symbol was not present, above will return empty string, so give original hash value\n    const deserializedHash = Object.fromEntries(new URLSearchParams(normalizedResponse));\n    // Check for known response properties\n    if (deserializedHash.code || deserializedHash.error || deserializedHash.error_description || deserializedHash.state) {\n      return deserializedHash;\n    }\n  } catch (e) {\n    throw createClientAuthError(hashNotDeserialized);\n  }\n  return null;\n}\nexport { getDeserializedResponse, stripLeadingHashOrQuery };","map":{"version":3,"names":["stripLeadingHashOrQuery","responseString","startsWith","substring","getDeserializedResponse","indexOf","normalizedResponse","deserializedHash","Object","fromEntries","URLSearchParams","code","error","error_description","state","e","createClientAuthError","hashNotDeserialized"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\utils\\UrlUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError\";\n\n/**\n * Parses hash string from given string. Returns empty string if no hash symbol is found.\n * @param hashString\n */\nexport function stripLeadingHashOrQuery(responseString: string): string {\n    if (responseString.startsWith(\"#/\")) {\n        return responseString.substring(2);\n    } else if (\n        responseString.startsWith(\"#\") ||\n        responseString.startsWith(\"?\")\n    ) {\n        return responseString.substring(1);\n    }\n\n    return responseString;\n}\n\n/**\n * Returns URL hash as server auth code response object.\n */\nexport function getDeserializedResponse(\n    responseString: string\n): ServerAuthorizationCodeResponse | null {\n    // Check if given hash is empty\n    if (!responseString || responseString.indexOf(\"=\") < 0) {\n        return null;\n    }\n    try {\n        // Strip the # or ? symbol if present\n        const normalizedResponse = stripLeadingHashOrQuery(responseString);\n        // If # symbol was not present, above will return empty string, so give original hash value\n        const deserializedHash: ServerAuthorizationCodeResponse =\n            Object.fromEntries(new URLSearchParams(normalizedResponse));\n\n        // Check for known response properties\n        if (\n            deserializedHash.code ||\n            deserializedHash.error ||\n            deserializedHash.error_description ||\n            deserializedHash.state\n        ) {\n            return deserializedHash;\n        }\n    } catch (e) {\n        throw createClientAuthError(ClientAuthErrorCodes.hashNotDeserialized);\n    }\n\n    return null;\n}\n"],"mappings":";;;;;;AAAA;;;AAGG;AAQH;;;AAGG;AACG,SAAUA,uBAAuBA,CAACC,cAAsB;EAC1D,IAAIA,cAAc,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE;IACjC,OAAOD,cAAc,CAACE,SAAS,CAAC,CAAC,CAAC;EACrC,OAAM,IACHF,cAAc,CAACC,UAAU,CAAC,GAAG,CAAC,IAC9BD,cAAc,CAACC,UAAU,CAAC,GAAG,CAAC,EAChC;IACE,OAAOD,cAAc,CAACE,SAAS,CAAC,CAAC,CAAC;EACrC;EAED,OAAOF,cAAc;AACzB;AAEA;;AAEG;AACG,SAAUG,uBAAuBA,CACnCH,cAAsB;;EAGtB,IAAI,CAACA,cAAc,IAAIA,cAAc,CAACI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IACpD,OAAO,IAAI;EACd;EACD,IAAI;;IAEA,MAAMC,kBAAkB,GAAGN,uBAAuB,CAACC,cAAc,CAAC;;IAElE,MAAMM,gBAAgB,GAClBC,MAAM,CAACC,WAAW,CAAC,IAAIC,eAAe,CAACJ,kBAAkB,CAAC,CAAC;;IAG/D,IACIC,gBAAgB,CAACI,IAAI,IACrBJ,gBAAgB,CAACK,KAAK,IACtBL,gBAAgB,CAACM,iBAAiB,IAClCN,gBAAgB,CAACO,KAAK,EACxB;MACE,OAAOP,gBAAgB;IAC1B;EACJ,EAAC,OAAOQ,CAAC,EAAE;IACR,MAAMC,qBAAqB,CAACC,mBAAwC,CAAC;EACxE;EAED,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}