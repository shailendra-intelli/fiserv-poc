{"ast":null,"code":"/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\n *\n * @export\n * @enum {number}\n */\nconst PerformanceEvents = {\n  /**\n   * acquireTokenByCode API (msal-browser and msal-node).\n   * Used to acquire tokens by trading an authorization code against the token endpoint.\n   */\n  AcquireTokenByCode: \"acquireTokenByCode\",\n  /**\n   * acquireTokenByRefreshToken API (msal-browser and msal-node).\n   * Used to renew an access token using a refresh token against the token endpoint.\n   */\n  AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\n  /**\n   * acquireTokenSilent API (msal-browser and msal-node).\n   * Used to silently acquire a new access token (from the cache or the network).\n   */\n  AcquireTokenSilent: \"acquireTokenSilent\",\n  /**\n   * acquireTokenSilentAsync (msal-browser).\n   * Internal API for acquireTokenSilent.\n   */\n  AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\n  /**\n   * acquireTokenPopup (msal-browser).\n   * Used to acquire a new access token interactively through pop ups\n   */\n  AcquireTokenPopup: \"acquireTokenPopup\",\n  /**\n   * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\n   * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\n   */\n  CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\n  /**\n   * signJwt API in CryptoOpts class (msal-browser).\n   * Used to signed a pop token.\n   */\n  CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\n  /**\n   * acquireToken API in the SilentCacheClient class (msal-browser).\n   * Used to read access tokens from the cache.\n   */\n  SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\n  /**\n   * acquireToken API in the SilentIframeClient class (msal-browser).\n   * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\n   */\n  SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\n  /**\n   * acquireToken API in SilentRereshClient (msal-browser).\n   * Used to acquire a new set of tokens from the token endpoint using a refresh token.\n   */\n  SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\n  /**\n   * ssoSilent API (msal-browser).\n   * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\n   */\n  SsoSilent: \"ssoSilent\",\n  /**\n   * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\n   * Used to load authority metadata for a request.\n   */\n  StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\",\n  /**\n   * acquireToken APIs in msal-browser.\n   * Used to make an /authorize endpoint call with native brokering enabled.\n   */\n  FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\n  /**\n   * acquireToken API in NativeInteractionClient class (msal-browser).\n   * Used to acquire a token from Native component when native brokering is enabled.\n   */\n  NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\n  /**\n   * Time spent creating default headers for requests to token endpoint\n   */\n  BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\n  /**\n   * Time spent sending/waiting for the response of a request to the token endpoint\n   */\n  RefreshTokenClientExecutePostToTokenEndpoint: \"refreshTokenClientExecutePostToTokenEndpoint\",\n  AuthorizationCodeClientExecutePostToTokenEndpoint: \"authorizationCodeClientExecutePostToTokenEndpoint\",\n  /**\n   * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\n   */\n  BrokerHandhshake: \"brokerHandshake\",\n  /**\n   * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\n   */\n  AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\n  /**\n   * Time taken for token acquisition by broker\n   */\n  AcquireTokenByBroker: \"acquireTokenByBroker\",\n  /**\n   * Time spent on the network for refresh token acquisition\n   */\n  RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\",\n  /**\n   * Time taken for acquiring refresh token , records RT size\n   */\n  RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\n  /**\n   * Time taken for acquiring cached refresh token\n   */\n  RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\n  /**\n   * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\n   */\n  RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\",\n  /**\n   * Helper function to create token request body in RefreshTokenClient (msal-common).\n   */\n  RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\",\n  /**\n   * acquireTokenFromCache (msal-browser).\n   * Internal API for acquiring token from cache\n   */\n  AcquireTokenFromCache: \"acquireTokenFromCache\",\n  SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\n  SilentFlowClientGenerateResultFromCacheRecord: \"silentFlowClientGenerateResultFromCacheRecord\",\n  /**\n   * acquireTokenBySilentIframe (msal-browser).\n   * Internal API for acquiring token by silent Iframe\n   */\n  AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\n  /**\n   * Internal API for initializing base request in BaseInteractionClient (msal-browser)\n   */\n  InitializeBaseRequest: \"initializeBaseRequest\",\n  /**\n   * Internal API for initializing silent request in SilentCacheClient (msal-browser)\n   */\n  InitializeSilentRequest: \"initializeSilentRequest\",\n  InitializeClientApplication: \"initializeClientApplication\",\n  /**\n   * Helper function in SilentIframeClient class (msal-browser).\n   */\n  SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\n  /**\n   * SilentHandler\n   */\n  SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\n  SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\n  SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\n  SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\n  /**\n   * Helper functions in StandardInteractionClient class (msal-browser)\n   */\n  StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\",\n  StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\",\n  StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\",\n  StandardInteractionClientInitializeAuthorizationCodeRequest: \"standardInteractionClientInitializeAuthorizationCodeRequest\",\n  /**\n   * getAuthCodeUrl API (msal-browser and msal-node).\n   */\n  GetAuthCodeUrl: \"getAuthCodeUrl\",\n  /**\n   * Functions from InteractionHandler (msal-browser)\n   */\n  HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\n  HandleCodeResponse: \"handleCodeResponse\",\n  UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\n  /**\n   * APIs in Authorization Code Client (msal-common)\n   */\n  AuthClientAcquireToken: \"authClientAcquireToken\",\n  AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\n  AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\n  AuthClientCreateQueryString: \"authClientCreateQueryString\",\n  /**\n   * Generate functions in PopTokenGenerator (msal-common)\n   */\n  PopTokenGenerateCnf: \"popTokenGenerateCnf\",\n  PopTokenGenerateKid: \"popTokenGenerateKid\",\n  /**\n   * handleServerTokenResponse API in ResponseHandler (msal-common)\n   */\n  HandleServerTokenResponse: \"handleServerTokenResponse\",\n  DeserializeResponse: \"deserializeResponse\",\n  /**\n   * Authority functions\n   */\n  AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\",\n  AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\n  AuthorityResolveEndpointsFromLocalSources: \"authorityResolveEndpointsFromLocalSources\",\n  AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\",\n  AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\",\n  AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\",\n  AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\n  AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\",\n  /**\n   * Region Discovery functions\n   */\n  RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\n  RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\n  RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\n  AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\n  GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\n  GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\n  HandleRedirectPromiseMeasurement: \"handleRedirectPromiseMeasurement\",\n  UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\",\n  UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\n  NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\n  NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\n  RemoveHiddenIframe: \"removeHiddenIframe\",\n  /**\n   * Cache operations\n   */\n  ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\n  CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\n  /**\n   * Crypto Operations\n   */\n  GeneratePkceCodes: \"generatePkceCodes\",\n  GenerateCodeVerifier: \"generateCodeVerifier\",\n  GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\n  Sha256Digest: \"sha256Digest\",\n  GetRandomValues: \"getRandomValues\"\n};\n/**\n * State of the performance event.\n *\n * @export\n * @enum {number}\n */\nconst PerformanceEventStatus = {\n  NotStarted: 0,\n  InProgress: 1,\n  Completed: 2\n};\nconst IntFields = new Set([\"accessTokenSize\", \"durationMs\", \"idTokenSize\", \"matsSilentStatus\", \"matsHttpStatus\", \"refreshTokenSize\", \"queuedTimeMs\", \"startTimeMs\", \"status\", \"multiMatchedAT\", \"multiMatchedID\", \"multiMatchedRT\"]);\nexport { IntFields, PerformanceEventStatus, PerformanceEvents };","map":{"version":3,"names":["PerformanceEvents","AcquireTokenByCode","AcquireTokenByRefreshToken","AcquireTokenSilent","AcquireTokenSilentAsync","AcquireTokenPopup","CryptoOptsGetPublicKeyThumbprint","CryptoOptsSignJwt","SilentCacheClientAcquireToken","SilentIframeClientAcquireToken","SilentRefreshClientAcquireToken","SsoSilent","StandardInteractionClientGetDiscoveredAuthority","FetchAccountIdWithNativeBroker","RefreshTokenClientExecutePostToTokenEndpoint","RefreshTokenClientCreateTokenRequestBody","SilentFlowClientGenerateResultFromCacheRecord","InitializeSilentRequest","SilentHandlerInitiateAuthRequest","SilentHandlerLoadFrame","StandardInteractionClientCreateAuthCodeClient","StandardInteractionClientInitializeAuthorizationRequest","HandleCodeResponse","AuthClientAcquireToken","AuthClientCreateTokenRequestBody","PopTokenGenerateCnf","HandleServerTokenResponse","AuthorityUpdateCloudDiscoveryMetadata","AuthorityUpdateEndpointMetadata","UsernamePasswordClientAcquireToken","NativeGenerateAuthResult","ClearTokensAndKeysWithClaims","GenerateCodeVerifier","GenerateCodeChallengeFromVerifier","Sha256Digest","NotStarted","InProgress","Completed","IntFields","Set"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\telemetry\\performance\\PerformanceEvent.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\n *\n * @export\n * @enum {number}\n */\nexport const PerformanceEvents = {\n    /**\n     * acquireTokenByCode API (msal-browser and msal-node).\n     * Used to acquire tokens by trading an authorization code against the token endpoint.\n     */\n    AcquireTokenByCode: \"acquireTokenByCode\",\n\n    /**\n     * acquireTokenByRefreshToken API (msal-browser and msal-node).\n     * Used to renew an access token using a refresh token against the token endpoint.\n     */\n    AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\n\n    /**\n     * acquireTokenSilent API (msal-browser and msal-node).\n     * Used to silently acquire a new access token (from the cache or the network).\n     */\n    AcquireTokenSilent: \"acquireTokenSilent\",\n\n    /**\n     * acquireTokenSilentAsync (msal-browser).\n     * Internal API for acquireTokenSilent.\n     */\n    AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\n\n    /**\n     * acquireTokenPopup (msal-browser).\n     * Used to acquire a new access token interactively through pop ups\n     */\n    AcquireTokenPopup: \"acquireTokenPopup\",\n\n    /**\n     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\n     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\n     */\n    CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\n\n    /**\n     * signJwt API in CryptoOpts class (msal-browser).\n     * Used to signed a pop token.\n     */\n    CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\n\n    /**\n     * acquireToken API in the SilentCacheClient class (msal-browser).\n     * Used to read access tokens from the cache.\n     */\n    SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\n\n    /**\n     * acquireToken API in the SilentIframeClient class (msal-browser).\n     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\n     */\n    SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\n\n    /**\n     * acquireToken API in SilentRereshClient (msal-browser).\n     * Used to acquire a new set of tokens from the token endpoint using a refresh token.\n     */\n    SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\n\n    /**\n     * ssoSilent API (msal-browser).\n     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\n     */\n    SsoSilent: \"ssoSilent\",\n\n    /**\n     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\n     * Used to load authority metadata for a request.\n     */\n    StandardInteractionClientGetDiscoveredAuthority:\n        \"standardInteractionClientGetDiscoveredAuthority\",\n\n    /**\n     * acquireToken APIs in msal-browser.\n     * Used to make an /authorize endpoint call with native brokering enabled.\n     */\n    FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\n\n    /**\n     * acquireToken API in NativeInteractionClient class (msal-browser).\n     * Used to acquire a token from Native component when native brokering is enabled.\n     */\n    NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\n    /**\n     * Time spent creating default headers for requests to token endpoint\n     */\n    BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\n    /**\n     * Time spent sending/waiting for the response of a request to the token endpoint\n     */\n    RefreshTokenClientExecutePostToTokenEndpoint:\n        \"refreshTokenClientExecutePostToTokenEndpoint\",\n    AuthorizationCodeClientExecutePostToTokenEndpoint:\n        \"authorizationCodeClientExecutePostToTokenEndpoint\",\n    /**\n     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\n     */\n    BrokerHandhshake: \"brokerHandshake\",\n    /**\n     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\n     */\n    AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\n    /**\n     * Time taken for token acquisition by broker\n     */\n    AcquireTokenByBroker: \"acquireTokenByBroker\",\n\n    /**\n     * Time spent on the network for refresh token acquisition\n     */\n    RefreshTokenClientExecuteTokenRequest:\n        \"refreshTokenClientExecuteTokenRequest\",\n\n    /**\n     * Time taken for acquiring refresh token , records RT size\n     */\n    RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\n\n    /**\n     * Time taken for acquiring cached refresh token\n     */\n    RefreshTokenClientAcquireTokenWithCachedRefreshToken:\n        \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\n\n    /**\n     * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\n     */\n    RefreshTokenClientAcquireTokenByRefreshToken:\n        \"refreshTokenClientAcquireTokenByRefreshToken\",\n\n    /**\n     * Helper function to create token request body in RefreshTokenClient (msal-common).\n     */\n    RefreshTokenClientCreateTokenRequestBody:\n        \"refreshTokenClientCreateTokenRequestBody\",\n\n    /**\n     * acquireTokenFromCache (msal-browser).\n     * Internal API for acquiring token from cache\n     */\n    AcquireTokenFromCache: \"acquireTokenFromCache\",\n    SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\n    SilentFlowClientGenerateResultFromCacheRecord:\n        \"silentFlowClientGenerateResultFromCacheRecord\",\n\n    /**\n     * acquireTokenBySilentIframe (msal-browser).\n     * Internal API for acquiring token by silent Iframe\n     */\n    AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\n\n    /**\n     * Internal API for initializing base request in BaseInteractionClient (msal-browser)\n     */\n    InitializeBaseRequest: \"initializeBaseRequest\",\n\n    /**\n     * Internal API for initializing silent request in SilentCacheClient (msal-browser)\n     */\n    InitializeSilentRequest: \"initializeSilentRequest\",\n\n    InitializeClientApplication: \"initializeClientApplication\",\n\n    /**\n     * Helper function in SilentIframeClient class (msal-browser).\n     */\n    SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\n\n    /**\n     * SilentHandler\n     */\n    SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\n    SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\n    SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\n    SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\n\n    /**\n     * Helper functions in StandardInteractionClient class (msal-browser)\n     */\n    StandardInteractionClientCreateAuthCodeClient:\n        \"standardInteractionClientCreateAuthCodeClient\",\n    StandardInteractionClientGetClientConfiguration:\n        \"standardInteractionClientGetClientConfiguration\",\n    StandardInteractionClientInitializeAuthorizationRequest:\n        \"standardInteractionClientInitializeAuthorizationRequest\",\n    StandardInteractionClientInitializeAuthorizationCodeRequest:\n        \"standardInteractionClientInitializeAuthorizationCodeRequest\",\n\n    /**\n     * getAuthCodeUrl API (msal-browser and msal-node).\n     */\n    GetAuthCodeUrl: \"getAuthCodeUrl\",\n\n    /**\n     * Functions from InteractionHandler (msal-browser)\n     */\n    HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\n    HandleCodeResponse: \"handleCodeResponse\",\n    UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\n\n    /**\n     * APIs in Authorization Code Client (msal-common)\n     */\n    AuthClientAcquireToken: \"authClientAcquireToken\",\n    AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\n    AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\n    AuthClientCreateQueryString: \"authClientCreateQueryString\",\n\n    /**\n     * Generate functions in PopTokenGenerator (msal-common)\n     */\n    PopTokenGenerateCnf: \"popTokenGenerateCnf\",\n    PopTokenGenerateKid: \"popTokenGenerateKid\",\n\n    /**\n     * handleServerTokenResponse API in ResponseHandler (msal-common)\n     */\n    HandleServerTokenResponse: \"handleServerTokenResponse\",\n    DeserializeResponse: \"deserializeResponse\",\n\n    /**\n     * Authority functions\n     */\n    AuthorityFactoryCreateDiscoveredInstance:\n        \"authorityFactoryCreateDiscoveredInstance\",\n    AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\n    AuthorityResolveEndpointsFromLocalSources:\n        \"authorityResolveEndpointsFromLocalSources\",\n    AuthorityGetCloudDiscoveryMetadataFromNetwork:\n        \"authorityGetCloudDiscoveryMetadataFromNetwork\",\n    AuthorityUpdateCloudDiscoveryMetadata:\n        \"authorityUpdateCloudDiscoveryMetadata\",\n    AuthorityGetEndpointMetadataFromNetwork:\n        \"authorityGetEndpointMetadataFromNetwork\",\n    AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\n    AuthorityUpdateMetadataWithRegionalInformation:\n        \"authorityUpdateMetadataWithRegionalInformation\",\n\n    /**\n     * Region Discovery functions\n     */\n    RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\n    RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\n    RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\n\n    AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\n\n    GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\n    GetCloudDiscoveryMetadataFromNetworkMeasurement:\n        \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\n\n    HandleRedirectPromiseMeasurement: \"handleRedirectPromiseMeasurement\",\n\n    UpdateCloudDiscoveryMetadataMeasurement:\n        \"updateCloudDiscoveryMetadataMeasurement\",\n\n    UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\n\n    NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\n\n    NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\n\n    RemoveHiddenIframe: \"removeHiddenIframe\",\n\n    /**\n     * Cache operations\n     */\n    ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\n    CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\n\n    /**\n     * Crypto Operations\n     */\n    GeneratePkceCodes: \"generatePkceCodes\",\n    GenerateCodeVerifier: \"generateCodeVerifier\",\n    GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\n    Sha256Digest: \"sha256Digest\",\n    GetRandomValues: \"getRandomValues\",\n} as const;\nexport type PerformanceEvents =\n    (typeof PerformanceEvents)[keyof typeof PerformanceEvents];\n\n/**\n * State of the performance event.\n *\n * @export\n * @enum {number}\n */\nexport const PerformanceEventStatus = {\n    NotStarted: 0,\n    InProgress: 1,\n    Completed: 2,\n} as const;\nexport type PerformanceEventStatus =\n    (typeof PerformanceEventStatus)[keyof typeof PerformanceEventStatus];\n\nexport type SubMeasurement = {\n    name: string;\n    startTimeMs: number;\n};\n\n/**\n * Performance measurement taken by the library, including metadata about the request and application.\n *\n * @export\n * @typedef {PerformanceEvent}\n */\nexport type PerformanceEvent = {\n    /**\n     * Unique id for the event\n     *\n     * @type {string}\n     */\n    eventId: string;\n\n    /**\n     * State of the perforance measure.\n     *\n     * @type {PerformanceEventStatus}\n     */\n    status: PerformanceEventStatus;\n\n    /**\n     * Login authority used for the request\n     *\n     * @type {string}\n     */\n    authority: string;\n\n    /**\n     * Client id for the application\n     *\n     * @type {string}\n     */\n    clientId: string;\n\n    /**\n     * Correlation ID used for the request\n     *\n     * @type {string}\n     */\n    correlationId: string;\n\n    /**\n     * End-to-end duration in milliseconds.\n     * @date 3/22/2022 - 3:40:05 PM\n     *\n     * @type {number}\n     */\n    durationMs?: number;\n\n    /**\n     * Visibility of the page when the event completed.\n     * Read from: https://developer.mozilla.org/docs/Web/API/Page_Visibility_API\n     *\n     * @type {?(string | null)}\n     */\n    endPageVisibility?: string | null;\n\n    /**\n     * Whether the result was retrieved from the cache.\n     *\n     * @type {(boolean | null)}\n     */\n    fromCache?: boolean | null;\n\n    /**\n     * Event name (usually in the form of classNameFunctionName)\n     *\n     * @type {string}\n     */\n    name: string;\n\n    /**\n     * Visibility of the page when the event completed.\n     * Read from: https://developer.mozilla.org/docs/Web/API/Page_Visibility_API\n     *\n     * @type {?(string | null)}\n     */\n    startPageVisibility?: string | null;\n\n    /**\n     * Unix millisecond timestamp when the event was initiated.\n     *\n     * @type {number}\n     */\n    startTimeMs: number;\n\n    /**\n     * Whether or the operation completed successfully.\n     *\n     * @type {(boolean | null)}\n     */\n    success?: boolean | null;\n\n    /**\n     * Add specific error code in case of failure\n     *\n     * @type {string}\n     */\n    errorCode?: string;\n\n    /**\n     * Add specific sub error code in case of failure\n     *\n     * @type {string}\n     */\n    subErrorCode?: string;\n\n    /**\n     * Name of the library used for the operation.\n     *\n     * @type {string}\n     */\n    libraryName: string;\n\n    /**\n     * Version of the library used for the operation.\n     *\n     * @type {string}\n     */\n    libraryVersion: string;\n\n    /**\n     * Whether the response is from a native component (e.g., WAM)\n     *\n     * @type {?boolean}\n     */\n    isNativeBroker?: boolean;\n\n    /**\n     * Request ID returned from the response\n     *\n     * @type {?string}\n     */\n    requestId?: string;\n\n    /**\n     * Cache lookup policy\n     *\n     * @type {?number}\n     */\n    cacheLookupPolicy?: number | undefined;\n\n    /**\n     * Cache Outcome\n     * @type {?number}\n     */\n    cacheOutcome?: number;\n\n    /**\n     * Amount of time spent in the JS queue in milliseconds.\n     *\n     * @type {?number}\n     */\n    queuedTimeMs?: number;\n\n    /**\n     * Sub-measurements for internal use. To be deleted before flushing.\n     */\n    incompleteSubMeasurements?: Map<string, SubMeasurement>;\n\n    visibilityChangeCount?: number;\n    incompleteSubsCount?: number;\n    /**\n     * Amount of times queued in the JS event queue.\n     *\n     * @type {?number}\n     */\n    queuedCount?: number;\n    /**\n     * Amount of manually completed queue events.\n     *\n     * @type {?number}\n     */\n    queuedManuallyCompletedCount?: number;\n\n    /**\n     * Size of the id token\n     *\n     * @type {number}\n     */\n    idTokenSize?: number;\n\n    /**\n     *\n     * Size of the access token\n     *\n     * @type {number}\n     */\n\n    accessTokenSize?: number;\n\n    /**\n     *\n     * Size of the refresh token\n     *\n     * @type {number}\n     */\n\n    refreshTokenSize?: number | undefined;\n\n    /**\n     * Application name as specified by the app.\n     *\n     * @type {?string}\n     */\n    appName?: string;\n\n    /**\n     * Application version as specified by the app.\n     *\n     * @type {?string}\n     */\n    appVersion?: string;\n\n    /**\n     * The following are fields that may be emitted in native broker scenarios\n     */\n    extensionId?: string;\n    extensionVersion?: string;\n    matsBrokerVersion?: string;\n    matsAccountJoinOnStart?: string;\n    matsAccountJoinOnEnd?: string;\n    matsDeviceJoin?: string;\n    matsPromptBehavior?: string;\n    matsApiErrorCode?: number;\n    matsUiVisible?: boolean;\n    matsSilentCode?: number;\n    matsSilentBiSubCode?: number;\n    matsSilentMessage?: string;\n    matsSilentStatus?: number;\n    matsHttpStatus?: number;\n    matsHttpEventCount?: number;\n    httpVerToken?: string;\n\n    /**\n     * Native broker fields\n     */\n    allowNativeBroker?: boolean;\n    extensionInstalled?: boolean;\n    extensionHandshakeTimeoutMs?: number;\n    extensionHandshakeTimedOut?: boolean;\n\n    /**\n     * Nested App Auth Fields\n     */\n    nestedAppAuthRequest?: boolean;\n\n    /**\n     * Multiple matched access/id/refresh tokens in the cache\n     */\n    multiMatchedAT?: number;\n    multiMatchedID?: number;\n    multiMatchedRT?: number;\n};\n\nexport const IntFields: ReadonlySet<string> = new Set([\n    \"accessTokenSize\",\n    \"durationMs\",\n    \"idTokenSize\",\n    \"matsSilentStatus\",\n    \"matsHttpStatus\",\n    \"refreshTokenSize\",\n    \"queuedTimeMs\",\n    \"startTimeMs\",\n    \"status\",\n    \"multiMatchedAT\",\n    \"multiMatchedID\",\n    \"multiMatchedRT\",\n]);\n"],"mappings":";;;AAKA;;;;;AAKG;AACH;AACI;;;AAGG,MAAAA,iBAAA;;AAGH;;;EAGGC,kBAAA;;AAGH;;;EAGGC,0BAAA;;AAGH;;;EAGGC,kBAAA;;AAGH;;;EAGGC,uBAAA;;AAGH;;;EAGGC,iBAAA;;AAGH;;;EAGGC,gCAAA;;AAGH;;;EAGGC,iBAAA;;AAGH;;;EAGGC,6BAAA;;AAGH;;;EAGGC,8BAAA;;AAGH;;;EAGGC,+BAAA;;AAGH;;;EAGGC,SAAA;;AAIH;;;EAGGC,+CAAA;;AAGH;;;EAGGC,8BAAA;;AAEH;;AAEG;;EAEH;;AAEG;;;AAKH;;EAEGC,4CAAA;;EAEH;;AAEG;;EAEH;;AAEG;;EAGH;;AAEG;;EAIH;;AAEG;;EAGH;;AAEG;;EAIH;;AAEG;;EAIH;;AAEG;;EAIH;;;EAGGC,wCAAA;;;;AAMH;;;EAGGC,6CAAA;;AAGH;;AAEG;;EAGH;;AAEG;;;AAKH;;EAEGC,uBAAA;;EAGH;;AAEG;;;;;EAMHC,gCAAA;;EAEGC,sBAAA;;;;;EAUHC,6CAAA;;EAEGC,uDAAA;;EAGH;;AAEG;;;;AAKH;;EAEGC,kBAAA;;;;;EAMHC,sBAAA;;EAEGC,gCAAA;;;AAIH;;EAEGC,mBAAA;;;AAIH;;EAEGC,yBAAA;;;;;;;;;EAgBHC,qCAAA;;EAEGC,+BAAA;;;;;;;;;;;;;EAwBHC,kCAAA;;EAEGC,wBAAA;;;AAIH;;EAEGC,4BAAA;;;;;;EAMIC,oBAAA;EACXC,iCACY,qCAAiD;EAE7DC,YAAA;;;;;AAKG;AACH;;;;EAIWC,UAAA;EACXC,UAAY;EAGNC,SAAA;;AAES,MAAAC,SAAA,GAAS,IAAAC,GAAA,EACtB,mBAEF,c,yEAKG,gBACG,eACF,U,qDAIG"},"metadata":{},"sourceType":"module","externalDependencies":[]}