{"ast":null,"code":"/*! @azure/msal-browser v3.5.0 2023-11-07 */\n'use strict';\n\nimport { UrlString } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserConstants, InteractionType } from './BrowserConstants.mjs';\nimport { blockIframeReload, redirectInIframe, blockNestedPopups, nonBrowserEnvironment, uninitializedPublicClientApplication } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Clears hash from window url.\n */\nfunction clearHash(contentWindow) {\n  // Office.js sets history.replaceState to null\n  contentWindow.location.hash = \"\";\n  if (typeof contentWindow.history.replaceState === \"function\") {\n    // Full removes \"#\" from url\n    contentWindow.history.replaceState(null, \"\", `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\n  }\n}\n/**\n * Replaces current hash with hash from provided url\n */\nfunction replaceHash(url) {\n  const urlParts = url.split(\"#\");\n  urlParts.shift(); // Remove part before the hash\n  window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n}\n/**\n * Returns boolean of whether the current window is in an iframe or not.\n */\nfunction isInIframe() {\n  return window.parent !== window;\n}\n/**\n * Returns boolean of whether or not the current window is a popup opened by msal\n */\nfunction isInPopup() {\n  return typeof window !== \"undefined\" && !!window.opener && window.opener !== window && typeof window.name === \"string\" && window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0;\n}\n// #endregion\n/**\n * Returns current window URL as redirect uri\n */\nfunction getCurrentUri() {\n  return window.location.href.split(\"?\")[0].split(\"#\")[0];\n}\n/**\n * Gets the homepage url for the current window location.\n */\nfunction getHomepage() {\n  const currentUrl = new UrlString(window.location.href);\n  const urlComponents = currentUrl.getUrlComponents();\n  return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n}\n/**\n * Throws error if we have completed an auth and are\n * attempting another auth request inside an iframe.\n */\nfunction blockReloadInHiddenIframes() {\n  const isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\n  // return an error if called from the hidden iframe created by the msal js silent calls\n  if (isResponseHash && isInIframe()) {\n    throw createBrowserAuthError(blockIframeReload);\n  }\n}\n/**\n * Block redirect operations in iframes unless explicitly allowed\n * @param interactionType Interaction type for the request\n * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\n */\nfunction blockRedirectInIframe(interactionType, allowRedirectInIframe) {\n  const isIframedApp = isInIframe();\n  if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\n    // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n    throw createBrowserAuthError(redirectInIframe);\n  }\n}\n/**\n * Block redirectUri loaded in popup from calling AcquireToken APIs\n */\nfunction blockAcquireTokenInPopups() {\n  // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n  if (isInPopup()) {\n    throw createBrowserAuthError(blockNestedPopups);\n  }\n}\n/**\n * Throws error if token requests are made in non-browser environment\n * @param isBrowserEnvironment Flag indicating if environment is a browser.\n */\nfunction blockNonBrowserEnvironment(isBrowserEnvironment) {\n  if (!isBrowserEnvironment) {\n    throw createBrowserAuthError(nonBrowserEnvironment);\n  }\n}\n/**\n * Throws error if initialize hasn't been called\n * @param initialized\n */\nfunction blockAPICallsBeforeInitialize(initialized) {\n  if (!initialized) {\n    throw createBrowserAuthError(uninitializedPublicClientApplication);\n  }\n}\n/**\n * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request\n * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com\n * @returns\n */\nfunction preconnect(authority) {\n  const link = document.createElement(\"link\");\n  link.rel = \"preconnect\";\n  link.href = new URL(authority).origin;\n  link.crossOrigin = \"anonymous\";\n  document.head.appendChild(link);\n  // The browser will close connection if not used within a few seconds, remove element from the header after 10s\n  window.setTimeout(() => {\n    try {\n      document.head.removeChild(link);\n    } catch {}\n  }, 10000); // 10s Timeout\n}\n\nexport { blockAPICallsBeforeInitialize, blockAcquireTokenInPopups, blockNonBrowserEnvironment, blockRedirectInIframe, blockReloadInHiddenIframes, clearHash, getCurrentUri, getHomepage, isInIframe, isInPopup, preconnect, replaceHash };","map":{"version":3,"names":["contentWindow","location","hash","history","replaceState","origin","pathname","search","replaceHash","url","urlParts","shift","window","length","join","isInIframe","parent","isInPopup","opener","name","indexOf","BrowserConstants","POPUP_NAME_PREFIX","urlComponents","currentUrl","getUrlComponents","Protocol","HostNameAndPort"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\utils\\BrowserUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { UrlString } from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { InteractionType, BrowserConstants } from \"./BrowserConstants\";\n\n/**\n * Clears hash from window url.\n */\nexport function clearHash(contentWindow: Window): void {\n    // Office.js sets history.replaceState to null\n    contentWindow.location.hash = \"\";\n    if (typeof contentWindow.history.replaceState === \"function\") {\n        // Full removes \"#\" from url\n        contentWindow.history.replaceState(\n            null,\n            \"\",\n            `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`\n        );\n    }\n}\n\n/**\n * Replaces current hash with hash from provided url\n */\nexport function replaceHash(url: string): void {\n    const urlParts = url.split(\"#\");\n    urlParts.shift(); // Remove part before the hash\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n}\n\n/**\n * Returns boolean of whether the current window is in an iframe or not.\n */\nexport function isInIframe(): boolean {\n    return window.parent !== window;\n}\n\n/**\n * Returns boolean of whether or not the current window is a popup opened by msal\n */\nexport function isInPopup(): boolean {\n    return (\n        typeof window !== \"undefined\" &&\n        !!window.opener &&\n        window.opener !== window &&\n        typeof window.name === \"string\" &&\n        window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0\n    );\n}\n\n// #endregion\n\n/**\n * Returns current window URL as redirect uri\n */\nexport function getCurrentUri(): string {\n    return window.location.href.split(\"?\")[0].split(\"#\")[0];\n}\n\n/**\n * Gets the homepage url for the current window location.\n */\nexport function getHomepage(): string {\n    const currentUrl = new UrlString(window.location.href);\n    const urlComponents = currentUrl.getUrlComponents();\n    return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n}\n\n/**\n * Throws error if we have completed an auth and are\n * attempting another auth request inside an iframe.\n */\nexport function blockReloadInHiddenIframes(): void {\n    const isResponseHash = UrlString.hashContainsKnownProperties(\n        window.location.hash\n    );\n    // return an error if called from the hidden iframe created by the msal js silent calls\n    if (isResponseHash && isInIframe()) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.blockIframeReload);\n    }\n}\n\n/**\n * Block redirect operations in iframes unless explicitly allowed\n * @param interactionType Interaction type for the request\n * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\n */\nexport function blockRedirectInIframe(\n    interactionType: InteractionType,\n    allowRedirectInIframe: boolean\n): void {\n    const isIframedApp = isInIframe();\n    if (\n        interactionType === InteractionType.Redirect &&\n        isIframedApp &&\n        !allowRedirectInIframe\n    ) {\n        // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n        throw createBrowserAuthError(BrowserAuthErrorCodes.redirectInIframe);\n    }\n}\n\n/**\n * Block redirectUri loaded in popup from calling AcquireToken APIs\n */\nexport function blockAcquireTokenInPopups(): void {\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n    if (isInPopup()) {\n        throw createBrowserAuthError(BrowserAuthErrorCodes.blockNestedPopups);\n    }\n}\n\n/**\n * Throws error if token requests are made in non-browser environment\n * @param isBrowserEnvironment Flag indicating if environment is a browser.\n */\nexport function blockNonBrowserEnvironment(\n    isBrowserEnvironment: boolean\n): void {\n    if (!isBrowserEnvironment) {\n        throw createBrowserAuthError(\n            BrowserAuthErrorCodes.nonBrowserEnvironment\n        );\n    }\n}\n\n/**\n * Throws error if initialize hasn't been called\n * @param initialized\n */\nexport function blockAPICallsBeforeInitialize(initialized: boolean): void {\n    if (!initialized) {\n        throw createBrowserAuthError(\n            BrowserAuthErrorCodes.uninitializedPublicClientApplication\n        );\n    }\n}\n\n/**\n * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request\n * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com\n * @returns\n */\nexport function preconnect(authority: string): void {\n    const link = document.createElement(\"link\");\n    link.rel = \"preconnect\";\n    link.href = new URL(authority).origin;\n    link.crossOrigin = \"anonymous\";\n    document.head.appendChild(link);\n\n    // The browser will close connection if not used within a few seconds, remove element from the header after 10s\n    window.setTimeout(() => {\n        try {\n            document.head.removeChild(link);\n        } catch {}\n    }, 10000); // 10s Timeout\n}\n"],"mappings":";;;;;;;;AAUA;AAEA;;AAEG;AAgBA;AACH;AAMA;;EAEG;EACaA,aAAA,CAAAC,QAAA,CAAAC,IAAA,GAAU,EAAI;EAI9B,WAAAF,aAAA,CAAAG,OAAA,CAAAC,YAAA;;IAEGJ,aAAA,CAAAG,OAAA,CAAAC,YAAA,cAAAJ,aAAA,CAAAC,QAAA,CAAAI,MAAA,GAAAL,aAAA,CAAAC,QAAA,CAAAK,QAAA,GAAAN,aAAA,CAAAC,QAAA,CAAAM,MAAA;EACH;AAYA;;AAEG;AACH;AAIA,SAAAC,YAAAC,GAAA;;EAEGC,QAAA,CAAAC,KAAA;EACaC,MAAA,CAAAX,QAAA,CAAAC,IAAA,GAAAQ,QAAW,CAAIG,MAAA,GAAM,CAIpC,GAAAH,QAAA,CAAAI,IAAA;AAED;;;AAGG;AACa,SAAAC,WAAA;EAUhB,OAAAH,MAAA,CAAAI,MAAA,KAAAJ,MAAA;;;;AAIG;AACa,SAAAK,UAAA;EAehB,cAAAL,MAAA,oB,mBAEGA,MAAA,CAAAM,MAAA,KAAAN,MAAA,IACa,OAAAA,MAAA,CAAAO,IAAA,iBAOhBP,MAAA,CAAAO,IAAA,CAAAC,OAAA,IAAAC,gBAAA,CAAAC,iBAAA;;;AAGG;AACH;AAUA;;;AAGG;AACH;AAQA;;;;EAIG,MAAAC,aAAA,GAAAC,UAAA,CAAAC,gBAAA;EACH,UAAAF,aAAA,CAAAG,QAA2B,KAAAH,aAAiB,CAAGI,eAa9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}