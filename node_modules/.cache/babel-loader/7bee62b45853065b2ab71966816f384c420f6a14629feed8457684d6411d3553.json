{"ast":null,"code":"/*! @azure/msal-browser v3.5.0 2023-11-07 */\n'use strict';\n\nimport { Logger } from '@azure/msal-common';\nimport { buildConfiguration } from '../config/Configuration.mjs';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Base class for operating context\n * Operating contexts are contexts in which MSAL.js is being run\n * More than one operating context may be available at a time\n * It's important from a logging and telemetry point of view for us to be able to identify the operating context.\n * For example: Some operating contexts will pre-cache tokens impacting performance telemetry\n */\nclass BaseOperatingContext {\n  constructor(config) {\n    /*\n     * If loaded in an environment where window is not available,\n     * set internal flag to false so that further requests fail.\n     * This is to support server-side rendering environments.\n     */\n    this.browserEnvironment = typeof window !== \"undefined\";\n    this.config = buildConfiguration(config, this.browserEnvironment);\n    this.logger = new Logger(this.config.system.loggerOptions, name, version);\n    this.available = false;\n  }\n  /**\n   * Return the MSAL config\n   * @returns BrowserConfiguration\n   */\n  getConfig() {\n    return this.config;\n  }\n  /**\n   * Returns the MSAL Logger\n   * @returns Logger\n   */\n  getLogger() {\n    return this.logger;\n  }\n  isAvailable() {\n    return this.available;\n  }\n  isBrowserEnvironment() {\n    return this.browserEnvironment;\n  }\n}\nexport { BaseOperatingContext };","map":{"version":3,"names":["BaseOperatingContext","constructor","config","browserEnvironment","window","buildConfiguration","logger","Logger","system","loggerOptions","name","version","getConfig","getLogger"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\operatingcontext\\BaseOperatingContext.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger } from \"@azure/msal-common\";\nimport {\n    BrowserConfiguration,\n    buildConfiguration,\n    Configuration,\n} from \"../config/Configuration\";\nimport { version, name } from \"../packageMetadata\";\n\n/**\n * Base class for operating context\n * Operating contexts are contexts in which MSAL.js is being run\n * More than one operating context may be available at a time\n * It's important from a logging and telemetry point of view for us to be able to identify the operating context.\n * For example: Some operating contexts will pre-cache tokens impacting performance telemetry\n */\nexport abstract class BaseOperatingContext {\n    protected logger: Logger;\n    protected config: BrowserConfiguration;\n    protected available: boolean;\n    protected browserEnvironment: boolean;\n\n    constructor(config: Configuration) {\n        /*\n         * If loaded in an environment where window is not available,\n         * set internal flag to false so that further requests fail.\n         * This is to support server-side rendering environments.\n         */\n        this.browserEnvironment = typeof window !== \"undefined\";\n\n        this.config = buildConfiguration(config, this.browserEnvironment);\n        this.logger = new Logger(\n            this.config.system.loggerOptions,\n            name,\n            version\n        );\n        this.available = false;\n    }\n\n    /**\n     * returns the name of the module containing the API controller associated with this operating context\n     */\n    abstract getModuleName(): string;\n\n    /**\n     * returns the string identifier of this operating context\n     */\n    abstract getId(): string;\n\n    /**\n     * returns a boolean indicating whether this operating context is present\n     */\n    abstract initialize(): Promise<boolean>;\n\n    /**\n     * Return the MSAL config\n     * @returns BrowserConfiguration\n     */\n    getConfig(): BrowserConfiguration {\n        return this.config;\n    }\n\n    /**\n     * Returns the MSAL Logger\n     * @returns Logger\n     */\n    getLogger(): Logger {\n        return this.logger;\n    }\n\n    isAvailable(): boolean {\n        return this.available;\n    }\n\n    isBrowserEnvironment(): boolean {\n        return this.browserEnvironment;\n    }\n}\n"],"mappings":";;;;;;;AAKA;AACA;AAOA;;;AAMG;AACH;AACI;AACA;AACA;AACA;AAEY,MAAAA,oBAAqB;EAiBjCC,YAAAC,MAAA;;AAEG;;AAGH;;IAEG,KAAAC,kBAAA,UAAAC,MAAA;IACK,KAACF,MAAK,GAAIG,kBAAM,CAAAH,MAAA,OAAAC,kBAAA;IAExB,KAAAG,MAAA,OAAAC,MAAA,MAAAL,MAAA,CAAAM,MAAA,CAAAC,aAAA,EAAAC,IAAA,EAAAC,OAAA;;EAEG;EACH;AAEA;;;EAGGC,UAAA;IACH,WAAiC,CAAAV,MAAA;EAIjC;;;AAGG;AACH;EAIAW,UAAA;IAIA,YAAAP,MAAA;EAGH"},"metadata":{},"sourceType":"module","externalDependencies":[]}