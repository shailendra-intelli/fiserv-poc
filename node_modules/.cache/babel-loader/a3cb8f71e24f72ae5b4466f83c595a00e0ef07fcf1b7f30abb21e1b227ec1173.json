{"ast":null,"code":"/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { Constants, HeaderNames } from '../utils/Constants.mjs';\nimport { invalidAuthenticationHeader, missingNonceAuthenticationHeader } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\n * header challenge values that can be used outside the basic authorization flows.\n */\nclass AuthenticationHeaderParser {\n  constructor(headers) {\n    this.headers = headers;\n  }\n  /**\n   * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\n   * @returns\n   */\n  getShrNonce() {\n    // Attempt to parse nonce from Authentiacation-Info\n    const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n    if (authenticationInfo) {\n      const authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\n      if (authenticationInfoChallenges.nextnonce) {\n        return authenticationInfoChallenges.nextnonce;\n      }\n      throw createClientConfigurationError(invalidAuthenticationHeader);\n    }\n    // Attempt to parse nonce from WWW-Authenticate\n    const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n    if (wwwAuthenticate) {\n      const wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\n      if (wwwAuthenticateChallenges.nonce) {\n        return wwwAuthenticateChallenges.nonce;\n      }\n      throw createClientConfigurationError(invalidAuthenticationHeader);\n    }\n    // If neither header is present, throw missing headers error\n    throw createClientConfigurationError(missingNonceAuthenticationHeader);\n  }\n  /**\n   * Parses an HTTP header's challenge set into a key/value map.\n   * @param header\n   * @returns\n   */\n  parseChallenges(header) {\n    const schemeSeparator = header.indexOf(\" \");\n    const challenges = header.substr(schemeSeparator + 1).split(\",\");\n    const challengeMap = {};\n    challenges.forEach(challenge => {\n      const [key, value] = challenge.split(\"=\");\n      // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n      challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\n    });\n    return challengeMap;\n  }\n}\nexport { AuthenticationHeaderParser };","map":{"version":3,"names":["AuthenticationHeaderParser","constructor","headers","getShrNonce"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\request\\AuthenticationHeaderParser.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n} from \"../error/ClientConfigurationError\";\nimport { Constants, HeaderNames } from \"../utils/Constants\";\n\ntype WWWAuthenticateChallenges = {\n    nonce?: string;\n};\n\ntype AuthenticationInfoChallenges = {\n    nextnonce?: string;\n};\n\n/**\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\n * header challenge values that can be used outside the basic authorization flows.\n */\nexport class AuthenticationHeaderParser {\n    private headers: Record<string, string>;\n\n    constructor(headers: Record<string, string>) {\n        this.headers = headers;\n    }\n\n    /**\n     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\n     * @returns\n     */\n    getShrNonce(): string {\n        // Attempt to parse nonce from Authentiacation-Info\n        const authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n        if (authenticationInfo) {\n            const authenticationInfoChallenges =\n                this.parseChallenges<AuthenticationInfoChallenges>(\n                    authenticationInfo\n                );\n            if (authenticationInfoChallenges.nextnonce) {\n                return authenticationInfoChallenges.nextnonce;\n            }\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.invalidAuthenticationHeader\n            );\n        }\n\n        // Attempt to parse nonce from WWW-Authenticate\n        const wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n        if (wwwAuthenticate) {\n            const wwwAuthenticateChallenges =\n                this.parseChallenges<WWWAuthenticateChallenges>(\n                    wwwAuthenticate\n                );\n            if (wwwAuthenticateChallenges.nonce) {\n                return wwwAuthenticateChallenges.nonce;\n            }\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.invalidAuthenticationHeader\n            );\n        }\n\n        // If neither header is present, throw missing headers error\n        throw createClientConfigurationError(\n            ClientConfigurationErrorCodes.missingNonceAuthenticationHeader\n        );\n    }\n\n    /**\n     * Parses an HTTP header's challenge set into a key/value map.\n     * @param header\n     * @returns\n     */\n    private parseChallenges<T>(header: string): T {\n        const schemeSeparator = header.indexOf(\" \");\n        const challenges = header.substr(schemeSeparator + 1).split(\",\");\n        const challengeMap = {} as T;\n\n        challenges.forEach((challenge: string) => {\n            const [key, value] = challenge.split(\"=\");\n            // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n            challengeMap[key] = unescape(\n                value.replace(/['\"]+/g, Constants.EMPTY_STRING)\n            );\n        });\n\n        return challengeMap;\n    }\n}\n"],"mappings":";;;;;;;AAmBA;;;AAGG;AAIa;AAIZ;;;AAGG,MAAAA,0BAAA;EACHC,WAAWA,CAAAC,OAAU;IAqCrB,KAAAA,OAAA,GAAAA,OAAA;;;;AAIG;AACH;EAeHC,YAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}