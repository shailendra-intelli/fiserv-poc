{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { ModernBrowserCrypto } from './ModernBrowserCrypto.mjs';\nimport { cryptoNonExistent } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\n */\n// RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\n/**\n * This class implements functions used by the browser library to perform cryptography operations such as\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\n */\nclass BrowserCrypto {\n  constructor(logger) {\n    this.logger = logger;\n    if (this.hasBrowserCrypto()) {\n      // Use standard modern web crypto if available\n      this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n      this.subtleCrypto = new ModernBrowserCrypto();\n    } else {\n      this.logger.error(\"BrowserCrypto: crypto interface is unavailable\");\n      throw createBrowserAuthError(cryptoNonExistent);\n    }\n    this.keygenAlgorithmOptions = {\n      name: PKCS1_V15_KEYGEN_ALG,\n      hash: S256_HASH_ALG,\n      modulusLength: MODULUS_LENGTH,\n      publicExponent: PUBLIC_EXPONENT\n    };\n  }\n  /**\n   * Check whether browser crypto is available.\n   */\n  hasBrowserCrypto() {\n    return \"crypto\" in window;\n  }\n  /**\n   * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\n   * @param dataString\n   */\n  async sha256Digest(dataString) {\n    const data = BrowserStringUtils.stringToUtf8Arr(dataString);\n    // MSR Crypto wants object with name property, instead of string\n    return this.subtleCrypto.digest({\n      name: S256_HASH_ALG\n    }, data);\n  }\n  /**\n   * Populates buffer with cryptographically random values.\n   * @param dataBuffer\n   */\n  getRandomValues(dataBuffer) {\n    return this.subtleCrypto.getRandomValues(dataBuffer);\n  }\n  /**\n   * Generates a keypair based on current keygen algorithm config.\n   * @param extractable\n   * @param usages\n   */\n  async generateKeyPair(extractable, usages) {\n    return this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages);\n  }\n  /**\n   * Export key as Json Web Key (JWK)\n   * @param key\n   */\n  async exportJwk(key) {\n    return this.subtleCrypto.exportKey(key);\n  }\n  /**\n   * Imports key as Json Web Key (JWK), can set extractable and usages.\n   * @param key\n   * @param extractable\n   * @param usages\n   */\n  async importJwk(key, extractable, usages) {\n    return this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages);\n  }\n  /**\n   * Signs given data with given key\n   * @param key\n   * @param data\n   */\n  async sign(key, data) {\n    return this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data);\n  }\n}\nexport { BrowserCrypto };","map":{"version":3,"names":["S256_HASH_ALG","PUBLIC_EXPONENT","Uint8Array","BrowserCrypto","constructor","logger","subtleCrypto","ModernBrowserCrypto","keygenAlgorithmOptions","name","PKCS1_V15_KEYGEN_ALG"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\crypto\\BrowserCrypto.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { ISubtleCrypto } from \"./ISubtleCrypto\";\nimport { ModernBrowserCrypto } from \"./ModernBrowserCrypto\";\nimport { Logger } from \"@azure/msal-common\";\n/**\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\n */\n// RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT: Uint8Array = new Uint8Array([0x01, 0x00, 0x01]);\n\n/**\n * This class implements functions used by the browser library to perform cryptography operations such as\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\n */\nexport class BrowserCrypto {\n    private keygenAlgorithmOptions: RsaHashedKeyGenParams;\n    private subtleCrypto: ISubtleCrypto;\n    private logger: Logger;\n\n    constructor(logger: Logger) {\n        this.logger = logger;\n\n        if (this.hasBrowserCrypto()) {\n            // Use standard modern web crypto if available\n            this.logger.verbose(\n                \"BrowserCrypto: modern crypto interface available\"\n            );\n            this.subtleCrypto = new ModernBrowserCrypto();\n        } else {\n            this.logger.error(\"BrowserCrypto: crypto interface is unavailable\");\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.cryptoNonExistent\n            );\n        }\n\n        this.keygenAlgorithmOptions = {\n            name: PKCS1_V15_KEYGEN_ALG,\n            hash: S256_HASH_ALG,\n            modulusLength: MODULUS_LENGTH,\n            publicExponent: PUBLIC_EXPONENT,\n        };\n    }\n\n    /**\n     * Check whether browser crypto is available.\n     */\n    private hasBrowserCrypto(): boolean {\n        return \"crypto\" in window;\n    }\n\n    /**\n     * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\n     * @param dataString\n     */\n    async sha256Digest(dataString: string): Promise<ArrayBuffer> {\n        const data = BrowserStringUtils.stringToUtf8Arr(dataString);\n        // MSR Crypto wants object with name property, instead of string\n        return this.subtleCrypto.digest({ name: S256_HASH_ALG }, data);\n    }\n\n    /**\n     * Populates buffer with cryptographically random values.\n     * @param dataBuffer\n     */\n    getRandomValues(dataBuffer: Uint8Array): Uint8Array {\n        return this.subtleCrypto.getRandomValues(dataBuffer);\n    }\n\n    /**\n     * Generates a keypair based on current keygen algorithm config.\n     * @param extractable\n     * @param usages\n     */\n    async generateKeyPair(\n        extractable: boolean,\n        usages: Array<KeyUsage>\n    ): Promise<CryptoKeyPair> {\n        return this.subtleCrypto.generateKey(\n            this.keygenAlgorithmOptions,\n            extractable,\n            usages\n        );\n    }\n\n    /**\n     * Export key as Json Web Key (JWK)\n     * @param key\n     */\n    async exportJwk(key: CryptoKey): Promise<JsonWebKey> {\n        return this.subtleCrypto.exportKey(key);\n    }\n\n    /**\n     * Imports key as Json Web Key (JWK), can set extractable and usages.\n     * @param key\n     * @param extractable\n     * @param usages\n     */\n    async importJwk(\n        key: JsonWebKey,\n        extractable: boolean,\n        usages: Array<KeyUsage>\n    ): Promise<CryptoKey> {\n        return this.subtleCrypto.importKey(\n            key,\n            this.keygenAlgorithmOptions,\n            extractable,\n            usages\n        );\n    }\n\n    /**\n     * Signs given data with given key\n     * @param key\n     * @param data\n     */\n    async sign(key: CryptoKey, data: ArrayBuffer): Promise<ArrayBuffer> {\n        return this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data);\n    }\n}\n"],"mappings":";;;;;;;;AAYA;AAaA;;;;;AASgB;AAwBZ;;AAEG;AACH,MAAAA,aAAwB;AAIxB;;;AAGG,MAAAC,eAAA,OAAAC,UAAA;;AAOH;;;AAGG,MAAAC,aAAA;EACHC,YAAAC,MAAgB;IAIhB,KAAAA,MAAA,GAAAA,MAAA;;;;MAIG,KAAAC,YAAA,OAAAC,mBAAA;IACG,OAWN;;;IAGG;IACY,KAAAC,sBAAyB;MAIxCC,IAAA,EAAAC,oBAAA;;;;;EAKG;EACG;AAaN;;;;EAIG;EACG;AAGT"},"metadata":{},"sourceType":"module","externalDependencies":[]}