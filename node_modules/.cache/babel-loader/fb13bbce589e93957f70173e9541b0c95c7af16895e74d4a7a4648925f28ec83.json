{"ast":null,"code":"/*! @azure/msal-common v14.7.0 2024-02-07 */\n'use strict';\n\nimport { Constants, ResponseMode, OIDC_DEFAULT_SCOPES, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.mjs';\nimport { RESPONSE_TYPE, RESPONSE_MODE, NATIVE_BROKER, SCOPE, CLIENT_ID, REDIRECT_URI, POST_LOGOUT_URI, ID_TOKEN_HINT, DOMAIN_HINT, LOGIN_HINT, SID, CLAIMS, CLIENT_REQUEST_ID, X_CLIENT_SKU, X_CLIENT_VER, X_CLIENT_OS, X_CLIENT_CPU, X_APP_NAME, X_APP_VER, PROMPT, STATE, NONCE, CODE_CHALLENGE, CODE_CHALLENGE_METHOD, CODE, DEVICE_CODE, REFRESH_TOKEN, CODE_VERIFIER, CLIENT_SECRET, CLIENT_ASSERTION, CLIENT_ASSERTION_TYPE, OBO_ASSERTION, REQUESTED_TOKEN_USE, GRANT_TYPE, TOKEN_TYPE, REQ_CNF, X_CLIENT_CURR_TELEM, X_CLIENT_LAST_TELEM, X_MS_LIB_CAPABILITY, LOGOUT_HINT } from '../constants/AADServerParamKeys.mjs';\nimport { ScopeSet } from './ScopeSet.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { RequestValidator } from './RequestValidator.mjs';\nimport { pkceParamsMissing, invalidClaims } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass RequestParameterBuilder {\n  constructor() {\n    this.parameters = new Map();\n  }\n  /**\n   * add response_type = code\n   */\n  addResponseTypeCode() {\n    this.parameters.set(RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));\n  }\n  /**\n   * add response_type = token id_token\n   */\n  addResponseTypeForTokenAndIdToken() {\n    this.parameters.set(RESPONSE_TYPE, encodeURIComponent(`${Constants.TOKEN_RESPONSE_TYPE} ${Constants.ID_TOKEN_RESPONSE_TYPE}`));\n  }\n  /**\n   * add response_mode. defaults to query.\n   * @param responseMode\n   */\n  addResponseMode(responseMode) {\n    this.parameters.set(RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n  }\n  /**\n   * Add flag to indicate STS should attempt to use WAM if available\n   */\n  addNativeBroker() {\n    this.parameters.set(NATIVE_BROKER, encodeURIComponent(\"1\"));\n  }\n  /**\n   * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n   * @param scopeSet\n   * @param addOidcScopes\n   */\n  addScopes(scopes, addOidcScopes = true, defaultScopes = OIDC_DEFAULT_SCOPES) {\n    // Always add openid to the scopes when adding OIDC scopes\n    if (addOidcScopes && !defaultScopes.includes(\"openid\") && !scopes.includes(\"openid\")) {\n      defaultScopes.push(\"openid\");\n    }\n    const requestScopes = addOidcScopes ? [...(scopes || []), ...defaultScopes] : scopes || [];\n    const scopeSet = new ScopeSet(requestScopes);\n    this.parameters.set(SCOPE, encodeURIComponent(scopeSet.printScopes()));\n  }\n  /**\n   * add clientId\n   * @param clientId\n   */\n  addClientId(clientId) {\n    this.parameters.set(CLIENT_ID, encodeURIComponent(clientId));\n  }\n  /**\n   * add redirect_uri\n   * @param redirectUri\n   */\n  addRedirectUri(redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(REDIRECT_URI, encodeURIComponent(redirectUri));\n  }\n  /**\n   * add post logout redirectUri\n   * @param redirectUri\n   */\n  addPostLogoutRedirectUri(redirectUri) {\n    RequestValidator.validateRedirectUri(redirectUri);\n    this.parameters.set(POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n  }\n  /**\n   * add id_token_hint to logout request\n   * @param idTokenHint\n   */\n  addIdTokenHint(idTokenHint) {\n    this.parameters.set(ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n  }\n  /**\n   * add domain_hint\n   * @param domainHint\n   */\n  addDomainHint(domainHint) {\n    this.parameters.set(DOMAIN_HINT, encodeURIComponent(domainHint));\n  }\n  /**\n   * add login_hint\n   * @param loginHint\n   */\n  addLoginHint(loginHint) {\n    this.parameters.set(LOGIN_HINT, encodeURIComponent(loginHint));\n  }\n  /**\n   * Adds the CCS (Cache Credential Service) query parameter for login_hint\n   * @param loginHint\n   */\n  addCcsUpn(loginHint) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\n  }\n  /**\n   * Adds the CCS (Cache Credential Service) query parameter for account object\n   * @param loginHint\n   */\n  addCcsOid(clientInfo) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\n  }\n  /**\n   * add sid\n   * @param sid\n   */\n  addSid(sid) {\n    this.parameters.set(SID, encodeURIComponent(sid));\n  }\n  /**\n   * add claims\n   * @param claims\n   */\n  addClaims(claims, clientCapabilities) {\n    const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n    RequestValidator.validateClaims(mergedClaims);\n    this.parameters.set(CLAIMS, encodeURIComponent(mergedClaims));\n  }\n  /**\n   * add correlationId\n   * @param correlationId\n   */\n  addCorrelationId(correlationId) {\n    this.parameters.set(CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n  }\n  /**\n   * add library info query params\n   * @param libraryInfo\n   */\n  addLibraryInfo(libraryInfo) {\n    // Telemetry Info\n    this.parameters.set(X_CLIENT_SKU, libraryInfo.sku);\n    this.parameters.set(X_CLIENT_VER, libraryInfo.version);\n    if (libraryInfo.os) {\n      this.parameters.set(X_CLIENT_OS, libraryInfo.os);\n    }\n    if (libraryInfo.cpu) {\n      this.parameters.set(X_CLIENT_CPU, libraryInfo.cpu);\n    }\n  }\n  /**\n   * Add client telemetry parameters\n   * @param appTelemetry\n   */\n  addApplicationTelemetry(appTelemetry) {\n    if (appTelemetry?.appName) {\n      this.parameters.set(X_APP_NAME, appTelemetry.appName);\n    }\n    if (appTelemetry?.appVersion) {\n      this.parameters.set(X_APP_VER, appTelemetry.appVersion);\n    }\n  }\n  /**\n   * add prompt\n   * @param prompt\n   */\n  addPrompt(prompt) {\n    RequestValidator.validatePrompt(prompt);\n    this.parameters.set(`${PROMPT}`, encodeURIComponent(prompt));\n  }\n  /**\n   * add state\n   * @param state\n   */\n  addState(state) {\n    if (state) {\n      this.parameters.set(STATE, encodeURIComponent(state));\n    }\n  }\n  /**\n   * add nonce\n   * @param nonce\n   */\n  addNonce(nonce) {\n    this.parameters.set(NONCE, encodeURIComponent(nonce));\n  }\n  /**\n   * add code_challenge and code_challenge_method\n   * - throw if either of them are not passed\n   * @param codeChallenge\n   * @param codeChallengeMethod\n   */\n  addCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n    RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n    if (codeChallenge && codeChallengeMethod) {\n      this.parameters.set(CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n      this.parameters.set(CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n    } else {\n      throw createClientConfigurationError(pkceParamsMissing);\n    }\n  }\n  /**\n   * add the `authorization_code` passed by the user to exchange for a token\n   * @param code\n   */\n  addAuthorizationCode(code) {\n    this.parameters.set(CODE, encodeURIComponent(code));\n  }\n  /**\n   * add the `authorization_code` passed by the user to exchange for a token\n   * @param code\n   */\n  addDeviceCode(code) {\n    this.parameters.set(DEVICE_CODE, encodeURIComponent(code));\n  }\n  /**\n   * add the `refreshToken` passed by the user\n   * @param refreshToken\n   */\n  addRefreshToken(refreshToken) {\n    this.parameters.set(REFRESH_TOKEN, encodeURIComponent(refreshToken));\n  }\n  /**\n   * add the `code_verifier` passed by the user to exchange for a token\n   * @param codeVerifier\n   */\n  addCodeVerifier(codeVerifier) {\n    this.parameters.set(CODE_VERIFIER, encodeURIComponent(codeVerifier));\n  }\n  /**\n   * add client_secret\n   * @param clientSecret\n   */\n  addClientSecret(clientSecret) {\n    this.parameters.set(CLIENT_SECRET, encodeURIComponent(clientSecret));\n  }\n  /**\n   * add clientAssertion for confidential client flows\n   * @param clientAssertion\n   */\n  addClientAssertion(clientAssertion) {\n    if (clientAssertion) {\n      this.parameters.set(CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n    }\n  }\n  /**\n   * add clientAssertionType for confidential client flows\n   * @param clientAssertionType\n   */\n  addClientAssertionType(clientAssertionType) {\n    if (clientAssertionType) {\n      this.parameters.set(CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n    }\n  }\n  /**\n   * add OBO assertion for confidential client flows\n   * @param clientAssertion\n   */\n  addOboAssertion(oboAssertion) {\n    this.parameters.set(OBO_ASSERTION, encodeURIComponent(oboAssertion));\n  }\n  /**\n   * add grant type\n   * @param grantType\n   */\n  addRequestTokenUse(tokenUse) {\n    this.parameters.set(REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n  }\n  /**\n   * add grant type\n   * @param grantType\n   */\n  addGrantType(grantType) {\n    this.parameters.set(GRANT_TYPE, encodeURIComponent(grantType));\n  }\n  /**\n   * add client info\n   *\n   */\n  addClientInfo() {\n    this.parameters.set(CLIENT_INFO, \"1\");\n  }\n  /**\n   * add extraQueryParams\n   * @param eQParams\n   */\n  addExtraQueryParameters(eQParams) {\n    const sanitizedEQParams = RequestValidator.sanitizeEQParams(eQParams, this.parameters);\n    Object.keys(sanitizedEQParams).forEach(key => {\n      this.parameters.set(key, eQParams[key]);\n    });\n  }\n  addClientCapabilitiesToClaims(claims, clientCapabilities) {\n    let mergedClaims;\n    // Parse provided claims into JSON object or initialize empty object\n    if (!claims) {\n      mergedClaims = {};\n    } else {\n      try {\n        mergedClaims = JSON.parse(claims);\n      } catch (e) {\n        throw createClientConfigurationError(invalidClaims);\n      }\n    }\n    if (clientCapabilities && clientCapabilities.length > 0) {\n      if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n        // Add access_token key to claims object\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n      }\n      // Add xms_cc claim with provided clientCapabilities to access_token key\n      mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n        values: clientCapabilities\n      };\n    }\n    return JSON.stringify(mergedClaims);\n  }\n  /**\n   * adds `username` for Password Grant flow\n   * @param username\n   */\n  addUsername(username) {\n    this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));\n  }\n  /**\n   * adds `password` for Password Grant flow\n   * @param password\n   */\n  addPassword(password) {\n    this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));\n  }\n  /**\n   * add pop_jwk to query params\n   * @param cnfString\n   */\n  addPopToken(cnfString) {\n    if (cnfString) {\n      this.parameters.set(TOKEN_TYPE, AuthenticationScheme.POP);\n      this.parameters.set(REQ_CNF, encodeURIComponent(cnfString));\n    }\n  }\n  /**\n   * add SSH JWK and key ID to query params\n   */\n  addSshJwk(sshJwkString) {\n    if (sshJwkString) {\n      this.parameters.set(TOKEN_TYPE, AuthenticationScheme.SSH);\n      this.parameters.set(REQ_CNF, encodeURIComponent(sshJwkString));\n    }\n  }\n  /**\n   * add server telemetry fields\n   * @param serverTelemetryManager\n   */\n  addServerTelemetry(serverTelemetryManager) {\n    this.parameters.set(X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n    this.parameters.set(X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n  }\n  /**\n   * Adds parameter that indicates to the server that throttling is supported\n   */\n  addThrottling() {\n    this.parameters.set(X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n  }\n  /**\n   * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\n   */\n  addLogoutHint(logoutHint) {\n    this.parameters.set(LOGOUT_HINT, encodeURIComponent(logoutHint));\n  }\n  /**\n   * Utility to create a URL from the params map\n   */\n  createQueryString() {\n    const queryParameterArray = new Array();\n    this.parameters.forEach((value, key) => {\n      queryParameterArray.push(`${key}=${value}`);\n    });\n    return queryParameterArray.join(\"&\");\n  }\n}\nexport { RequestParameterBuilder };","map":{"version":3,"names":["RequestParameterBuilder","constructor","parameters","Map","addResponseTypeCode","set","RESPONSE_TYPE","encodeURIComponent","Constants","CODE_RESPONSE_TYPE","addResponseTypeForTokenAndIdToken","TOKEN_RESPONSE_TYPE","ID_TOKEN_RESPONSE_TYPE","addResponseMode","responseMode","RESPONSE_MODE","ResponseMode","QUERY","addNativeBroker","NATIVE_BROKER","addScopes","scopes","addOidcScopes","defaultScopes","OIDC_DEFAULT_SCOPES","includes","push","requestScopes","scopeSet","ScopeSet","SCOPE","printScopes","addClientId","clientId","CLIENT_ID","addRedirectUri","redirectUri","RequestValidator","validateRedirectUri","REDIRECT_URI","addPostLogoutRedirectUri","POST_LOGOUT_URI","addIdTokenHint","idTokenHint","ID_TOKEN_HINT","addDomainHint","domainHint","DOMAIN_HINT","addLoginHint","loginHint","LOGIN_HINT","addCcsUpn","HeaderNames","CCS_HEADER","addCcsOid","clientInfo","uid","utid","addSid","sid","SID","addClaims","claims","clientCapabilities","mergedClaims","addClientCapabilitiesToClaims","validateClaims","CLAIMS","addCorrelationId","correlationId","CLIENT_REQUEST_ID","addLibraryInfo","libraryInfo","X_CLIENT_SKU","sku","X_CLIENT_VER","version","os","X_CLIENT_OS","cpu","X_CLIENT_CPU","addApplicationTelemetry","appTelemetry","appName","X_APP_NAME","appVersion","X_APP_VER","addPrompt","prompt","validatePrompt","PROMPT","addState","state","STATE","addNonce","nonce","NONCE","addCodeChallengeParams","codeChallenge","codeChallengeMethod","validateCodeChallengeParams","CODE_CHALLENGE","CODE_CHALLENGE_METHOD","createClientConfigurationError","pkceParamsMissing","addAuthorizationCode","code","CODE","addDeviceCode","DEVICE_CODE","addRefreshToken","refreshToken","REFRESH_TOKEN","addCodeVerifier","codeVerifier","CODE_VERIFIER","addClientSecret","clientSecret","CLIENT_SECRET","addClientAssertion","clientAssertion","CLIENT_ASSERTION","addClientAssertionType","clientAssertionType","CLIENT_ASSERTION_TYPE","addOboAssertion","oboAssertion","OBO_ASSERTION","addRequestTokenUse","tokenUse","REQUESTED_TOKEN_USE","addGrantType","grantType","GRANT_TYPE","addClientInfo","CLIENT_INFO","addExtraQueryParameters","eQParams","sanitizedEQParams","sanitizeEQParams","Object","keys","forEach","key","JSON","parse","e","invalidClaims","length","hasOwnProperty","ClaimsRequestKeys","ACCESS_TOKEN","XMS_CC","values","stringify","addUsername","username","PasswordGrantConstants","addPassword","password","addPopToken","cnfString","TOKEN_TYPE","AuthenticationScheme","POP","REQ_CNF","addSshJwk","sshJwkString","SSH","addServerTelemetry","serverTelemetryManager","X_CLIENT_CURR_TELEM","generateCurrentRequestHeaderValue","X_CLIENT_LAST_TELEM","generateLastRequestHeaderValue","addThrottling","X_MS_LIB_CAPABILITY","ThrottlingConstants","X_MS_LIB_CAPABILITY_VALUE","addLogoutHint","logoutHint","LOGOUT_HINT","createQueryString","queryParameterArray","Array","value","join"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\request\\RequestParameterBuilder.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Constants,\n    ResponseMode,\n    CLIENT_INFO,\n    AuthenticationScheme,\n    ClaimsRequestKeys,\n    PasswordGrantConstants,\n    OIDC_DEFAULT_SCOPES,\n    ThrottlingConstants,\n    HeaderNames,\n} from \"../utils/Constants\";\nimport * as AADServerParamKeys from \"../constants/AADServerParamKeys\";\nimport { ScopeSet } from \"./ScopeSet\";\nimport {\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n} from \"../error/ClientConfigurationError\";\nimport { StringDict } from \"../utils/MsalTypes\";\nimport { RequestValidator } from \"./RequestValidator\";\nimport {\n    ApplicationTelemetry,\n    LibraryInfo,\n} from \"../config/ClientConfiguration\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { ClientInfo } from \"../account/ClientInfo\";\n\n/** @internal */\nexport class RequestParameterBuilder {\n    private parameters: Map<string, string>;\n\n    constructor() {\n        this.parameters = new Map<string, string>();\n    }\n\n    /**\n     * add response_type = code\n     */\n    addResponseTypeCode(): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_TYPE,\n            encodeURIComponent(Constants.CODE_RESPONSE_TYPE)\n        );\n    }\n\n    /**\n     * add response_type = token id_token\n     */\n    addResponseTypeForTokenAndIdToken(): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_TYPE,\n            encodeURIComponent(\n                `${Constants.TOKEN_RESPONSE_TYPE} ${Constants.ID_TOKEN_RESPONSE_TYPE}`\n            )\n        );\n    }\n\n    /**\n     * add response_mode. defaults to query.\n     * @param responseMode\n     */\n    addResponseMode(responseMode?: ResponseMode): void {\n        this.parameters.set(\n            AADServerParamKeys.RESPONSE_MODE,\n            encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY)\n        );\n    }\n\n    /**\n     * Add flag to indicate STS should attempt to use WAM if available\n     */\n    addNativeBroker(): void {\n        this.parameters.set(\n            AADServerParamKeys.NATIVE_BROKER,\n            encodeURIComponent(\"1\")\n        );\n    }\n\n    /**\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\n     * @param scopeSet\n     * @param addOidcScopes\n     */\n    addScopes(\n        scopes: string[],\n        addOidcScopes: boolean = true,\n        defaultScopes: Array<string> = OIDC_DEFAULT_SCOPES\n    ): void {\n        // Always add openid to the scopes when adding OIDC scopes\n        if (\n            addOidcScopes &&\n            !defaultScopes.includes(\"openid\") &&\n            !scopes.includes(\"openid\")\n        ) {\n            defaultScopes.push(\"openid\");\n        }\n        const requestScopes = addOidcScopes\n            ? [...(scopes || []), ...defaultScopes]\n            : scopes || [];\n        const scopeSet = new ScopeSet(requestScopes);\n        this.parameters.set(\n            AADServerParamKeys.SCOPE,\n            encodeURIComponent(scopeSet.printScopes())\n        );\n    }\n\n    /**\n     * add clientId\n     * @param clientId\n     */\n    addClientId(clientId: string): void {\n        this.parameters.set(\n            AADServerParamKeys.CLIENT_ID,\n            encodeURIComponent(clientId)\n        );\n    }\n\n    /**\n     * add redirect_uri\n     * @param redirectUri\n     */\n    addRedirectUri(redirectUri: string): void {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(\n            AADServerParamKeys.REDIRECT_URI,\n            encodeURIComponent(redirectUri)\n        );\n    }\n\n    /**\n     * add post logout redirectUri\n     * @param redirectUri\n     */\n    addPostLogoutRedirectUri(redirectUri: string): void {\n        RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(\n            AADServerParamKeys.POST_LOGOUT_URI,\n            encodeURIComponent(redirectUri)\n        );\n    }\n\n    /**\n     * add id_token_hint to logout request\n     * @param idTokenHint\n     */\n    addIdTokenHint(idTokenHint: string): void {\n        this.parameters.set(\n            AADServerParamKeys.ID_TOKEN_HINT,\n            encodeURIComponent(idTokenHint)\n        );\n    }\n\n    /**\n     * add domain_hint\n     * @param domainHint\n     */\n    addDomainHint(domainHint: string): void {\n        this.parameters.set(\n            AADServerParamKeys.DOMAIN_HINT,\n            encodeURIComponent(domainHint)\n        );\n    }\n\n    /**\n     * add login_hint\n     * @param loginHint\n     */\n    addLoginHint(loginHint: string): void {\n        this.parameters.set(\n            AADServerParamKeys.LOGIN_HINT,\n            encodeURIComponent(loginHint)\n        );\n    }\n\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\n     * @param loginHint\n     */\n    addCcsUpn(loginHint: string): void {\n        this.parameters.set(\n            HeaderNames.CCS_HEADER,\n            encodeURIComponent(`UPN:${loginHint}`)\n        );\n    }\n\n    /**\n     * Adds the CCS (Cache Credential Service) query parameter for account object\n     * @param loginHint\n     */\n    addCcsOid(clientInfo: ClientInfo): void {\n        this.parameters.set(\n            HeaderNames.CCS_HEADER,\n            encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`)\n        );\n    }\n\n    /**\n     * add sid\n     * @param sid\n     */\n    addSid(sid: string): void {\n        this.parameters.set(AADServerParamKeys.SID, encodeURIComponent(sid));\n    }\n\n    /**\n     * add claims\n     * @param claims\n     */\n    addClaims(claims?: string, clientCapabilities?: Array<string>): void {\n        const mergedClaims = this.addClientCapabilitiesToClaims(\n            claims,\n            clientCapabilities\n        );\n        RequestValidator.validateClaims(mergedClaims);\n        this.parameters.set(\n            AADServerParamKeys.CLAIMS,\n            encodeURIComponent(mergedClaims)\n        );\n    }\n\n    /**\n     * add correlationId\n     * @param correlationId\n     */\n    addCorrelationId(correlationId: string): void {\n        this.parameters.set(\n            AADServerParamKeys.CLIENT_REQUEST_ID,\n            encodeURIComponent(correlationId)\n        );\n    }\n\n    /**\n     * add library info query params\n     * @param libraryInfo\n     */\n    addLibraryInfo(libraryInfo: LibraryInfo): void {\n        // Telemetry Info\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n        this.parameters.set(\n            AADServerParamKeys.X_CLIENT_VER,\n            libraryInfo.version\n        );\n        if (libraryInfo.os) {\n            this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n        }\n        if (libraryInfo.cpu) {\n            this.parameters.set(\n                AADServerParamKeys.X_CLIENT_CPU,\n                libraryInfo.cpu\n            );\n        }\n    }\n\n    /**\n     * Add client telemetry parameters\n     * @param appTelemetry\n     */\n    addApplicationTelemetry(appTelemetry: ApplicationTelemetry): void {\n        if (appTelemetry?.appName) {\n            this.parameters.set(\n                AADServerParamKeys.X_APP_NAME,\n                appTelemetry.appName\n            );\n        }\n\n        if (appTelemetry?.appVersion) {\n            this.parameters.set(\n                AADServerParamKeys.X_APP_VER,\n                appTelemetry.appVersion\n            );\n        }\n    }\n\n    /**\n     * add prompt\n     * @param prompt\n     */\n    addPrompt(prompt: string): void {\n        RequestValidator.validatePrompt(prompt);\n        this.parameters.set(\n            `${AADServerParamKeys.PROMPT}`,\n            encodeURIComponent(prompt)\n        );\n    }\n\n    /**\n     * add state\n     * @param state\n     */\n    addState(state: string): void {\n        if (state) {\n            this.parameters.set(\n                AADServerParamKeys.STATE,\n                encodeURIComponent(state)\n            );\n        }\n    }\n\n    /**\n     * add nonce\n     * @param nonce\n     */\n    addNonce(nonce: string): void {\n        this.parameters.set(\n            AADServerParamKeys.NONCE,\n            encodeURIComponent(nonce)\n        );\n    }\n\n    /**\n     * add code_challenge and code_challenge_method\n     * - throw if either of them are not passed\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    addCodeChallengeParams(\n        codeChallenge: string,\n        codeChallengeMethod: string\n    ): void {\n        RequestValidator.validateCodeChallengeParams(\n            codeChallenge,\n            codeChallengeMethod\n        );\n        if (codeChallenge && codeChallengeMethod) {\n            this.parameters.set(\n                AADServerParamKeys.CODE_CHALLENGE,\n                encodeURIComponent(codeChallenge)\n            );\n            this.parameters.set(\n                AADServerParamKeys.CODE_CHALLENGE_METHOD,\n                encodeURIComponent(codeChallengeMethod)\n            );\n        } else {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.pkceParamsMissing\n            );\n        }\n    }\n\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addAuthorizationCode(code: string): void {\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n    }\n\n    /**\n     * add the `authorization_code` passed by the user to exchange for a token\n     * @param code\n     */\n    addDeviceCode(code: string): void {\n        this.parameters.set(\n            AADServerParamKeys.DEVICE_CODE,\n            encodeURIComponent(code)\n        );\n    }\n\n    /**\n     * add the `refreshToken` passed by the user\n     * @param refreshToken\n     */\n    addRefreshToken(refreshToken: string): void {\n        this.parameters.set(\n            AADServerParamKeys.REFRESH_TOKEN,\n            encodeURIComponent(refreshToken)\n        );\n    }\n\n    /**\n     * add the `code_verifier` passed by the user to exchange for a token\n     * @param codeVerifier\n     */\n    addCodeVerifier(codeVerifier: string): void {\n        this.parameters.set(\n            AADServerParamKeys.CODE_VERIFIER,\n            encodeURIComponent(codeVerifier)\n        );\n    }\n\n    /**\n     * add client_secret\n     * @param clientSecret\n     */\n    addClientSecret(clientSecret: string): void {\n        this.parameters.set(\n            AADServerParamKeys.CLIENT_SECRET,\n            encodeURIComponent(clientSecret)\n        );\n    }\n\n    /**\n     * add clientAssertion for confidential client flows\n     * @param clientAssertion\n     */\n    addClientAssertion(clientAssertion: string): void {\n        if (clientAssertion) {\n            this.parameters.set(\n                AADServerParamKeys.CLIENT_ASSERTION,\n                encodeURIComponent(clientAssertion)\n            );\n        }\n    }\n\n    /**\n     * add clientAssertionType for confidential client flows\n     * @param clientAssertionType\n     */\n    addClientAssertionType(clientAssertionType: string): void {\n        if (clientAssertionType) {\n            this.parameters.set(\n                AADServerParamKeys.CLIENT_ASSERTION_TYPE,\n                encodeURIComponent(clientAssertionType)\n            );\n        }\n    }\n\n    /**\n     * add OBO assertion for confidential client flows\n     * @param clientAssertion\n     */\n    addOboAssertion(oboAssertion: string): void {\n        this.parameters.set(\n            AADServerParamKeys.OBO_ASSERTION,\n            encodeURIComponent(oboAssertion)\n        );\n    }\n\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addRequestTokenUse(tokenUse: string): void {\n        this.parameters.set(\n            AADServerParamKeys.REQUESTED_TOKEN_USE,\n            encodeURIComponent(tokenUse)\n        );\n    }\n\n    /**\n     * add grant type\n     * @param grantType\n     */\n    addGrantType(grantType: string): void {\n        this.parameters.set(\n            AADServerParamKeys.GRANT_TYPE,\n            encodeURIComponent(grantType)\n        );\n    }\n\n    /**\n     * add client info\n     *\n     */\n    addClientInfo(): void {\n        this.parameters.set(CLIENT_INFO, \"1\");\n    }\n\n    /**\n     * add extraQueryParams\n     * @param eQParams\n     */\n    addExtraQueryParameters(eQParams: StringDict): void {\n        const sanitizedEQParams = RequestValidator.sanitizeEQParams(\n            eQParams,\n            this.parameters\n        );\n        Object.keys(sanitizedEQParams).forEach((key) => {\n            this.parameters.set(key, eQParams[key]);\n        });\n    }\n\n    addClientCapabilitiesToClaims(\n        claims?: string,\n        clientCapabilities?: Array<string>\n    ): string {\n        let mergedClaims: object;\n\n        // Parse provided claims into JSON object or initialize empty object\n        if (!claims) {\n            mergedClaims = {};\n        } else {\n            try {\n                mergedClaims = JSON.parse(claims);\n            } catch (e) {\n                throw createClientConfigurationError(\n                    ClientConfigurationErrorCodes.invalidClaims\n                );\n            }\n        }\n\n        if (clientCapabilities && clientCapabilities.length > 0) {\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n                // Add access_token key to claims object\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n            }\n\n            // Add xms_cc claim with provided clientCapabilities to access_token key\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][\n                ClaimsRequestKeys.XMS_CC\n            ] = {\n                values: clientCapabilities,\n            };\n        }\n\n        return JSON.stringify(mergedClaims);\n    }\n\n    /**\n     * adds `username` for Password Grant flow\n     * @param username\n     */\n    addUsername(username: string): void {\n        this.parameters.set(\n            PasswordGrantConstants.username,\n            encodeURIComponent(username)\n        );\n    }\n\n    /**\n     * adds `password` for Password Grant flow\n     * @param password\n     */\n    addPassword(password: string): void {\n        this.parameters.set(\n            PasswordGrantConstants.password,\n            encodeURIComponent(password)\n        );\n    }\n\n    /**\n     * add pop_jwk to query params\n     * @param cnfString\n     */\n    addPopToken(cnfString: string): void {\n        if (cnfString) {\n            this.parameters.set(\n                AADServerParamKeys.TOKEN_TYPE,\n                AuthenticationScheme.POP\n            );\n            this.parameters.set(\n                AADServerParamKeys.REQ_CNF,\n                encodeURIComponent(cnfString)\n            );\n        }\n    }\n\n    /**\n     * add SSH JWK and key ID to query params\n     */\n    addSshJwk(sshJwkString: string): void {\n        if (sshJwkString) {\n            this.parameters.set(\n                AADServerParamKeys.TOKEN_TYPE,\n                AuthenticationScheme.SSH\n            );\n            this.parameters.set(\n                AADServerParamKeys.REQ_CNF,\n                encodeURIComponent(sshJwkString)\n            );\n        }\n    }\n\n    /**\n     * add server telemetry fields\n     * @param serverTelemetryManager\n     */\n    addServerTelemetry(serverTelemetryManager: ServerTelemetryManager): void {\n        this.parameters.set(\n            AADServerParamKeys.X_CLIENT_CURR_TELEM,\n            serverTelemetryManager.generateCurrentRequestHeaderValue()\n        );\n        this.parameters.set(\n            AADServerParamKeys.X_CLIENT_LAST_TELEM,\n            serverTelemetryManager.generateLastRequestHeaderValue()\n        );\n    }\n\n    /**\n     * Adds parameter that indicates to the server that throttling is supported\n     */\n    addThrottling(): void {\n        this.parameters.set(\n            AADServerParamKeys.X_MS_LIB_CAPABILITY,\n            ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE\n        );\n    }\n\n    /**\n     * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\n     */\n    addLogoutHint(logoutHint: string): void {\n        this.parameters.set(\n            AADServerParamKeys.LOGOUT_HINT,\n            encodeURIComponent(logoutHint)\n        );\n    }\n\n    /**\n     * Utility to create a URL from the params map\n     */\n    createQueryString(): string {\n        const queryParameterArray: Array<string> = new Array<string>();\n\n        this.parameters.forEach((value, key) => {\n            queryParameterArray.push(`${key}=${value}`);\n        });\n\n        return queryParameterArray.join(\"&\");\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}