{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass ModernBrowserCrypto {\n  getRandomValues(dataBuffer) {\n    return window.crypto.getRandomValues(dataBuffer);\n  }\n  async generateKey(algorithm, extractable, keyUsages) {\n    return window.crypto.subtle.generateKey(algorithm, extractable, keyUsages);\n  }\n  async exportKey(key) {\n    return window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key);\n  }\n  async importKey(keyData, algorithm, extractable, keyUsages) {\n    return window.crypto.subtle.importKey(KEY_FORMAT_JWK, keyData, algorithm, extractable, keyUsages);\n  }\n  async sign(algorithm, key, data) {\n    return window.crypto.subtle.sign(algorithm, key, data);\n  }\n  async digest(algorithm, data) {\n    return window.crypto.subtle.digest(algorithm, data);\n  }\n}\nexport { ModernBrowserCrypto };","map":{"version":3,"names":["ModernBrowserCrypto","getRandomValues","dataBuffer","window","crypto"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\crypto\\ModernBrowserCrypto.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\nimport { ISubtleCrypto } from \"./ISubtleCrypto\";\n\nexport class ModernBrowserCrypto implements ISubtleCrypto {\n    getRandomValues(dataBuffer: Uint8Array): Uint8Array {\n        return window.crypto.getRandomValues(dataBuffer);\n    }\n\n    async generateKey(\n        algorithm: RsaHashedKeyGenParams,\n        extractable: boolean,\n        keyUsages: KeyUsage[]\n    ): Promise<CryptoKeyPair> {\n        return window.crypto.subtle.generateKey(\n            algorithm,\n            extractable,\n            keyUsages\n        ) as Promise<CryptoKeyPair>;\n    }\n\n    async exportKey(key: CryptoKey): Promise<JsonWebKey> {\n        return window.crypto.subtle.exportKey(\n            KEY_FORMAT_JWK,\n            key\n        ) as Promise<JsonWebKey>;\n    }\n\n    async importKey(\n        keyData: JsonWebKey,\n        algorithm: RsaHashedImportParams,\n        extractable: boolean,\n        keyUsages: KeyUsage[]\n    ): Promise<CryptoKey> {\n        return window.crypto.subtle.importKey(\n            KEY_FORMAT_JWK,\n            keyData,\n            algorithm,\n            extractable,\n            keyUsages\n        ) as Promise<CryptoKey>;\n    }\n\n    async sign(\n        algorithm: AlgorithmIdentifier,\n        key: CryptoKey,\n        data: ArrayBuffer\n    ): Promise<ArrayBuffer> {\n        return window.crypto.subtle.sign(\n            algorithm,\n            key,\n            data\n        ) as Promise<ArrayBuffer>;\n    }\n\n    async digest(\n        algorithm: AlgorithmIdentifier,\n        data: Uint8Array\n    ): Promise<ArrayBuffer> {\n        return window.crypto.subtle.digest(\n            algorithm,\n            data\n        ) as Promise<ArrayBuffer>;\n    }\n}\n"],"mappings":";;;;;AAMA;AAEA;AACI;AAIM;AAmBS,MAAAA,mBACF,CAAU;EAcjBC,eACOA,CAAEC,UAAmB;IAW5B,OACFC,MAAW,CAAAC,MAAA,CAAAH,eACX,CAAAC,UAAM;EAOb"},"metadata":{},"sourceType":"module","externalDependencies":[]}