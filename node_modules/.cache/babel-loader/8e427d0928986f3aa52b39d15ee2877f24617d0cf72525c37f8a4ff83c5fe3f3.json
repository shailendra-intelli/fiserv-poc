{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { TeamsAppOperatingContext } from '../operatingcontext/TeamsAppOperatingContext.mjs';\nimport { StandardOperatingContext } from '../operatingcontext/StandardOperatingContext.mjs';\nimport { Logger } from '@azure/msal-common';\nimport { name, version } from '../packageMetadata.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass ControllerFactory {\n  constructor(config) {\n    this.config = config;\n    const loggerOptions = {\n      loggerCallback: undefined,\n      piiLoggingEnabled: false,\n      logLevel: undefined,\n      correlationId: undefined\n    };\n    this.logger = new Logger(loggerOptions, name, version);\n  }\n  async createController() {\n    const standard = new StandardOperatingContext(this.config);\n    const metaOS = new TeamsAppOperatingContext(this.config);\n    const operatingContexts = [standard.initialize(), metaOS.initialize()];\n    return Promise.all(operatingContexts).then(async () => {\n      if (metaOS.isAvailable()) {\n        /*\n         * pull down metaos module\n         * create associated controller\n         */\n        // return await StandardController.createController(standard);\n        const controller = await import('./StandardController.mjs');\n        return await controller.StandardController.createController(standard);\n      } else if (standard.isAvailable()) {\n        const controller = await import('./StandardController.mjs');\n        return await controller.StandardController.createController(standard);\n      }\n      throw new Error(\"No controller found.\");\n    });\n  }\n}\nexport { ControllerFactory };","map":{"version":3,"names":["ControllerFactory"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\controllers\\ControllerFactory.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TeamsAppOperatingContext } from \"../operatingcontext/TeamsAppOperatingContext\";\nimport { StandardOperatingContext } from \"../operatingcontext/StandardOperatingContext\";\nimport { IController } from \"./IController\";\nimport { Logger } from \"@azure/msal-common\";\nimport { Configuration } from \"../config/Configuration\";\nimport { version, name } from \"../packageMetadata\";\n\nexport class ControllerFactory {\n    protected config: Configuration;\n    protected logger: Logger;\n\n    constructor(config: Configuration) {\n        this.config = config;\n        const loggerOptions = {\n            loggerCallback: undefined,\n            piiLoggingEnabled: false,\n            logLevel: undefined,\n            correlationId: undefined,\n        };\n        this.logger = new Logger(loggerOptions, name, version);\n    }\n\n    async createController(): Promise<IController> {\n        const standard = new StandardOperatingContext(this.config);\n        const metaOS = new TeamsAppOperatingContext(this.config);\n\n        const operatingContexts = [standard.initialize(), metaOS.initialize()];\n\n        return Promise.all(operatingContexts).then(async () => {\n            if (metaOS.isAvailable()) {\n                /*\n                 * pull down metaos module\n                 * create associated controller\n                 */\n                // return await StandardController.createController(standard);\n                const controller = await import(\"./StandardController\");\n                return await controller.StandardController.createController(\n                    standard\n                );\n            } else if (standard.isAvailable()) {\n                const controller = await import(\"./StandardController\");\n                return await controller.StandardController.createController(\n                    standard\n                );\n            }\n\n            throw new Error(\"No controller found.\");\n        });\n    }\n}\n"],"mappings":";;;;;;;;AAOA;AACA;AACA;AAGA;AA0CC,MAAAA,iBAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}