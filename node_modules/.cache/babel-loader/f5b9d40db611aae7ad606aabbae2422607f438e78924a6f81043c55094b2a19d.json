{"ast":null,"code":"/*! @azure/msal-common v14.7.0 2024-02-07 */\n'use strict';\n\nimport { ThrottlingConstants, Constants, HeaderNames } from '../utils/Constants.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass ThrottlingUtils {\n  /**\n   * Prepares a RequestThumbprint to be stored as a key.\n   * @param thumbprint\n   */\n  static generateThrottlingStorageKey(thumbprint) {\n    return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\n  }\n  /**\n   * Performs necessary throttling checks before a network request.\n   * @param cacheManager\n   * @param thumbprint\n   */\n  static preProcess(cacheManager, thumbprint) {\n    const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n    const value = cacheManager.getThrottlingCache(key);\n    if (value) {\n      if (value.throttleTime < Date.now()) {\n        cacheManager.removeItem(key);\n        return;\n      }\n      throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n    }\n  }\n  /**\n   * Performs necessary throttling checks after a network request.\n   * @param cacheManager\n   * @param thumbprint\n   * @param response\n   */\n  static postProcess(cacheManager, thumbprint, response) {\n    if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n      const thumbprintValue = {\n        throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n        error: response.body.error,\n        errorCodes: response.body.error_codes,\n        errorMessage: response.body.error_description,\n        subError: response.body.suberror\n      };\n      cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n    }\n  }\n  /**\n   * Checks a NetworkResponse object's status codes against 429 or 5xx\n   * @param response\n   */\n  static checkResponseStatus(response) {\n    return response.status === 429 || response.status >= 500 && response.status < 600;\n  }\n  /**\n   * Checks a NetworkResponse object's RetryAfter header\n   * @param response\n   */\n  static checkResponseForRetryAfter(response) {\n    if (response.headers) {\n      return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n    }\n    return false;\n  }\n  /**\n   * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\n   * @param throttleTime\n   */\n  static calculateThrottleTime(throttleTime) {\n    const time = throttleTime <= 0 ? 0 : throttleTime;\n    const currentSeconds = Date.now() / 1000;\n    return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n  }\n  static removeThrottle(cacheManager, clientId, request, homeAccountIdentifier) {\n    const thumbprint = {\n      clientId: clientId,\n      authority: request.authority,\n      scopes: request.scopes,\n      homeAccountIdentifier: homeAccountIdentifier,\n      claims: request.claims,\n      authenticationScheme: request.authenticationScheme,\n      resourceRequestMethod: request.resourceRequestMethod,\n      resourceRequestUri: request.resourceRequestUri,\n      shrClaims: request.shrClaims,\n      sshKid: request.sshKid\n    };\n    const key = this.generateThrottlingStorageKey(thumbprint);\n    cacheManager.removeItem(key);\n  }\n}\nexport { ThrottlingUtils };","map":{"version":3,"names":["ThrottlingUtils","generateThrottlingStorageKey","thumbprint","ThrottlingConstants","THROTTLING_PREFIX","JSON","stringify","preProcess","cacheManager","key","value","getThrottlingCache","throttleTime","Date","now","removeItem","ServerError","errorCodes","join","Constants","EMPTY_STRING","errorMessage","subError","postProcess","response","checkResponseStatus","checkResponseForRetryAfter","thumbprintValue","calculateThrottleTime","parseInt","headers","HeaderNames","RETRY_AFTER","error","body","error_codes","error_description","suberror","setThrottlingCache","status","hasOwnProperty","time","currentSeconds","Math","floor","min","DEFAULT_THROTTLE_TIME_SECONDS","DEFAULT_MAX_THROTTLE_TIME_SECONDS","removeThrottle","clientId","request","homeAccountIdentifier","authority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\network\\ThrottlingUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { NetworkResponse } from \"./NetworkManager\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport {\n    HeaderNames,\n    ThrottlingConstants,\n    Constants,\n} from \"../utils/Constants\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ServerError } from \"../error/ServerError\";\nimport { RequestThumbprint } from \"./RequestThumbprint\";\nimport { ThrottlingEntity } from \"../cache/entities/ThrottlingEntity\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\n\n/** @internal */\nexport class ThrottlingUtils {\n    /**\n     * Prepares a RequestThumbprint to be stored as a key.\n     * @param thumbprint\n     */\n    static generateThrottlingStorageKey(thumbprint: RequestThumbprint): string {\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(\n            thumbprint\n        )}`;\n    }\n\n    /**\n     * Performs necessary throttling checks before a network request.\n     * @param cacheManager\n     * @param thumbprint\n     */\n    static preProcess(\n        cacheManager: CacheManager,\n        thumbprint: RequestThumbprint\n    ): void {\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n        const value = cacheManager.getThrottlingCache(key);\n\n        if (value) {\n            if (value.throttleTime < Date.now()) {\n                cacheManager.removeItem(key);\n                return;\n            }\n            throw new ServerError(\n                value.errorCodes?.join(\" \") || Constants.EMPTY_STRING,\n                value.errorMessage,\n                value.subError\n            );\n        }\n    }\n\n    /**\n     * Performs necessary throttling checks after a network request.\n     * @param cacheManager\n     * @param thumbprint\n     * @param response\n     */\n    static postProcess(\n        cacheManager: CacheManager,\n        thumbprint: RequestThumbprint,\n        response: NetworkResponse<ServerAuthorizationTokenResponse>\n    ): void {\n        if (\n            ThrottlingUtils.checkResponseStatus(response) ||\n            ThrottlingUtils.checkResponseForRetryAfter(response)\n        ) {\n            const thumbprintValue: ThrottlingEntity = {\n                throttleTime: ThrottlingUtils.calculateThrottleTime(\n                    parseInt(response.headers[HeaderNames.RETRY_AFTER])\n                ),\n                error: response.body.error,\n                errorCodes: response.body.error_codes,\n                errorMessage: response.body.error_description,\n                subError: response.body.suberror,\n            };\n            cacheManager.setThrottlingCache(\n                ThrottlingUtils.generateThrottlingStorageKey(thumbprint),\n                thumbprintValue\n            );\n        }\n    }\n\n    /**\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\n     * @param response\n     */\n    static checkResponseStatus(\n        response: NetworkResponse<ServerAuthorizationTokenResponse>\n    ): boolean {\n        return (\n            response.status === 429 ||\n            (response.status >= 500 && response.status < 600)\n        );\n    }\n\n    /**\n     * Checks a NetworkResponse object's RetryAfter header\n     * @param response\n     */\n    static checkResponseForRetryAfter(\n        response: NetworkResponse<ServerAuthorizationTokenResponse>\n    ): boolean {\n        if (response.headers) {\n            return (\n                response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) &&\n                (response.status < 200 || response.status >= 300)\n            );\n        }\n        return false;\n    }\n\n    /**\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\n     * @param throttleTime\n     */\n    static calculateThrottleTime(throttleTime: number): number {\n        const time = throttleTime <= 0 ? 0 : throttleTime;\n\n        const currentSeconds = Date.now() / 1000;\n        return Math.floor(\n            Math.min(\n                currentSeconds +\n                    (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS),\n                currentSeconds +\n                    ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS\n            ) * 1000\n        );\n    }\n\n    static removeThrottle(\n        cacheManager: CacheManager,\n        clientId: string,\n        request: BaseAuthRequest,\n        homeAccountIdentifier?: string\n    ): void {\n        const thumbprint: RequestThumbprint = {\n            clientId: clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            homeAccountIdentifier: homeAccountIdentifier,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n        };\n\n        const key = this.generateThrottlingStorageKey(thumbprint);\n        cacheManager.removeItem(key);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}