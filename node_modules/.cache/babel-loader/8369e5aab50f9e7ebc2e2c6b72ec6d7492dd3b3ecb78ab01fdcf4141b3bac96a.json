{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { AuthError } from '../error/AuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst DEFAULT_CRYPTO_IMPLEMENTATION = {\n  createNewGuid: () => {\n    const notImplErr = \"Crypto interface - createNewGuid() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  base64Decode: () => {\n    const notImplErr = \"Crypto interface - base64Decode() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  base64Encode: () => {\n    const notImplErr = \"Crypto interface - base64Encode() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  async generatePkceCodes() {\n    const notImplErr = \"Crypto interface - generatePkceCodes() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  async getPublicKeyThumbprint() {\n    const notImplErr = \"Crypto interface - getPublicKeyThumbprint() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  async removeTokenBindingKey() {\n    const notImplErr = \"Crypto interface - removeTokenBindingKey() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  async clearKeystore() {\n    const notImplErr = \"Crypto interface - clearKeystore() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  async signJwt() {\n    const notImplErr = \"Crypto interface - signJwt() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  },\n  async hashString() {\n    const notImplErr = \"Crypto interface - hashString() has not been implemented\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  }\n};\nexport { DEFAULT_CRYPTO_IMPLEMENTATION };","map":{"version":3,"names":["createNewGuid","notImplErr","AuthError","createUnexpectedError","base64Decode","base64Encode","generatePkceCodes","getPublicKeyThumbprint","removeTokenBindingKey","clearKeystore","signJwt"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\crypto\\ICrypto.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"../error/AuthError\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\nimport { SignedHttpRequest } from \"./SignedHttpRequest\";\n\n/**\n * The PkceCodes type describes the structure\n * of objects that contain PKCE code\n * challenge and verifier pairs\n */\nexport type PkceCodes = {\n    verifier: string;\n    challenge: string;\n};\n\nexport type SignedHttpRequestParameters = Pick<\n    BaseAuthRequest,\n    \"resourceRequestMethod\" | \"resourceRequestUri\" | \"shrClaims\" | \"shrNonce\"\n> & {\n    correlationId?: string;\n};\n\n/**\n * Interface for crypto functions used by library\n */\nexport interface ICrypto {\n    /**\n     * Creates a guid randomly.\n     */\n    createNewGuid(): string;\n    /**\n     * base64 Encode string\n     * @param input\n     */\n    base64Encode(input: string): string;\n    /**\n     * base64 decode string\n     * @param input\n     */\n    base64Decode(input: string): string;\n    /**\n     * Generate PKCE codes for OAuth. See RFC here: https://tools.ietf.org/html/rfc7636\n     */\n    generatePkceCodes(): Promise<PkceCodes>;\n    /**\n     * Generates an JWK RSA S256 Thumbprint\n     * @param request\n     */\n    getPublicKeyThumbprint(\n        request: SignedHttpRequestParameters\n    ): Promise<string>;\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid\n     */\n    removeTokenBindingKey(kid: string): Promise<boolean>;\n    /**\n     * Removes all cryptographic keys from IndexedDB storage\n     */\n    clearKeystore(): Promise<boolean>;\n    /**\n     * Returns a signed proof-of-possession token with a given acces token that contains a cnf claim with the required kid.\n     * @param accessToken\n     */\n    signJwt(\n        payload: SignedHttpRequest,\n        kid: string,\n        correlationId?: string\n    ): Promise<string>;\n    /**\n     * Returns the SHA-256 hash of an input string\n     * @param plainText\n     */\n    hashString(plainText: string): Promise<string>;\n}\n\nexport const DEFAULT_CRYPTO_IMPLEMENTATION: ICrypto = {\n    createNewGuid: (): string => {\n        const notImplErr =\n            \"Crypto interface - createNewGuid() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    base64Decode: (): string => {\n        const notImplErr =\n            \"Crypto interface - base64Decode() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    base64Encode: (): string => {\n        const notImplErr =\n            \"Crypto interface - base64Encode() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async generatePkceCodes(): Promise<PkceCodes> {\n        const notImplErr =\n            \"Crypto interface - generatePkceCodes() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async getPublicKeyThumbprint(): Promise<string> {\n        const notImplErr =\n            \"Crypto interface - getPublicKeyThumbprint() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async removeTokenBindingKey(): Promise<boolean> {\n        const notImplErr =\n            \"Crypto interface - removeTokenBindingKey() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async clearKeystore(): Promise<boolean> {\n        const notImplErr =\n            \"Crypto interface - clearKeystore() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async signJwt(): Promise<string> {\n        const notImplErr =\n            \"Crypto interface - signJwt() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n    async hashString(): Promise<string> {\n        const notImplErr =\n            \"Crypto interface - hashString() has not been implemented\";\n        throw AuthError.createUnexpectedError(notImplErr);\n    },\n};\n"],"mappings":";;;;;AAMA;AACA;AAEA;;;EAIGA,aAAA,EAAAA,CAAA;IACG,MAAAC,UAAkB;IACZ,MAAEC,SAAO,CAAAC,qBAAA,CAAAF,UAAA;GACR;EACXG,YAAA,EAAAA,CAAA;IAEU,MAAAH,UAAA,+DAEe;IAEV,MAAAC,SAAG,CAAAC,qBAAO,CAAAF,UAAA;GACzB;EAEFI,YAAA,EAAAA,CAAA;;IAEG,MAAAH,SAAA,CAAAC,qBAAA,CAAAF,UAAA;EACH;EACI,MAAAK,kBAAA;;IAEG,MAAAJ,SAAA,CAAAC,qBAAA,CAAAF,UAAA;GACU;EACb,MAAAM,uBAAA;;;EAGG;EACH,MAAAC,qBAA0BA,CAAA;IAC1B,MAAAP,UAAA;;;EAGG,MAAAQ,cAAA;IACH,MAAAR,UAAoB,GAAM,6DAAU;IACpC,MAAAC,SAAA,CAAAC,qBAAA,CAAAF,UAAA;;EAEG,MAAAS,QAAA;IACH,MAAAT,UAAqB,0DAAmB;IACxC,MAAAC,SAAA,CAAAC,qBAAA,CAAAF,UAAA;;;IAGG,MAAAA,UAAA;IACmB,MAAAC,SAAA,CAAAC,qBACT,CAAAF,UAAA;EAEb"},"metadata":{},"sourceType":"module","externalDependencies":[]}