{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { PerformanceEvents, PromptValue, invokeAsync, Constants, AuthError, UrlString, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { InteractionType } from '../utils/BrowserConstants.mjs';\nimport { SilentHandler } from '../interaction_handler/SilentHandler.mjs';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.mjs';\nimport { NativeInteractionClient } from './NativeInteractionClient.mjs';\nimport { silentPromptValueError, silentLogoutUnsupported, nativeConnectionNotEstablished } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SilentIframeClient extends StandardInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n    this.apiId = apiId;\n    this.nativeStorage = nativeStorageImpl;\n  }\n  /**\n   * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\n   * @param request\n   */\n  async acquireToken(request) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n    // Check that we have some SSO data\n    if (!request.loginHint && !request.sid && (!request.account || !request.account.username)) {\n      this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n    }\n    // Check that prompt is set to none or no_session, throw error if it is set to anything else.\n    if (request.prompt && request.prompt !== PromptValue.NONE && request.prompt !== PromptValue.NO_SESSION) {\n      throw createBrowserAuthError(silentPromptValueError);\n    }\n    // Create silent request\n    const silentRequest = await invokeAsync(this.initializeAuthorizationRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)({\n      ...request,\n      prompt: request.prompt || PromptValue.NONE\n    }, InteractionType.Silent);\n    this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);\n    const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n    try {\n      // Initialize the client\n      const authClient = await invokeAsync(this.createAuthCodeClient.bind(this), PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, request.correlationId)(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions);\n      return await invokeAsync(this.silentTokenHelper.bind(this), PerformanceEvents.SilentIframeClientTokenHelper, this.logger, this.performanceClient, request.correlationId)(authClient, silentRequest);\n    } catch (e) {\n      if (e instanceof AuthError) {\n        e.setCorrelationId(this.correlationId);\n        serverTelemetryManager.cacheFailedRequest(e);\n      }\n      this.browserStorage.cleanRequestByState(silentRequest.state);\n      throw e;\n    }\n  }\n  /**\n   * Currently Unsupported\n   */\n  logout() {\n    // Synchronous so we must reject\n    return Promise.reject(createBrowserAuthError(silentLogoutUnsupported));\n  }\n  /**\n   * Helper which acquires an authorization code silently using a hidden iframe from given url\n   * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\n   * @param navigateUrl\n   * @param userRequestScopes\n   */\n  async silentTokenHelper(authClient, silentRequest) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientTokenHelper, silentRequest.correlationId);\n    // Create auth code request and generate PKCE params\n    const authCodeRequest = await invokeAsync(this.initializeAuthorizationCodeRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest);\n    // Create authorize request url\n    const navigateUrl = await invokeAsync(authClient.getAuthCodeUrl.bind(authClient), PerformanceEvents.GetAuthCodeUrl, this.logger, this.performanceClient, silentRequest.correlationId)({\n      ...silentRequest,\n      nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\n    });\n    // Create silent handler\n    const silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient);\n    // Get the frame handle for the silent request\n    const msalFrame = await invokeAsync(silentHandler.initiateAuthRequest.bind(silentHandler), PerformanceEvents.SilentHandlerInitiateAuthRequest, this.logger, this.performanceClient, silentRequest.correlationId)(navigateUrl);\n    // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n    const hash = await invokeAsync(silentHandler.monitorIframeForHash.bind(silentHandler), PerformanceEvents.SilentHandlerInitiateAuthRequest, this.logger, this.performanceClient, silentRequest.correlationId)(msalFrame, this.config.system.iframeHashTimeout);\n    // Deserialize hash fragment response parameters.\n    const serverParams = UrlString.getDeserializedHash(hash);\n    const state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Silent, authCodeRequest.correlationId);\n    if (serverParams.accountId) {\n      this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n      if (!this.nativeMessageHandler) {\n        throw createBrowserAuthError(nativeConnectionNotEstablished);\n      }\n      const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, this.correlationId);\n      const {\n        userRequestState\n      } = ProtocolUtils.parseRequestState(this.browserCrypto, state);\n      return invokeAsync(nativeInteractionClient.acquireToken.bind(nativeInteractionClient), PerformanceEvents.NativeInteractionClientAcquireToken, this.logger, this.performanceClient, silentRequest.correlationId)({\n        ...silentRequest,\n        state: userRequestState,\n        prompt: silentRequest.prompt || PromptValue.NONE\n      }).finally(() => {\n        this.browserStorage.cleanRequestByState(state);\n      });\n    }\n    // Handle response from hash string\n    return invokeAsync(silentHandler.handleCodeResponseFromHash.bind(silentHandler), PerformanceEvents.HandleCodeResponseFromHash, this.logger, this.performanceClient, silentRequest.correlationId)(hash, state, authClient.authority, this.networkClient);\n  }\n}\nexport { SilentIframeClient };","map":{"version":3,"names":["SilentIframeClient","StandardInteractionClient","constructor","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","nativeStorage","addQueueMeasurement","PerformanceEvents","SilentIframeClientAcquireToken","request","loginHint","prompt","PromptValue","NONE"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentIframeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    Logger,\n    PromptValue,\n    CommonAuthorizationCodeRequest,\n    AuthorizationCodeClient,\n    AuthError,\n    Constants,\n    UrlString,\n    ServerAuthorizationCodeResponse,\n    ProtocolUtils,\n    IPerformanceClient,\n    PerformanceEvents,\n    invokeAsync,\n} from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport { SilentHandler } from \"../interaction_handler/SilentHandler\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\n\nexport class SilentIframeClient extends StandardInteractionClient {\n    protected apiId: ApiId;\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        apiId: ApiId,\n        performanceClient: IPerformanceClient,\n        nativeStorageImpl: BrowserCacheManager,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            storageImpl,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            nativeMessageHandler,\n            correlationId\n        );\n        this.apiId = apiId;\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\n     * @param request\n     */\n    async acquireToken(\n        request: SsoSilentRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentIframeClientAcquireToken,\n            request.correlationId\n        );\n        // Check that we have some SSO data\n        if (\n            !request.loginHint &&\n            !request.sid &&\n            (!request.account || !request.account.username)\n        ) {\n            this.logger.warning(\n                \"No user hint provided. The authorization server may need more information to complete this request.\"\n            );\n        }\n\n        // Check that prompt is set to none or no_session, throw error if it is set to anything else.\n        if (\n            request.prompt &&\n            request.prompt !== PromptValue.NONE &&\n            request.prompt !== PromptValue.NO_SESSION\n        ) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.silentPromptValueError\n            );\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await invokeAsync(\n            this.initializeAuthorizationRequest.bind(this),\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(\n            {\n                ...request,\n                prompt: request.prompt || PromptValue.NONE,\n            },\n            InteractionType.Silent\n        );\n        this.browserStorage.updateCacheEntries(\n            silentRequest.state,\n            silentRequest.nonce,\n            silentRequest.authority,\n            silentRequest.loginHint || Constants.EMPTY_STRING,\n            silentRequest.account || null\n        );\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            this.apiId\n        );\n\n        try {\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(\n                serverTelemetryManager,\n                silentRequest.authority,\n                silentRequest.azureCloudOptions\n            );\n\n            return await invokeAsync(\n                this.silentTokenHelper.bind(this),\n                PerformanceEvents.SilentIframeClientTokenHelper,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(authClient, silentRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.browserStorage.cleanRequestByState(silentRequest.state);\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(\n            createBrowserAuthError(\n                BrowserAuthErrorCodes.silentLogoutUnsupported\n            )\n        );\n    }\n\n    /**\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\n     * @param navigateUrl\n     * @param userRequestScopes\n     */\n    protected async silentTokenHelper(\n        authClient: AuthorizationCodeClient,\n        silentRequest: AuthorizationUrlRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentIframeClientTokenHelper,\n            silentRequest.correlationId\n        );\n\n        // Create auth code request and generate PKCE params\n        const authCodeRequest: CommonAuthorizationCodeRequest =\n            await invokeAsync(\n                this.initializeAuthorizationCodeRequest.bind(this),\n                PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n                this.logger,\n                this.performanceClient,\n                silentRequest.correlationId\n            )(silentRequest);\n\n        // Create authorize request url\n        const navigateUrl = await invokeAsync(\n            authClient.getAuthCodeUrl.bind(authClient),\n            PerformanceEvents.GetAuthCodeUrl,\n            this.logger,\n            this.performanceClient,\n            silentRequest.correlationId\n        )({\n            ...silentRequest,\n            nativeBroker: NativeMessageHandler.isNativeAvailable(\n                this.config,\n                this.logger,\n                this.nativeMessageHandler,\n                silentRequest.authenticationScheme\n            ),\n        });\n\n        // Create silent handler\n        const silentHandler = new SilentHandler(\n            authClient,\n            this.browserStorage,\n            authCodeRequest,\n            this.logger,\n            this.config.system,\n            this.performanceClient\n        );\n        // Get the frame handle for the silent request\n        const msalFrame = await invokeAsync(\n            silentHandler.initiateAuthRequest.bind(silentHandler),\n            PerformanceEvents.SilentHandlerInitiateAuthRequest,\n            this.logger,\n            this.performanceClient,\n            silentRequest.correlationId\n        )(navigateUrl);\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const hash = await invokeAsync(\n            silentHandler.monitorIframeForHash.bind(silentHandler),\n            PerformanceEvents.SilentHandlerInitiateAuthRequest,\n            this.logger,\n            this.performanceClient,\n            silentRequest.correlationId\n        )(msalFrame, this.config.system.iframeHashTimeout);\n        // Deserialize hash fragment response parameters.\n        const serverParams: ServerAuthorizationCodeResponse =\n            UrlString.getDeserializedHash(hash);\n        const state = this.validateAndExtractStateFromHash(\n            serverParams,\n            InteractionType.Silent,\n            authCodeRequest.correlationId\n        );\n\n        if (serverParams.accountId) {\n            this.logger.verbose(\n                \"Account id found in hash, calling WAM for token\"\n            );\n            if (!this.nativeMessageHandler) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.nativeConnectionNotEstablished\n                );\n            }\n            const nativeInteractionClient = new NativeInteractionClient(\n                this.config,\n                this.browserStorage,\n                this.browserCrypto,\n                this.logger,\n                this.eventHandler,\n                this.navigationClient,\n                this.apiId,\n                this.performanceClient,\n                this.nativeMessageHandler,\n                serverParams.accountId,\n                this.browserStorage,\n                this.correlationId\n            );\n            const { userRequestState } = ProtocolUtils.parseRequestState(\n                this.browserCrypto,\n                state\n            );\n            return invokeAsync(\n                nativeInteractionClient.acquireToken.bind(\n                    nativeInteractionClient\n                ),\n                PerformanceEvents.NativeInteractionClientAcquireToken,\n                this.logger,\n                this.performanceClient,\n                silentRequest.correlationId\n            )({\n                ...silentRequest,\n                state: userRequestState,\n                prompt: silentRequest.prompt || PromptValue.NONE,\n            }).finally(() => {\n                this.browserStorage.cleanRequestByState(state);\n            });\n        }\n\n        // Handle response from hash string\n        return invokeAsync(\n            silentHandler.handleCodeResponseFromHash.bind(silentHandler),\n            PerformanceEvents.HandleCodeResponseFromHash,\n            this.logger,\n            this.performanceClient,\n            silentRequest.correlationId\n        )(hash, state, authClient.authority, this.networkClient);\n    }\n}\n"],"mappings":";;;;;;;;;;;;AAKA;AAeA;AACA;AACA;AAea,MAAAA,kBAAA,SAAAC,yBAAoD;EAC7DC,WAAUA,CAAAC,MAAO,EAAAC,WAAM,EAAAC,aAAA,EAAAC,MAAA,EAAAC,YAAA,EAAAC,gBAAA,EAAAC,KAAA,EAAAC,iBAAA,EAAAC,iBAAA,EAAAC,oBAAA,EAAAC,aAAA;IACvB,KAAS,CAACV,MAAA,EAAAC,WAAe,EAAAC,aAAmB,EAACC,MAAA,EAAAC,YAAA,EAAAC,gBAAA,EAAAE,iBAAA,EAAAE,oBAAA,EAAAC,aAAA;IAGzC,KAAAJ,KAAA,GAAAA,KAA4B;IA2BhC,KAAAK,aAAA,GAAAH,iBAAA;;;AAGG;;AAuFH;;IAEG,KAAAD,iBAAA,CAAAK,mBAAA,CAAAC,iBAAA,CAAAC,8BAAA,EAAAC,OAAA,CAAAL,aAAA;IACH;IASA,KAAAK,OAAA,CAAAC,SAAA,I;;;IAKG;IACa,IAAAD,OAAA,CAAAE,MAAA,IA2HnBF,OAAA,CAAAE,MAAA,KAAAC,WAAA,CAAAC,IAAA,I"},"metadata":{},"sourceType":"module","externalDependencies":[]}