{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  paths: {}\n};\nexport const intitialStatePathMethod = {\n  operationId: \"\",\n  summary: \"\",\n  description: \"\",\n  tags: [],\n  parameters: [],\n  responses: {\n    default: {\n      description: \"Default response\"\n    }\n  },\n  externalDocs: {\n    description: \"\",\n    url: \"\"\n  },\n  requestBody: {\n    required: false,\n    description: \"\",\n    content: {}\n  },\n  responseBody: {\n    description: \"\",\n    content: {}\n  },\n  security: [],\n  links: {},\n  callbacks: {}\n};\nconst mainTabsSlice = createSlice({\n  name: \"main\",\n  initialState,\n  reducers: {\n    addPath: (state, action) => {\n      const {\n        pathName\n      } = action.payload;\n      return {\n        ...state,\n        paths: {\n          ...state.paths,\n          [pathName]: {\n            get: {\n              ...intitialStatePathMethod\n            }\n          }\n        }\n      };\n    },\n    updatePath: (state, action) => {\n      const {\n        pathName,\n        methodName,\n        methodKey,\n        data\n      } = action.payload;\n      return {\n        ...state,\n        paths: {\n          ...state.paths,\n          [pathName]: {\n            ...state.paths[pathName],\n            [methodName]: {\n              ...state.paths[pathName][methodName],\n              [methodKey]: data\n            }\n          }\n        }\n      };\n    },\n    addMethod: (state, action) => {\n      const {\n        pathName,\n        methodName\n      } = action.payload;\n      return {\n        ...state,\n        paths: {\n          ...state.paths,\n          [pathName]: {\n            ...state.paths[pathName],\n            [methodName]: {\n              ...intitialStatePathMethod\n            }\n          }\n        }\n      };\n    },\n    deleteMethod: (state, action) => {\n      const {\n        pathName,\n        methodName\n      } = action.payload;\n      let newState = {\n        ...state,\n        paths: {\n          ...state.paths,\n          [pathName]: {\n            ...state.paths[pathName],\n            [methodName]: {\n              ...intitialStatePathMethod\n            }\n          }\n        }\n      };\n      delete newState.paths[pathName][methodName];\n      return {\n        ...newState\n      };\n    },\n    copyMethod: (state, action) => {\n      const {\n        pathName,\n        methodName,\n        data\n      } = action.payload;\n      let newState = {\n        ...state,\n        paths: {\n          ...state.paths,\n          [pathName]: {\n            ...state.paths[pathName],\n            [methodName]: {\n              ...data\n            }\n          }\n        }\n      };\n      return {\n        ...newState\n      };\n    }\n  }\n});\nexport const {\n  addPath,\n  addMethod,\n  updatePath,\n  deleteMethod,\n  copyMethod\n} = mainTabsSlice.actions;\nexport const selectDetails = state => state.details.paths;\nexport default mainTabsSlice.reducer;\nexport const VALID_METHODS = [\"get\", \"post\", \"put\", \"patch\", \"delete\", \"options\", \"trace\", \"head\"];\nexport const DEFAULT_PARAM_OBJ = {\n  name: \"newParam\",\n  description: \"\",\n  in: \"query\",\n  required: false,\n  schema: {\n    type: \"string\",\n    format: \"date\",\n    enum: []\n  },\n  default: \"Default\",\n  minRequired: false,\n  minLength: 0,\n  maxRequired: false,\n  maxLength: 10,\n  multiOf: 0,\n  uniqueItems: false,\n  pattern: \"Default Pattern\"\n};","map":{"version":3,"names":["createSlice","initialState","paths","intitialStatePathMethod","operationId","summary","description","tags","parameters","responses","default","externalDocs","url","requestBody","required","content","responseBody","security","links","callbacks","mainTabsSlice","name","reducers","addPath","state","action","pathName","payload","get","updatePath","methodName","methodKey","data","addMethod","deleteMethod","newState","copyMethod","actions","selectDetails","details","reducer","VALID_METHODS","DEFAULT_PARAM_OBJ","in","schema","type","format","enum","minRequired","minLength","maxRequired","maxLength","multiOf","uniqueItems","pattern"],"sources":["D:/react-typescript/intelli-gui/src/store/reducers/mainTabsSlice.ts"],"sourcesContent":["import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport type MainTabsState = any;\r\nconst initialState: MainTabsState = {\r\n  paths: {},\r\n};\r\n\r\nexport const intitialStatePathMethod = {\r\n  operationId: \"\",\r\n  summary: \"\",\r\n  description: \"\",\r\n  tags: [],\r\n  parameters: [],\r\n  responses: {\r\n    default: {\r\n      description: \"Default response\",\r\n    },\r\n  },\r\n  externalDocs: {\r\n    description: \"\",\r\n    url: \"\",\r\n  },\r\n  requestBody: {\r\n    required: false,\r\n    description: \"\",\r\n    content: {},\r\n  },\r\n  responseBody: {\r\n    description: \"\",\r\n    content: {},\r\n  },\r\n  security: [],\r\n  links: {},\r\n  callbacks: {},\r\n};\r\n\r\nconst mainTabsSlice = createSlice({\r\n  name: \"main\",\r\n  initialState,\r\n  reducers: {\r\n    addPath: (state: any, action: PayloadAction<MainTabsState>) => {\r\n      const { pathName } = action.payload;\r\n      return {\r\n        ...state,\r\n        paths: {\r\n          ...state.paths,\r\n          [pathName]: {\r\n            get: {\r\n              ...intitialStatePathMethod,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    },\r\n    updatePath: (state: any, action: PayloadAction<MainTabsState>) => {\r\n      const { pathName, methodName, methodKey, data } = action.payload;\r\n      return {\r\n        ...state,\r\n        paths: {\r\n          ...state.paths,\r\n          [pathName]: {\r\n            ...state.paths[pathName],\r\n            [methodName]: {\r\n              ...state.paths[pathName][methodName],\r\n              [methodKey]: data,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    },\r\n    addMethod: (state: any, action: PayloadAction<MainTabsState>) => {\r\n      const { pathName, methodName } = action.payload;\r\n      return {\r\n        ...state,\r\n        paths: {\r\n          ...state.paths,\r\n          [pathName]: {\r\n            ...state.paths[pathName],\r\n            [methodName]: {\r\n              ...intitialStatePathMethod,\r\n            },\r\n          },\r\n        },\r\n      };\r\n    },\r\n\r\n    deleteMethod: (state: any, action: PayloadAction<MainTabsState>) => {\r\n      const { pathName, methodName } = action.payload;\r\n      let newState = {\r\n        ...state,\r\n        paths: {\r\n          ...state.paths,\r\n          [pathName]: {\r\n            ...state.paths[pathName],\r\n            [methodName]: {\r\n              ...intitialStatePathMethod,\r\n            },\r\n          },\r\n        },\r\n      };\r\n      delete newState.paths[pathName][methodName];\r\n\r\n      return {\r\n        ...newState,\r\n      };\r\n    },\r\n    copyMethod: (state: any, action: PayloadAction<MainTabsState>) => {\r\n      const { pathName, methodName, data } = action.payload;\r\n      let newState = {\r\n        ...state,\r\n        paths: {\r\n          ...state.paths,\r\n          [pathName]: {\r\n            ...state.paths[pathName],\r\n            [methodName]: {\r\n              ...data,\r\n            },\r\n          },\r\n        },\r\n      };\r\n      return { ...newState };\r\n    },\r\n  },\r\n});\r\nexport const { addPath, addMethod, updatePath, deleteMethod, copyMethod } =\r\n  mainTabsSlice.actions;\r\nexport const selectDetails = (state: { details: MainTabsState }) =>\r\n  state.details.paths;\r\n\r\nexport default mainTabsSlice.reducer;\r\n\r\nexport const VALID_METHODS = [\r\n  \"get\",\r\n  \"post\",\r\n  \"put\",\r\n  \"patch\",\r\n  \"delete\",\r\n  \"options\",\r\n  \"trace\",\r\n  \"head\",\r\n];\r\n\r\nexport const DEFAULT_PARAM_OBJ = {\r\n  name: \"newParam\",\r\n  description: \"\",\r\n  in: \"query\",\r\n  required: false,\r\n  schema: {\r\n    type: \"string\",\r\n    format: \"date\",\r\n    enum: [],\r\n  },\r\n  default: \"Default\",\r\n  minRequired: false,\r\n  minLength: 0,\r\n  maxRequired: false,\r\n  maxLength: 10,\r\n  multiOf: 0,\r\n  uniqueItems: false,\r\n  pattern: \"Default Pattern\",\r\n};\r\n"],"mappings":"AAAA,SAAwBA,WAAW,QAAQ,kBAAkB;AAG7D,MAAMC,YAA2B,GAAG;EAClCC,KAAK,EAAE,CAAC;AACV,CAAC;AAED,OAAO,MAAMC,uBAAuB,GAAG;EACrCC,WAAW,EAAE,EAAE;EACfC,OAAO,EAAE,EAAE;EACXC,WAAW,EAAE,EAAE;EACfC,IAAI,EAAE,EAAE;EACRC,UAAU,EAAE,EAAE;EACdC,SAAS,EAAE;IACTC,OAAO,EAAE;MACPJ,WAAW,EAAE;IACf;EACF,CAAC;EACDK,YAAY,EAAE;IACZL,WAAW,EAAE,EAAE;IACfM,GAAG,EAAE;EACP,CAAC;EACDC,WAAW,EAAE;IACXC,QAAQ,EAAE,KAAK;IACfR,WAAW,EAAE,EAAE;IACfS,OAAO,EAAE,CAAC;EACZ,CAAC;EACDC,YAAY,EAAE;IACZV,WAAW,EAAE,EAAE;IACfS,OAAO,EAAE,CAAC;EACZ,CAAC;EACDE,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,CAAC,CAAC;EACTC,SAAS,EAAE,CAAC;AACd,CAAC;AAED,MAAMC,aAAa,GAAGpB,WAAW,CAAC;EAChCqB,IAAI,EAAE,MAAM;EACZpB,YAAY;EACZqB,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAU,EAAEC,MAAoC,KAAK;MAC7D,MAAM;QAAEC;MAAS,CAAC,GAAGD,MAAM,CAACE,OAAO;MACnC,OAAO;QACL,GAAGH,KAAK;QACRtB,KAAK,EAAE;UACL,GAAGsB,KAAK,CAACtB,KAAK;UACd,CAACwB,QAAQ,GAAG;YACVE,GAAG,EAAE;cACH,GAAGzB;YACL;UACF;QACF;MACF,CAAC;IACH,CAAC;IACD0B,UAAU,EAAEA,CAACL,KAAU,EAAEC,MAAoC,KAAK;MAChE,MAAM;QAAEC,QAAQ;QAAEI,UAAU;QAAEC,SAAS;QAAEC;MAAK,CAAC,GAAGP,MAAM,CAACE,OAAO;MAChE,OAAO;QACL,GAAGH,KAAK;QACRtB,KAAK,EAAE;UACL,GAAGsB,KAAK,CAACtB,KAAK;UACd,CAACwB,QAAQ,GAAG;YACV,GAAGF,KAAK,CAACtB,KAAK,CAACwB,QAAQ,CAAC;YACxB,CAACI,UAAU,GAAG;cACZ,GAAGN,KAAK,CAACtB,KAAK,CAACwB,QAAQ,CAAC,CAACI,UAAU,CAAC;cACpC,CAACC,SAAS,GAAGC;YACf;UACF;QACF;MACF,CAAC;IACH,CAAC;IACDC,SAAS,EAAEA,CAACT,KAAU,EAAEC,MAAoC,KAAK;MAC/D,MAAM;QAAEC,QAAQ;QAAEI;MAAW,CAAC,GAAGL,MAAM,CAACE,OAAO;MAC/C,OAAO;QACL,GAAGH,KAAK;QACRtB,KAAK,EAAE;UACL,GAAGsB,KAAK,CAACtB,KAAK;UACd,CAACwB,QAAQ,GAAG;YACV,GAAGF,KAAK,CAACtB,KAAK,CAACwB,QAAQ,CAAC;YACxB,CAACI,UAAU,GAAG;cACZ,GAAG3B;YACL;UACF;QACF;MACF,CAAC;IACH,CAAC;IAED+B,YAAY,EAAEA,CAACV,KAAU,EAAEC,MAAoC,KAAK;MAClE,MAAM;QAAEC,QAAQ;QAAEI;MAAW,CAAC,GAAGL,MAAM,CAACE,OAAO;MAC/C,IAAIQ,QAAQ,GAAG;QACb,GAAGX,KAAK;QACRtB,KAAK,EAAE;UACL,GAAGsB,KAAK,CAACtB,KAAK;UACd,CAACwB,QAAQ,GAAG;YACV,GAAGF,KAAK,CAACtB,KAAK,CAACwB,QAAQ,CAAC;YACxB,CAACI,UAAU,GAAG;cACZ,GAAG3B;YACL;UACF;QACF;MACF,CAAC;MACD,OAAOgC,QAAQ,CAACjC,KAAK,CAACwB,QAAQ,CAAC,CAACI,UAAU,CAAC;MAE3C,OAAO;QACL,GAAGK;MACL,CAAC;IACH,CAAC;IACDC,UAAU,EAAEA,CAACZ,KAAU,EAAEC,MAAoC,KAAK;MAChE,MAAM;QAAEC,QAAQ;QAAEI,UAAU;QAAEE;MAAK,CAAC,GAAGP,MAAM,CAACE,OAAO;MACrD,IAAIQ,QAAQ,GAAG;QACb,GAAGX,KAAK;QACRtB,KAAK,EAAE;UACL,GAAGsB,KAAK,CAACtB,KAAK;UACd,CAACwB,QAAQ,GAAG;YACV,GAAGF,KAAK,CAACtB,KAAK,CAACwB,QAAQ,CAAC;YACxB,CAACI,UAAU,GAAG;cACZ,GAAGE;YACL;UACF;QACF;MACF,CAAC;MACD,OAAO;QAAE,GAAGG;MAAS,CAAC;IACxB;EACF;AACF,CAAC,CAAC;AACF,OAAO,MAAM;EAAEZ,OAAO;EAAEU,SAAS;EAAEJ,UAAU;EAAEK,YAAY;EAAEE;AAAW,CAAC,GACvEhB,aAAa,CAACiB,OAAO;AACvB,OAAO,MAAMC,aAAa,GAAId,KAAiC,IAC7DA,KAAK,CAACe,OAAO,CAACrC,KAAK;AAErB,eAAekB,aAAa,CAACoB,OAAO;AAEpC,OAAO,MAAMC,aAAa,GAAG,CAC3B,KAAK,EACL,MAAM,EACN,KAAK,EACL,OAAO,EACP,QAAQ,EACR,SAAS,EACT,OAAO,EACP,MAAM,CACP;AAED,OAAO,MAAMC,iBAAiB,GAAG;EAC/BrB,IAAI,EAAE,UAAU;EAChBf,WAAW,EAAE,EAAE;EACfqC,EAAE,EAAE,OAAO;EACX7B,QAAQ,EAAE,KAAK;EACf8B,MAAM,EAAE;IACNC,IAAI,EAAE,QAAQ;IACdC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAE;EACR,CAAC;EACDrC,OAAO,EAAE,SAAS;EAClBsC,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAE,CAAC;EACZC,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE,KAAK;EAClBC,OAAO,EAAE;AACX,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}