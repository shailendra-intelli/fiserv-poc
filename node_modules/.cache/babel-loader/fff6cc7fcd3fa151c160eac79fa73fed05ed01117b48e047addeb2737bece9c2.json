{"ast":null,"code":"/*! @azure/msal-browser v3.9.0 2024-02-07 */\n'use strict';\n\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { PerformanceEvents, invokeAsync, SilentFlowClient } from '@azure/msal-common';\nimport { ApiId } from '../utils/BrowserConstants.mjs';\nimport { BrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { cryptoKeyNotFound } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SilentCacheClient extends StandardInteractionClient {\n  /**\n   * Returns unexpired tokens from the cache, if available\n   * @param silentRequest\n   */\n  async acquireToken(silentRequest) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\n    // Telemetry manager only used to increment cacheHits here\n    const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow);\n    const silentAuthClient = await this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions, silentRequest.account);\n    this.logger.verbose(\"Silent auth client created\");\n    try {\n      const response = await invokeAsync(silentAuthClient.acquireCachedToken.bind(silentAuthClient), PerformanceEvents.SilentFlowClientAcquireCachedToken, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest);\n      const authResponse = response[0];\n      this.performanceClient.addFields({\n        fromCache: true\n      }, silentRequest.correlationId);\n      return authResponse;\n    } catch (error) {\n      if (error instanceof BrowserAuthError && error.errorCode === cryptoKeyNotFound) {\n        this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n      }\n      throw error;\n    }\n  }\n  /**\n   * API to silenty clear the browser cache.\n   * @param logoutRequest\n   */\n  logout(logoutRequest) {\n    this.logger.verbose(\"logoutRedirect called\");\n    const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n    return this.clearCacheOnLogout(validLogoutRequest?.account);\n  }\n  /**\n   * Creates an Silent Flow Client with the given authority, or the default authority.\n   * @param serverTelemetryManager\n   * @param authorityUrl\n   */\n  async createSilentFlowClient(serverTelemetryManager, authorityUrl, azureCloudOptions, account) {\n    // Create auth module.\n    const clientConfig = await invokeAsync(this.getClientConfiguration.bind(this), PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)(serverTelemetryManager, authorityUrl, azureCloudOptions, account);\n    return new SilentFlowClient(clientConfig, this.performanceClient);\n  }\n  async initializeSilentRequest(request, account) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeSilentRequest, this.correlationId);\n    const baseRequest = await invokeAsync(this.initializeBaseRequest.bind(this), PerformanceEvents.InitializeBaseRequest, this.logger, this.performanceClient, this.correlationId)(request);\n    return {\n      ...request,\n      ...baseRequest,\n      account: account,\n      forceRefresh: request.forceRefresh || false\n    };\n  }\n}\nexport { SilentCacheClient };","map":{"version":3,"names":["SilentCacheClient","StandardInteractionClient","acquireToken","silentRequest","performanceClient","addQueueMeasurement","PerformanceEvents","SilentCacheClientAcquireToken","correlationId","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","silentAuthClient","createSilentFlowClient","authority","azureCloudOptions","account","logger","verbose","response","invokeAsync","acquireCachedToken","bind","SilentFlowClientAcquireCachedToken","authResponse","addFields","fromCache","error","BrowserAuthError","errorCode","cryptoKeyNotFound","logout","logoutRequest","validLogoutRequest","initializeLogoutRequest","clearCacheOnLogout","authorityUrl","clientConfig","getClientConfiguration","StandardInteractionClientGetClientConfiguration","SilentFlowClient","initializeSilentRequest","request","InitializeSilentRequest","baseRequest","initializeBaseRequest","InitializeBaseRequest","forceRefresh"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentCacheClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport {\n    CommonSilentFlowRequest,\n    SilentFlowClient,\n    ServerTelemetryManager,\n    AccountInfo,\n    AzureCloudOptions,\n    PerformanceEvents,\n    invokeAsync,\n} from \"@azure/msal-common\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { ApiId } from \"../utils/BrowserConstants\";\nimport {\n    BrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\n\nexport class SilentCacheClient extends StandardInteractionClient {\n    /**\n     * Returns unexpired tokens from the cache, if available\n     * @param silentRequest\n     */\n    async acquireToken(\n        silentRequest: CommonSilentFlowRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentCacheClientAcquireToken,\n            silentRequest.correlationId\n        );\n        // Telemetry manager only used to increment cacheHits here\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            ApiId.acquireTokenSilent_silentFlow\n        );\n\n        const silentAuthClient = await this.createSilentFlowClient(\n            serverTelemetryManager,\n            silentRequest.authority,\n            silentRequest.azureCloudOptions,\n            silentRequest.account\n        );\n        this.logger.verbose(\"Silent auth client created\");\n\n        try {\n            const response = await invokeAsync(\n                silentAuthClient.acquireCachedToken.bind(silentAuthClient),\n                PerformanceEvents.SilentFlowClientAcquireCachedToken,\n                this.logger,\n                this.performanceClient,\n                silentRequest.correlationId\n            )(silentRequest);\n            const authResponse = response[0] as AuthenticationResult;\n\n            this.performanceClient.addFields(\n                {\n                    fromCache: true,\n                },\n                silentRequest.correlationId\n            );\n            return authResponse;\n        } catch (error) {\n            if (\n                error instanceof BrowserAuthError &&\n                error.errorCode === BrowserAuthErrorCodes.cryptoKeyNotFound\n            ) {\n                this.logger.verbose(\n                    \"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\"\n                );\n            }\n            throw error;\n        }\n    }\n\n    /**\n     * API to silenty clear the browser cache.\n     * @param logoutRequest\n     */\n    logout(logoutRequest?: ClearCacheRequest): Promise<void> {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        return this.clearCacheOnLogout(validLogoutRequest?.account);\n    }\n\n    /**\n     * Creates an Silent Flow Client with the given authority, or the default authority.\n     * @param serverTelemetryManager\n     * @param authorityUrl\n     */\n    protected async createSilentFlowClient(\n        serverTelemetryManager: ServerTelemetryManager,\n        authorityUrl?: string,\n        azureCloudOptions?: AzureCloudOptions,\n        account?: AccountInfo\n    ): Promise<SilentFlowClient> {\n        // Create auth module.\n        const clientConfig = await invokeAsync(\n            this.getClientConfiguration.bind(this),\n            PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(serverTelemetryManager, authorityUrl, azureCloudOptions, account);\n        return new SilentFlowClient(clientConfig, this.performanceClient);\n    }\n\n    async initializeSilentRequest(\n        request: SilentRequest,\n        account: AccountInfo\n    ): Promise<CommonSilentFlowRequest> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.InitializeSilentRequest,\n            this.correlationId\n        );\n\n        const baseRequest = await invokeAsync(\n            this.initializeBaseRequest.bind(this),\n            PerformanceEvents.InitializeBaseRequest,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(request);\n        return {\n            ...request,\n            ...baseRequest,\n            account: account,\n            forceRefresh: request.forceRefresh || false,\n        };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}