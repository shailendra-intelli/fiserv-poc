{"ast":null,"code":"/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n\nimport { DEFAULT_CRYPTO_IMPLEMENTATION } from '../crypto/ICrypto.mjs';\nimport { Logger, LogLevel } from '../logger/Logger.mjs';\nimport { Constants } from '../utils/Constants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { AzureCloudInstance } from '../authority/AuthorityOptions.mjs';\nimport { DefaultStorageClass } from '../cache/CacheManager.mjs';\nimport { ProtocolMode } from '../authority/ProtocolMode.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\nconst DEFAULT_SYSTEM_OPTIONS = {\n  tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n  preventCorsPreflight: false\n};\nconst DEFAULT_LOGGER_IMPLEMENTATION = {\n  loggerCallback: () => {\n    // allow users to not set loggerCallback\n  },\n  piiLoggingEnabled: false,\n  logLevel: LogLevel.Info,\n  correlationId: Constants.EMPTY_STRING\n};\nconst DEFAULT_CACHE_OPTIONS = {\n  claimsBasedCachingEnabled: false\n};\nconst DEFAULT_NETWORK_IMPLEMENTATION = {\n  async sendGetRequestAsync() {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  async sendPostRequestAsync() {\n    throw createClientAuthError(methodNotImplemented);\n  }\n};\nconst DEFAULT_LIBRARY_INFO = {\n  sku: Constants.SKU,\n  version: version,\n  cpu: Constants.EMPTY_STRING,\n  os: Constants.EMPTY_STRING\n};\nconst DEFAULT_CLIENT_CREDENTIALS = {\n  clientSecret: Constants.EMPTY_STRING,\n  clientAssertion: undefined\n};\nconst DEFAULT_AZURE_CLOUD_OPTIONS = {\n  azureCloudInstance: AzureCloudInstance.None,\n  tenant: `${Constants.DEFAULT_COMMON_TENANT}`\n};\nconst DEFAULT_TELEMETRY_OPTIONS = {\n  application: {\n    appName: \"\",\n    appVersion: \"\"\n  }\n};\n/**\n * Function that sets the default options when not explicitly configured from app developer\n *\n * @param Configuration\n *\n * @returns Configuration\n */\nfunction buildClientConfiguration({\n  authOptions: userAuthOptions,\n  systemOptions: userSystemOptions,\n  loggerOptions: userLoggerOption,\n  cacheOptions: userCacheOptions,\n  storageInterface: storageImplementation,\n  networkInterface: networkImplementation,\n  cryptoInterface: cryptoImplementation,\n  clientCredentials: clientCredentials,\n  libraryInfo: libraryInfo,\n  telemetry: telemetry,\n  serverTelemetryManager: serverTelemetryManager,\n  persistencePlugin: persistencePlugin,\n  serializableCache: serializableCache\n}) {\n  const loggerOptions = {\n    ...DEFAULT_LOGGER_IMPLEMENTATION,\n    ...userLoggerOption\n  };\n  return {\n    authOptions: buildAuthOptions(userAuthOptions),\n    systemOptions: {\n      ...DEFAULT_SYSTEM_OPTIONS,\n      ...userSystemOptions\n    },\n    loggerOptions: loggerOptions,\n    cacheOptions: {\n      ...DEFAULT_CACHE_OPTIONS,\n      ...userCacheOptions\n    },\n    storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions)),\n    networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n    cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n    clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n    libraryInfo: {\n      ...DEFAULT_LIBRARY_INFO,\n      ...libraryInfo\n    },\n    telemetry: {\n      ...DEFAULT_TELEMETRY_OPTIONS,\n      ...telemetry\n    },\n    serverTelemetryManager: serverTelemetryManager || null,\n    persistencePlugin: persistencePlugin || null,\n    serializableCache: serializableCache || null\n  };\n}\n/**\n * Construct authoptions from the client and platform passed values\n * @param authOptions\n */\nfunction buildAuthOptions(authOptions) {\n  return {\n    clientCapabilities: [],\n    azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n    skipAuthorityMetadataCache: false,\n    ...authOptions\n  };\n}\n/**\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\n * @param ClientConfiguration\n */\nfunction isOidcProtocolMode(config) {\n  return config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC;\n}\nexport { DEFAULT_SYSTEM_OPTIONS, buildClientConfiguration, isOidcProtocolMode };","map":{"version":3,"names":["correlationId","Constants","EMPTY_STRING","DEFAULT_CACHE_OPTIONS","claimsBasedCachingEnabled","DEFAULT_NETWORK_IMPLEMENTATION","sendGetRequestAsync","createClientAuthError","methodNotImplemented","sendPostRequestAsync","DEFAULT_LIBRARY_INFO","sku","SKU","version","cpu","os","DEFAULT_CLIENT_CREDENTIALS","clientSecret","clientAssertion","undefined","DEFAULT_AZURE_CLOUD_OPTIONS","azureCloudInstance","AzureCloudInstance","None","tenant","DEFAULT_COMMON_TENANT","DEFAULT_TELEMETRY_OPTIONS","application","appName","appVersion","DEFAULT_LOGGER_IMPLEMENTATION","userLoggerOption","authOptions","buildAuthOptions","userAuthOptions","systemOptions","DEFAULT_SYSTEM_OPTIONS","userSystemOptions","loggerOptions","cacheOptions","userCacheOptions","storageInterface","storageImplementation","clientCredentials","libraryInfo","telemetry","serverTelemetryManager","persistencePlugin","serializableCache","clientCapabilities","azureCloudOptions","skipAuthorityMetadataCache","isOidcProtocolMode","config","authority","options","protocolMode","ProtocolMode","OIDC"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\config\\ClientConfiguration.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, ICrypto } from \"../crypto/ICrypto\";\nimport { ILoggerCallback, Logger, LogLevel } from \"../logger/Logger\";\nimport { Constants } from \"../utils/Constants\";\nimport { version } from \"../packageMetadata\";\nimport { Authority } from \"../authority/Authority\";\nimport { AzureCloudInstance } from \"../authority/AuthorityOptions\";\nimport { CacheManager, DefaultStorageClass } from \"../cache/CacheManager\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\nimport { ClientCredentials } from \"../account/ClientCredentials\";\nimport { ProtocolMode } from \"../authority/ProtocolMode\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError\";\n\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\n\n/**\n * Use the configuration object to configure MSAL Modules and initialize the base interfaces for MSAL.\n *\n * This object allows you to configure important elements of MSAL functionality:\n * - authOptions                - Authentication for application\n * - cryptoInterface            - Implementation of crypto functions\n * - libraryInfo                - Library metadata\n * - telemetry                  - Telemetry options and data\n * - loggerOptions              - Logging for application\n * - networkInterface           - Network implementation\n * - storageInterface           - Storage implementation\n * - systemOptions              - Additional library options\n * - clientCredentials          - Credentials options for confidential clients\n * @internal\n */\nexport type ClientConfiguration = {\n    authOptions: AuthOptions;\n    systemOptions?: SystemOptions;\n    loggerOptions?: LoggerOptions;\n    cacheOptions?: CacheOptions;\n    storageInterface?: CacheManager;\n    networkInterface?: INetworkModule;\n    cryptoInterface?: ICrypto;\n    clientCredentials?: ClientCredentials;\n    libraryInfo?: LibraryInfo;\n    telemetry?: TelemetryOptions;\n    serverTelemetryManager?: ServerTelemetryManager | null;\n    persistencePlugin?: ICachePlugin | null;\n    serializableCache?: ISerializableTokenCache | null;\n};\n\nexport type CommonClientConfiguration = {\n    authOptions: Required<AuthOptions>;\n    systemOptions: Required<SystemOptions>;\n    loggerOptions: Required<LoggerOptions>;\n    cacheOptions: Required<CacheOptions>;\n    storageInterface: CacheManager;\n    networkInterface: INetworkModule;\n    cryptoInterface: Required<ICrypto>;\n    libraryInfo: LibraryInfo;\n    telemetry: Required<TelemetryOptions>;\n    serverTelemetryManager: ServerTelemetryManager | null;\n    clientCredentials: ClientCredentials;\n    persistencePlugin: ICachePlugin | null;\n    serializableCache: ISerializableTokenCache | null;\n};\n\n/**\n * Use this to configure the auth options in the ClientConfiguration object\n *\n * - clientId                    - Client ID of your app registered with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview in Microsoft Identity Platform\n * - authority                   - You can configure a specific authority, defaults to \" \" or \"https://login.microsoftonline.com/common\"\n * - knownAuthorities            - An array of URIs that are known to be valid. Used in B2C scenarios.\n * - cloudDiscoveryMetadata      - A string containing the cloud discovery response. Used in AAD scenarios.\n * - clientCapabilities          - Array of capabilities which will be added to the claims.access_token.xms_cc request property on every network request.\n * - protocolMode                - Enum that represents the protocol that msal follows. Used for configuring proper endpoints.\n * - skipAuthorityMetadataCache      - A flag to choose whether to use or not use the local metadata cache during authority initialization. Defaults to false.\n * @internal\n */\nexport type AuthOptions = {\n    clientId: string;\n    authority: Authority;\n    clientCapabilities?: Array<string>;\n    azureCloudOptions?: AzureCloudOptions;\n    skipAuthorityMetadataCache?: boolean;\n};\n\n/**\n * Use this to configure token renewal info in the Configuration object\n *\n * - tokenRenewalOffsetSeconds    - Sets the window of offset needed to renew the token before expiry\n */\nexport type SystemOptions = {\n    tokenRenewalOffsetSeconds?: number;\n    preventCorsPreflight?: boolean;\n};\n\n/**\n *  Use this to configure the logging that MSAL does, by configuring logger options in the Configuration object\n *\n * - loggerCallback                - Callback for logger\n * - piiLoggingEnabled             - Sets whether pii logging is enabled\n * - logLevel                      - Sets the level at which logging happens\n * - correlationId                 - Sets the correlationId printed by the logger\n */\nexport type LoggerOptions = {\n    loggerCallback?: ILoggerCallback;\n    piiLoggingEnabled?: boolean;\n    logLevel?: LogLevel;\n    correlationId?: string;\n};\n\n/**\n *  Use this to configure credential cache preferences in the ClientConfiguration object\n *\n * - claimsBasedCachingEnabled   - Sets whether tokens should be cached based on the claims hash. Default is false.\n */\nexport type CacheOptions = {\n    claimsBasedCachingEnabled?: boolean;\n};\n\n/**\n * Library-specific options\n */\nexport type LibraryInfo = {\n    sku: string;\n    version: string;\n    cpu: string;\n    os: string;\n};\n\n/**\n * AzureCloudInstance specific options\n *\n * - azureCloudInstance             - string enum providing short notation for soverign and public cloud authorities\n * - tenant                         - provision to provide the tenant info\n */\nexport type AzureCloudOptions = {\n    azureCloudInstance: AzureCloudInstance;\n    tenant?: string;\n};\n\nexport type TelemetryOptions = {\n    application: ApplicationTelemetry;\n};\n\n/**\n * Telemetry information sent on request\n * - appName: Unique string name of an application\n * - appVersion: Version of the application using MSAL\n */\nexport type ApplicationTelemetry = {\n    appName: string;\n    appVersion: string;\n};\n\nexport const DEFAULT_SYSTEM_OPTIONS: Required<SystemOptions> = {\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n    preventCorsPreflight: false,\n};\n\nconst DEFAULT_LOGGER_IMPLEMENTATION: Required<LoggerOptions> = {\n    loggerCallback: () => {\n        // allow users to not set loggerCallback\n    },\n    piiLoggingEnabled: false,\n    logLevel: LogLevel.Info,\n    correlationId: Constants.EMPTY_STRING,\n};\n\nconst DEFAULT_CACHE_OPTIONS: Required<CacheOptions> = {\n    claimsBasedCachingEnabled: false,\n};\n\nconst DEFAULT_NETWORK_IMPLEMENTATION: INetworkModule = {\n    async sendGetRequestAsync<T>(): Promise<T> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    async sendPostRequestAsync<T>(): Promise<T> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n};\n\nconst DEFAULT_LIBRARY_INFO: LibraryInfo = {\n    sku: Constants.SKU,\n    version: version,\n    cpu: Constants.EMPTY_STRING,\n    os: Constants.EMPTY_STRING,\n};\n\nconst DEFAULT_CLIENT_CREDENTIALS: ClientCredentials = {\n    clientSecret: Constants.EMPTY_STRING,\n    clientAssertion: undefined,\n};\n\nconst DEFAULT_AZURE_CLOUD_OPTIONS: AzureCloudOptions = {\n    azureCloudInstance: AzureCloudInstance.None,\n    tenant: `${Constants.DEFAULT_COMMON_TENANT}`,\n};\n\nconst DEFAULT_TELEMETRY_OPTIONS: Required<TelemetryOptions> = {\n    application: {\n        appName: \"\",\n        appVersion: \"\",\n    },\n};\n\n/**\n * Function that sets the default options when not explicitly configured from app developer\n *\n * @param Configuration\n *\n * @returns Configuration\n */\nexport function buildClientConfiguration({\n    authOptions: userAuthOptions,\n    systemOptions: userSystemOptions,\n    loggerOptions: userLoggerOption,\n    cacheOptions: userCacheOptions,\n    storageInterface: storageImplementation,\n    networkInterface: networkImplementation,\n    cryptoInterface: cryptoImplementation,\n    clientCredentials: clientCredentials,\n    libraryInfo: libraryInfo,\n    telemetry: telemetry,\n    serverTelemetryManager: serverTelemetryManager,\n    persistencePlugin: persistencePlugin,\n    serializableCache: serializableCache,\n}: ClientConfiguration): CommonClientConfiguration {\n    const loggerOptions = {\n        ...DEFAULT_LOGGER_IMPLEMENTATION,\n        ...userLoggerOption,\n    };\n\n    return {\n        authOptions: buildAuthOptions(userAuthOptions),\n        systemOptions: { ...DEFAULT_SYSTEM_OPTIONS, ...userSystemOptions },\n        loggerOptions: loggerOptions,\n        cacheOptions: { ...DEFAULT_CACHE_OPTIONS, ...userCacheOptions },\n        storageInterface:\n            storageImplementation ||\n            new DefaultStorageClass(\n                userAuthOptions.clientId,\n                DEFAULT_CRYPTO_IMPLEMENTATION,\n                new Logger(loggerOptions)\n            ),\n        networkInterface:\n            networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n        libraryInfo: { ...DEFAULT_LIBRARY_INFO, ...libraryInfo },\n        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS, ...telemetry },\n        serverTelemetryManager: serverTelemetryManager || null,\n        persistencePlugin: persistencePlugin || null,\n        serializableCache: serializableCache || null,\n    };\n}\n\n/**\n * Construct authoptions from the client and platform passed values\n * @param authOptions\n */\nfunction buildAuthOptions(authOptions: AuthOptions): Required<AuthOptions> {\n    return {\n        clientCapabilities: [],\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n        skipAuthorityMetadataCache: false,\n        ...authOptions,\n    };\n}\n\n/**\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\n * @param ClientConfiguration\n */\nexport function isOidcProtocolMode(config: ClientConfiguration): boolean {\n    return (\n        config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC\n    );\n}\n"],"mappings":";;;;;;;;;;;;;AAKA;AACA;AACA;AAGA;;;;;;;;;;;;;EA8BGA,aAAA,EAAAC,SAAA,CAAAC;AACH,CAAM;MACSC,qBAAA,GAAc;EACzBC,yBAAgB;;MAEJC,8BAAgB;EAC5B,MAAgBC,mBAAGA,CAAA;IACH,MAAAC,qBAAG,CAAAC,oBAAe;GACnB;EACf,MAAiBC,oBAAGA,CAAA;IACT,MAAAF,qBAAe,CAAAC,oBAAA;;AAE1B;AACA,MAAAE,oBAAgC;EAChCC,GAAA,EAAAV,SAAA,CAAAW,GAAkB;EACpBC,OAAA,EAAAA,OAAA;EAEIC,GAAA,EAAAb,SAAA,CAAAC,YAAA;EACFa,EAAA,EAAAd,SAAa,CAAAC;AACb;AACA,MAAAc,0BAAwB;EACxBC,YAAY,EAAEhB,SAAS,CAAAC,YAAa;EACpCgB,eAAgB,EAAAC;;AAEhB,MAAAC,2BAA0B;EAC1BC,kBAAA,EAAAC,kBAAyB,CAAAC,IAAA;EACzBC,MAAA,EAAS,GAAEvB,SAAS,CAAAwB,qBAAkB;AACtC;MACiBC,yBAAA;EACjBC,WAAA;IACAC,OAAA;IACFC,UAAA;EAEF;;;;;;;;;;;;;;;;;;;;;;;;;IAWG,GAAAC,6BAAA;IACG,GAAAC;GACM;EACR,OAAS;IACTC,WAAA,EAAAC,gBAAiC,CAACC,eAAC;IAClBC,aAAA,EAAG;MAAA,GAAAC,sBAAkB;MAAA,GAAAC;IAAA;IACZC,aAAA,EAAAA,aAAG;IAC/BC,YAAA;MAAA,GAAApC,qBAAA;MAAA,GAAAqC;IAAA;IAEFC,gBAAA,EAAAC,qBAAA,I;;;IAIGC,iBAAA,EAAAA,iBAAA,IAAA3B,0BAAA;IACG4B,WAAA;MAAA,GAAsBlC,oBAAA;MAAA,GAAAkC;IAAA;IACCC,SAAA;MAAA,GAAAnB,yBAAU;MAAA,GAAAmB;IAAA;IACfC,sBAAG,EAAAA,sBAAQ;IACjCC,iBAAA,EAAAA,iBAAA;IAEFC,iBAAA,EAAAA,iBAAA;;;;;;;AAOG,SAAAf,iBAAAD,WAAA;EACG;IACYiB,kBAAG;IACAC,iBAAG,EAAA9B,2BAAQ;IACpB+B,0BAAY;IACP,GAAAnB;GACf;AAEF;;;;AAIG;AACG,SAAAoB,kBAAqBA,CAAAC,MAAA;EACvB,OAAyBA,MAAA,CAAArB,WAAC,CAAEsB,SAAQ,CAAAC,OAAA,CAAAC,YAAA,KAAAC,YAAA,CAAAC,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}