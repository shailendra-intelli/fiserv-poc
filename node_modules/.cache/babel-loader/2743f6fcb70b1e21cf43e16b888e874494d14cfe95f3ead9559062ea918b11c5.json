{"ast":null,"code":"/*! @azure/msal-browser v3.5.0 2023-11-07 */\n'use strict';\n\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, PerformanceEvents } from '@azure/msal-common';\nimport { InteractionType } from '../utils/BrowserConstants.mjs';\nimport { CryptoOps } from '../crypto/CryptoOps.mjs';\nimport { NestedAppAuthAdapter } from '../naa/mapping/NestedAppAuthAdapter.mjs';\nimport { NestedAppAuthError } from '../error/NestedAppAuthError.mjs';\nimport { EventHandler } from '../event/EventHandler.mjs';\nimport { EventType } from '../event/EventType.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass NestedAppAuthController {\n  constructor(operatingContext) {\n    this.operatingContext = operatingContext;\n    const proxy = this.operatingContext.getBridgeProxy();\n    if (proxy !== undefined) {\n      this.bridgeProxy = proxy;\n    } else {\n      throw new Error(\"unexpected: bridgeProxy is undefined\");\n    }\n    // Set the configuration.\n    this.config = operatingContext.getConfig();\n    // Initialize logger\n    this.logger = this.operatingContext.getLogger();\n    // Initialize performance client\n    this.performanceClient = this.config.telemetry.client;\n    // Initialize the crypto class.\n    this.browserCrypto = operatingContext.isBrowserEnvironment() ? new CryptoOps(this.logger, this.performanceClient) : DEFAULT_CRYPTO_IMPLEMENTATION;\n    this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n    this.nestedAppAuthAdapter = new NestedAppAuthAdapter(this.config.auth.clientId, this.config.auth.clientCapabilities, this.browserCrypto, this.logger);\n  }\n  getBrowserStorage() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  getEventHandler() {\n    return this.eventHandler;\n  }\n  static async createController(operatingContext) {\n    const controller = new NestedAppAuthController(operatingContext);\n    return Promise.resolve(controller);\n  }\n  initialize() {\n    // do nothing not required by this controller\n    return Promise.resolve();\n  }\n  async acquireTokenInteractive(request) {\n    this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Popup, request);\n    const atPopupMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenPopup, request.correlationId);\n    atPopupMeasurement?.add({\n      nestedAppAuthRequest: true\n    });\n    try {\n      const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(request);\n      const response = await this.bridgeProxy.getTokenInteractive(naaRequest);\n      const result = this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response);\n      this.operatingContext.setActiveAccount(result.account);\n      this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Popup, result);\n      atPopupMeasurement.add({\n        accessTokenSize: result.accessToken.length,\n        idTokenSize: result.idToken.length\n      });\n      atPopupMeasurement.end({\n        success: true,\n        requestId: result.requestId\n      });\n      return result;\n    } catch (e) {\n      const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n      this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Popup, null, e);\n      atPopupMeasurement.end({\n        errorCode: error.errorCode,\n        subErrorCode: error.subError,\n        success: false\n      });\n      throw error;\n    }\n  }\n  async acquireTokenSilentInternal(request) {\n    this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n    const ssoSilentMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SsoSilent, request.correlationId);\n    ssoSilentMeasurement?.increment({\n      visibilityChangeCount: 0\n    });\n    ssoSilentMeasurement?.add({\n      nestedAppAuthRequest: true\n    });\n    try {\n      const naaRequest = this.nestedAppAuthAdapter.toNaaSilentTokenRequest(request);\n      const response = await this.bridgeProxy.getTokenSilent(naaRequest);\n      const result = this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response);\n      this.operatingContext.setActiveAccount(result.account);\n      this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, result);\n      ssoSilentMeasurement?.add({\n        accessTokenSize: result.accessToken.length,\n        idTokenSize: result.idToken.length\n      });\n      ssoSilentMeasurement?.end({\n        success: true,\n        requestId: result.requestId\n      });\n      return result;\n    } catch (e) {\n      const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n      this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, e);\n      ssoSilentMeasurement?.end({\n        errorCode: error.errorCode,\n        subErrorCode: error.subError,\n        success: false\n      });\n      throw error;\n    }\n  }\n  async acquireTokenPopup(request) {\n    return this.acquireTokenInteractive(request);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  acquireTokenRedirect(request) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  async acquireTokenSilent(silentRequest) {\n    return this.acquireTokenSilentInternal(silentRequest);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  acquireTokenByCode(request // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  acquireTokenNative(request, apiId,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  accountId // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  acquireTokenByRefreshToken(commonRequest,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  silentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  /**\n   * Adds event callbacks to array\n   * @param callback\n   */\n  addEventCallback(callback) {\n    return this.eventHandler.addEventCallback(callback);\n  }\n  /**\n   * Removes callback with provided id from callback array\n   * @param callbackId\n   */\n  removeEventCallback(callbackId) {\n    this.eventHandler.removeEventCallback(callbackId);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  addPerformanceCallback(callback) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  removePerformanceCallback(callbackId) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  enableAccountStorageEvents() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  disableAccountStorageEvents() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getAccount(accountFilter) {\n    throw NestedAppAuthError.createUnsupportedError();\n    // TODO: Look at standard implementation\n  }\n\n  getAccountByHomeId(homeAccountId) {\n    const currentAccount = this.operatingContext.getActiveAccount();\n    if (currentAccount !== undefined) {\n      if (currentAccount.homeAccountId === homeAccountId) {\n        return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n  getAccountByLocalId(localId) {\n    const currentAccount = this.operatingContext.getActiveAccount();\n    if (currentAccount !== undefined) {\n      if (currentAccount.localAccountId === localId) {\n        return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n  getAccountByUsername(userName) {\n    const currentAccount = this.operatingContext.getActiveAccount();\n    if (currentAccount !== undefined) {\n      if (currentAccount.username === userName) {\n        return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n  getAllAccounts() {\n    const currentAccount = this.operatingContext.getActiveAccount();\n    if (currentAccount !== undefined) {\n      return [this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount)];\n    } else {\n      return [];\n    }\n  }\n  handleRedirectPromise(hash // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  loginPopup(request // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    if (request !== undefined) {\n      return this.acquireTokenInteractive(request);\n    } else {\n      throw NestedAppAuthError.createUnsupportedError();\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  loginRedirect(request) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  logout(logoutRequest) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  logoutRedirect(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  logoutPopup(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  ssoSilent(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request) {\n    return this.acquireTokenSilentInternal(request);\n  }\n  getTokenCache() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  /**\n   * Returns the logger instance\n   */\n  getLogger() {\n    return this.logger;\n  }\n  /**\n   * Replaces the default logger set in configurations with new Logger with new configurations\n   * @param logger Logger instance\n   */\n  setLogger(logger) {\n    this.logger = logger;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setActiveAccount(account) {\n    /*\n     * StandardController uses this to allow the developer to set the active account\n     * in the nested app auth scenario the active account is controlled by the app hosting the nested app\n     */\n    this.logger.warning(\"nestedAppAuth does not support setActiveAccount\");\n    return;\n  }\n  getActiveAccount() {\n    const currentAccount = this.operatingContext.getActiveAccount();\n    if (currentAccount !== undefined) {\n      return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n    } else {\n      return null;\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  initializeWrapperLibrary(sku, version) {\n    /*\n     * Standard controller uses this to set the sku and version of the wrapper library in the storage\n     * we do nothing here\n     */\n    return;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  setNavigationClient(navigationClient) {\n    this.logger.warning(\"setNavigationClient is not supported in nested app auth\");\n  }\n  getConfiguration() {\n    return this.config;\n  }\n  isBrowserEnv() {\n    return this.operatingContext.isBrowserEnvironment();\n  }\n  getBrowserCrypto() {\n    return this.browserCrypto;\n  }\n  getPerformanceClient() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  getRedirectResponse() {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  preflightBrowserEnvironmentCheck(interactionType,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  setInteractionInProgress // eslint-disable-line @typescript-eslint/no-unused-vars\n  ) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async clearCache(logoutRequest) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async hydrateCache(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  result,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  request) {\n    throw NestedAppAuthError.createUnsupportedError();\n  }\n}\nexport { NestedAppAuthController };","map":{"version":3,"names":["NestedAppAuthController","constructor","operatingContext","proxy","getBridgeProxy","undefined","bridgeProxy","Error","config","getConfig","logger","getLogger","performanceClient","telemetry","client","browserCrypto","isBrowserEnvironment","CryptoOps","DEFAULT_CRYPTO_IMPLEMENTATION","eventHandler","EventHandler","nestedAppAuthAdapter","NestedAppAuthAdapter","auth","clientId","clientCapabilities","getBrowserStorage","NestedAppAuthError","createUnsupportedError","getEventHandler","createController","controller","Promise","resolve","initialize","acquireTokenInteractive","request","emitEvent","EventType","ACQUIRE_TOKEN_START","InteractionType","Popup","atPopupMeasurement","startMeasurement","PerformanceEvents","AcquireTokenPopup","correlationId","naaRequest","toNaaTokenRequest","response","getTokenInteractive","result","fromNaaTokenResponse","setActiveAccount","account","ACQUIRE_TOKEN_SUCCESS","add","accessTokenSize","accessToken","length","idTokenSize","idToken","end","success","requestId","e","error","fromBridgeError","ACQUIRE_TOKEN_FAILURE","errorCode","acquireTokenSilentInternal","Silent","ssoSilentMeasurement","SsoSilent","increment","visibilityChangeCount","nestedAppAuthRequest","toNaaSilentTokenRequest","getTokenSilent"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\controllers\\NestedAppAuthController.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    CommonAuthorizationUrlRequest,\n    CommonSilentFlowRequest,\n    PerformanceCallbackFunction,\n    AccountInfo,\n    Logger,\n    ICrypto,\n    IPerformanceClient,\n    DEFAULT_CRYPTO_IMPLEMENTATION,\n    PerformanceEvents,\n    AccountFilter,\n} from \"@azure/msal-common\";\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { ApiId, WrapperSKU, InteractionType } from \"../utils/BrowserConstants\";\nimport { IController } from \"./IController\";\nimport { TeamsAppOperatingContext } from \"../operatingcontext/TeamsAppOperatingContext\";\nimport { IBridgeProxy } from \"../naa/IBridgeProxy\";\nimport { CryptoOps } from \"../crypto/CryptoOps\";\nimport { NestedAppAuthAdapter } from \"../naa/mapping/NestedAppAuthAdapter\";\nimport { NestedAppAuthError } from \"../error/NestedAppAuthError\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { EventType } from \"../event/EventType\";\nimport { EventCallbackFunction, EventError } from \"../event/EventMessage\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\n\nexport class NestedAppAuthController implements IController {\n    // OperatingContext\n    protected readonly operatingContext: TeamsAppOperatingContext;\n\n    // BridgeProxy\n    protected readonly bridgeProxy: IBridgeProxy;\n\n    // Crypto interface implementation\n    protected readonly browserCrypto: ICrypto;\n\n    // Input configuration by developer/user\n    protected readonly config: BrowserConfiguration;\n\n    // Logger\n    protected logger: Logger;\n\n    // Performance telemetry client\n    protected readonly performanceClient: IPerformanceClient;\n\n    // EventHandler\n    protected readonly eventHandler: EventHandler;\n\n    // NestedAppAuthAdapter\n    protected readonly nestedAppAuthAdapter: NestedAppAuthAdapter;\n\n    constructor(operatingContext: TeamsAppOperatingContext) {\n        this.operatingContext = operatingContext;\n        const proxy = this.operatingContext.getBridgeProxy();\n        if (proxy !== undefined) {\n            this.bridgeProxy = proxy;\n        } else {\n            throw new Error(\"unexpected: bridgeProxy is undefined\");\n        }\n\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n\n        // Initialize the crypto class.\n        this.browserCrypto = operatingContext.isBrowserEnvironment()\n            ? new CryptoOps(this.logger, this.performanceClient)\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\n\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n\n        this.nestedAppAuthAdapter = new NestedAppAuthAdapter(\n            this.config.auth.clientId,\n            this.config.auth.clientCapabilities,\n            this.browserCrypto,\n            this.logger\n        );\n    }\n    getBrowserStorage(): BrowserCacheManager {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    getEventHandler(): EventHandler {\n        return this.eventHandler;\n    }\n\n    static async createController(\n        operatingContext: TeamsAppOperatingContext\n    ): Promise<IController> {\n        const controller = new NestedAppAuthController(operatingContext);\n        return Promise.resolve(controller);\n    }\n\n    initialize(): Promise<void> {\n        // do nothing not required by this controller\n        return Promise.resolve();\n    }\n\n    private async acquireTokenInteractive(\n        request: PopupRequest | RedirectRequest\n    ): Promise<AuthenticationResult> {\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_START,\n            InteractionType.Popup,\n            request\n        );\n\n        const atPopupMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenPopup,\n            request.correlationId\n        );\n\n        atPopupMeasurement?.add({ nestedAppAuthRequest: true });\n\n        try {\n            const naaRequest =\n                this.nestedAppAuthAdapter.toNaaTokenRequest(request);\n            const response = await this.bridgeProxy.getTokenInteractive(\n                naaRequest\n            );\n            const result: AuthenticationResult =\n                this.nestedAppAuthAdapter.fromNaaTokenResponse(\n                    naaRequest,\n                    response\n                );\n\n            this.operatingContext.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Popup,\n                result\n            );\n\n            atPopupMeasurement.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n\n            atPopupMeasurement.end({\n                success: true,\n                requestId: result.requestId,\n            });\n\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_FAILURE,\n                InteractionType.Popup,\n                null,\n                e as EventError\n            );\n\n            atPopupMeasurement.end({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false,\n            });\n\n            throw error;\n        }\n    }\n\n    private async acquireTokenSilentInternal(\n        request: SilentRequest\n    ): Promise<AuthenticationResult> {\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_START,\n            InteractionType.Silent,\n            request\n        );\n\n        const ssoSilentMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.SsoSilent,\n            request.correlationId\n        );\n\n        ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0,\n        });\n\n        ssoSilentMeasurement?.add({\n            nestedAppAuthRequest: true,\n        });\n\n        try {\n            const naaRequest =\n                this.nestedAppAuthAdapter.toNaaSilentTokenRequest(request);\n            const response = await this.bridgeProxy.getTokenSilent(naaRequest);\n\n            const result: AuthenticationResult =\n                this.nestedAppAuthAdapter.fromNaaTokenResponse(\n                    naaRequest,\n                    response\n                );\n\n            this.operatingContext.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Silent,\n                result\n            );\n            ssoSilentMeasurement?.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n            ssoSilentMeasurement?.end({\n                success: true,\n                requestId: result.requestId,\n            });\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_FAILURE,\n                InteractionType.Silent,\n                null,\n                e as EventError\n            );\n            ssoSilentMeasurement?.end({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false,\n            });\n            throw error;\n        }\n    }\n\n    async acquireTokenPopup(\n        request: PopupRequest\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenInteractive(request);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    async acquireTokenSilent(\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenSilentInternal(silentRequest);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenByCode(\n        request: AuthorizationCodeRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    acquireTokenNative(\n        request: // eslint-disable-line @typescript-eslint/no-unused-vars\n        | SilentRequest\n            | Partial<\n                  Omit<\n                      CommonAuthorizationUrlRequest,\n                      | \"requestedClaimsHash\"\n                      | \"responseMode\"\n                      | \"codeChallenge\"\n                      | \"codeChallengeMethod\"\n                      | \"nativeBroker\"\n                  >\n              >\n            | PopupRequest,\n        apiId: ApiId, // eslint-disable-line @typescript-eslint/no-unused-vars\n        accountId?: string | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    acquireTokenByRefreshToken(\n        commonRequest: CommonSilentFlowRequest, // eslint-disable-line @typescript-eslint/no-unused-vars\n        silentRequest: SilentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        return this.eventHandler.addEventCallback(callback);\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removePerformanceCallback(callbackId: string): boolean {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    enableAccountStorageEvents(): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    disableAccountStorageEvents(): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\n        throw NestedAppAuthError.createUnsupportedError();\n        // TODO: Look at standard implementation\n    }\n\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.homeAccountId === homeAccountId) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\n                    currentAccount\n                );\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    getAccountByLocalId(localId: string): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.localAccountId === localId) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\n                    currentAccount\n                );\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    getAccountByUsername(userName: string): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.username === userName) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\n                    currentAccount\n                );\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n    getAllAccounts(): AccountInfo[] {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            return [\n                this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount),\n            ];\n        } else {\n            return [];\n        }\n    }\n    handleRedirectPromise(\n        hash?: string | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult | null> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    loginPopup(\n        request?: PopupRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        if (request !== undefined) {\n            return this.acquireTokenInteractive(request);\n        } else {\n            throw NestedAppAuthError.createUnsupportedError();\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    logout(logoutRequest?: EndSessionRequest | undefined): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutRedirect(\n        logoutRequest?: EndSessionRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutPopup(\n        logoutRequest?: EndSessionPopupRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    ssoSilent(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request: Partial<\n            Omit<\n                CommonAuthorizationUrlRequest,\n                | \"requestedClaimsHash\"\n                | \"responseMode\"\n                | \"codeChallenge\"\n                | \"codeChallengeMethod\"\n                | \"nativeBroker\"\n            >\n        >\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenSilentInternal(request as SilentRequest);\n    }\n    getTokenCache(): ITokenCache {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    public getLogger(): Logger {\n        return this.logger;\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.logger = logger;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setActiveAccount(account: AccountInfo | null): void {\n        /*\n         * StandardController uses this to allow the developer to set the active account\n         * in the nested app auth scenario the active account is controlled by the app hosting the nested app\n         */\n        this.logger.warning(\"nestedAppAuth does not support setActiveAccount\");\n        return;\n    }\n    getActiveAccount(): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n        } else {\n            return null;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\n        /*\n         * Standard controller uses this to set the sku and version of the wrapper library in the storage\n         * we do nothing here\n         */\n        return;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNavigationClient(navigationClient: INavigationClient): void {\n        this.logger.warning(\n            \"setNavigationClient is not supported in nested app auth\"\n        );\n    }\n    getConfiguration(): BrowserConfiguration {\n        return this.config;\n    }\n    isBrowserEnv(): boolean {\n        return this.operatingContext.isBrowserEnvironment();\n    }\n    getBrowserCrypto(): ICrypto {\n        return this.browserCrypto;\n    }\n    getPerformanceClient(): IPerformanceClient {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    getRedirectResponse(): Map<string, Promise<AuthenticationResult | null>> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    preflightBrowserEnvironmentCheck(\n        interactionType: InteractionType, // eslint-disable-line @typescript-eslint/no-unused-vars\n        setInteractionInProgress?: boolean | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async hydrateCache(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        result: AuthenticationResult,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}