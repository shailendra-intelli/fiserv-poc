{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { urlEncodeArr } from '../encode/Base64Encode.mjs';\nimport { pkceNotCreated } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n// Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n/**\n * Class which exposes APIs to generate PKCE codes and code verifiers.\n */\nclass PkceGenerator {\n  constructor(cryptoObj) {\n    this.cryptoObj = cryptoObj;\n  }\n  /**\n   * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\n   */\n  async generateCodes() {\n    const codeVerifier = this.generateCodeVerifier();\n    const codeChallenge = await this.generateCodeChallengeFromVerifier(codeVerifier);\n    return {\n      verifier: codeVerifier,\n      challenge: codeChallenge\n    };\n  }\n  /**\n   * Generates a random 32 byte buffer and returns the base64\n   * encoded string to be used as a PKCE Code Verifier\n   */\n  generateCodeVerifier() {\n    try {\n      // Generate random values as utf-8\n      const buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n      this.cryptoObj.getRandomValues(buffer);\n      // encode verifier as base64\n      const pkceCodeVerifierB64 = urlEncodeArr(buffer);\n      return pkceCodeVerifierB64;\n    } catch (e) {\n      throw createBrowserAuthError(pkceNotCreated);\n    }\n  }\n  /**\n   * Creates a base64 encoded PKCE Code Challenge string from the\n   * hash created from the PKCE Code Verifier supplied\n   */\n  async generateCodeChallengeFromVerifier(pkceCodeVerifier) {\n    try {\n      // hashed verifier\n      const pkceHashedCodeVerifier = await this.cryptoObj.sha256Digest(pkceCodeVerifier);\n      // encode hash as base64\n      return urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\n    } catch (e) {\n      throw createBrowserAuthError(pkceNotCreated);\n    }\n  }\n}\nexport { PkceGenerator };","map":{"version":3,"names":["RANDOM_BYTE_ARR_LENGTH","PkceGenerator","constructor","cryptoObj","codeChallenge","generateCodeChallengeFromVerifier","codeVerifier","verifier"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\crypto\\PkceGenerator.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { PkceCodes } from \"@azure/msal-common\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { urlEncodeArr } from \"../encode/Base64Encode\";\nimport { BrowserCrypto } from \"./BrowserCrypto\";\n\n// Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n\n/**\n * Class which exposes APIs to generate PKCE codes and code verifiers.\n */\nexport class PkceGenerator {\n    private cryptoObj: BrowserCrypto;\n\n    constructor(cryptoObj: BrowserCrypto) {\n        this.cryptoObj = cryptoObj;\n    }\n\n    /**\n     * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\n     */\n    async generateCodes(): Promise<PkceCodes> {\n        const codeVerifier = this.generateCodeVerifier();\n        const codeChallenge = await this.generateCodeChallengeFromVerifier(\n            codeVerifier\n        );\n        return {\n            verifier: codeVerifier,\n            challenge: codeChallenge,\n        };\n    }\n\n    /**\n     * Generates a random 32 byte buffer and returns the base64\n     * encoded string to be used as a PKCE Code Verifier\n     */\n    private generateCodeVerifier(): string {\n        try {\n            // Generate random values as utf-8\n            const buffer: Uint8Array = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n            this.cryptoObj.getRandomValues(buffer);\n            // encode verifier as base64\n            const pkceCodeVerifierB64: string = urlEncodeArr(buffer);\n            return pkceCodeVerifierB64;\n        } catch (e) {\n            throw createBrowserAuthError(BrowserAuthErrorCodes.pkceNotCreated);\n        }\n    }\n\n    /**\n     * Creates a base64 encoded PKCE Code Challenge string from the\n     * hash created from the PKCE Code Verifier supplied\n     */\n    private async generateCodeChallengeFromVerifier(\n        pkceCodeVerifier: string\n    ): Promise<string> {\n        try {\n            // hashed verifier\n            const pkceHashedCodeVerifier = await this.cryptoObj.sha256Digest(\n                pkceCodeVerifier\n            );\n            // encode hash as base64\n            return urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier));\n        } catch (e) {\n            throw createBrowserAuthError(BrowserAuthErrorCodes.pkceNotCreated);\n        }\n    }\n}\n"],"mappings":";;;;;;;AAKA;AAMA;AAKA;;;AAMgB,MAAAA,sBAAwB;AAIpC;;AAEG;AACG,MAAAC,aAAiB;EAWvBC,YAAAC,SAAA;;;EAGG;AACH;AAaA;;;IAGG,MAAAC,aAAA,cAAAC,iCAAA,CAAAC,YAAA;WAC4C;MAclDC,QAAA,EAAAD,YAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}