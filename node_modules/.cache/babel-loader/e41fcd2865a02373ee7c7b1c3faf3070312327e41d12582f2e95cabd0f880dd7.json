{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { Constants } from '../utils/Constants.mjs';\nimport { AuthError } from './AuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\n */\nconst InteractionRequiredServerErrorMessage = [\"interaction_required\", \"consent_required\", \"login_required\"];\nconst InteractionRequiredAuthSubErrorMessage = [\"message_only\", \"additional_action\", \"basic_action\", \"user_password_expired\", \"consent_required\"];\n/**\n * Interaction required errors defined by the SDK\n */\nconst InteractionRequiredAuthErrorMessage = {\n  noTokensFoundError: {\n    code: \"no_tokens_found\",\n    desc: \"No refresh token found in the cache. Please sign-in.\"\n  },\n  native_account_unavailable: {\n    code: \"native_account_unavailable\",\n    desc: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\"\n  }\n};\n/**\n * Error thrown when user interaction is required.\n */\nclass InteractionRequiredAuthError extends AuthError {\n  constructor(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims) {\n    super(errorCode, errorMessage, subError);\n    Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n    this.timestamp = timestamp || Constants.EMPTY_STRING;\n    this.traceId = traceId || Constants.EMPTY_STRING;\n    this.correlationId = correlationId || Constants.EMPTY_STRING;\n    this.claims = claims || Constants.EMPTY_STRING;\n    this.name = \"InteractionRequiredAuthError\";\n  }\n  /**\n   * Helper function used to determine if an error thrown by the server requires interaction to resolve\n   * @param errorCode\n   * @param errorString\n   * @param subError\n   */\n  static isInteractionRequiredError(errorCode, errorString, subError) {\n    const isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n    const isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n    const isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some(irErrorCode => {\n      return errorString.indexOf(irErrorCode) > -1;\n    });\n    return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\n  }\n  /**\n   * Creates an error thrown when the authorization code required for a token request is null or empty.\n   */\n  static createNoTokensFoundError() {\n    return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.noTokensFoundError.code, InteractionRequiredAuthErrorMessage.noTokensFoundError.desc);\n  }\n  /**\n   * Creates an error thrown when the native broker returns ACCOUNT_UNAVAILABLE status, indicating that the account was removed and interactive sign-in is required\n   * @returns\n   */\n  static createNativeAccountUnavailableError() {\n    return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.native_account_unavailable.code, InteractionRequiredAuthErrorMessage.native_account_unavailable.desc);\n  }\n}\nexport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage, InteractionRequiredAuthSubErrorMessage, InteractionRequiredServerErrorMessage };","map":{"version":3,"names":["InteractionRequiredServerErrorMessage","noTokensFoundError","code","desc","native_account_unavailable","errorCode","errorMessage","subError","Object","setPrototypeOf","InteractionRequiredAuthError","prototype","timestamp","Constants","EMPTY_STRING","traceId","isInteractionRequiredError","errorString","isInteractionRequiredSubError","InteractionRequiredAuthSubErrorMessage","indexOf","isInteractionRequiredErrorDesc"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\error\\InteractionRequiredAuthError.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Constants } from \"../utils/Constants\";\nimport { AuthError } from \"./AuthError\";\n\n/**\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\n */\nexport const InteractionRequiredServerErrorMessage = [\n    \"interaction_required\",\n    \"consent_required\",\n    \"login_required\",\n];\n\nexport const InteractionRequiredAuthSubErrorMessage = [\n    \"message_only\",\n    \"additional_action\",\n    \"basic_action\",\n    \"user_password_expired\",\n    \"consent_required\",\n];\n\n/**\n * Interaction required errors defined by the SDK\n */\nexport const InteractionRequiredAuthErrorMessage = {\n    noTokensFoundError: {\n        code: \"no_tokens_found\",\n        desc: \"No refresh token found in the cache. Please sign-in.\",\n    },\n    native_account_unavailable: {\n        code: \"native_account_unavailable\",\n        desc: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\",\n    },\n};\n\n/**\n * Error thrown when user interaction is required.\n */\nexport class InteractionRequiredAuthError extends AuthError {\n    /**\n     * The time the error occured at\n     */\n    timestamp: string;\n\n    /**\n     * TraceId associated with the error\n     */\n    traceId: string;\n\n    /**\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-common/docs/claims-challenge.md\n     *\n     * A string with extra claims needed for the token request to succeed\n     * web site: redirect the user to the authorization page and set the extra claims\n     * web api: include the claims in the WWW-Authenticate header that are sent back to the client so that it knows to request a token with the extra claims\n     * desktop application or browser context: include the claims when acquiring the token interactively\n     * app to app context (client_credentials): include the claims in the AcquireTokenByClientCredential request\n     */\n    claims: string;\n\n    constructor(\n        errorCode?: string,\n        errorMessage?: string,\n        subError?: string,\n        timestamp?: string,\n        traceId?: string,\n        correlationId?: string,\n        claims?: string\n    ) {\n        super(errorCode, errorMessage, subError);\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n\n        this.timestamp = timestamp || Constants.EMPTY_STRING;\n        this.traceId = traceId || Constants.EMPTY_STRING;\n        this.correlationId = correlationId || Constants.EMPTY_STRING;\n        this.claims = claims || Constants.EMPTY_STRING;\n        this.name = \"InteractionRequiredAuthError\";\n    }\n\n    /**\n     * Helper function used to determine if an error thrown by the server requires interaction to resolve\n     * @param errorCode\n     * @param errorString\n     * @param subError\n     */\n    static isInteractionRequiredError(\n        errorCode?: string,\n        errorString?: string,\n        subError?: string\n    ): boolean {\n        const isInteractionRequiredErrorCode =\n            !!errorCode &&\n            InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n        const isInteractionRequiredSubError =\n            !!subError &&\n            InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n        const isInteractionRequiredErrorDesc =\n            !!errorString &&\n            InteractionRequiredServerErrorMessage.some((irErrorCode) => {\n                return errorString.indexOf(irErrorCode) > -1;\n            });\n\n        return (\n            isInteractionRequiredErrorCode ||\n            isInteractionRequiredErrorDesc ||\n            isInteractionRequiredSubError\n        );\n    }\n\n    /**\n     * Creates an error thrown when the authorization code required for a token request is null or empty.\n     */\n    static createNoTokensFoundError(): InteractionRequiredAuthError {\n        return new InteractionRequiredAuthError(\n            InteractionRequiredAuthErrorMessage.noTokensFoundError.code,\n            InteractionRequiredAuthErrorMessage.noTokensFoundError.desc\n        );\n    }\n\n    /**\n     * Creates an error thrown when the native broker returns ACCOUNT_UNAVAILABLE status, indicating that the account was removed and interactive sign-in is required\n     * @returns\n     */\n    static createNativeAccountUnavailableError(): InteractionRequiredAuthError {\n        return new InteractionRequiredAuthError(\n            InteractionRequiredAuthErrorMessage.native_account_unavailable.code,\n            InteractionRequiredAuthErrorMessage.native_account_unavailable.desc\n        );\n    }\n}\n"],"mappings":";;;;;;AAMA;AAEA;;AAEG;AAeH;;AAEG;AACH,MAAAA,qCAAgD,I;qGAS9C,yBAEF,mB;AAEG;AACH;AACI;;EAEGC,kBAAA;IACMC,IAAA,mBAAS;IAElBC,IAAA;;EAEGC,0BAAA;IACIF,IAAA,8BAAS;IAEhBC,IAAA;;;;;;;;IAQG,MAAAE,SAAA,EAAAC,YAAA,EAAAC,QAAA;IACGC,MAAA,CAAAC,cAAS,OAAAC,4BAAA,CAAAC,SAAA;IAGX,KAAAC,SAAA,GAASA,SAAS,IAAAC,SAAA,CACNC,YACJ;IAgBZ,KAAAC,OAAA,GAAAA,OAAA,IAAAF,SAAA,CAAAC,YAAA;;;;;EAKG;AACH;AAwBA;;AAEG;;EAQH,OAAAE,2BAAAX,SAAA,EAAAY,WAAA,EAAAV,QAAA;;IAGG,MAAAW,6BAAA,KAAAX,QAAA,IACuCY,sCAAI,CAA4BC,OAAA,CAAAb,QAAA;IAM7E,MAAAc,8BAAA,KAAAJ,WAAA,I"},"metadata":{},"sourceType":"module","externalDependencies":[]}