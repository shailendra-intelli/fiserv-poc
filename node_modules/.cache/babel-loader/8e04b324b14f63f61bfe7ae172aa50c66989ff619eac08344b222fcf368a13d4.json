{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * @hidden\n */\nclass StringUtils {\n  /**\n   * Check if stringified object is empty\n   * @param strObj\n   */\n  static isEmptyObj(strObj) {\n    if (strObj) {\n      try {\n        const obj = JSON.parse(strObj);\n        return Object.keys(obj).length === 0;\n      } catch (e) {}\n    }\n    return true;\n  }\n  static startsWith(str, search) {\n    return str.indexOf(search) === 0;\n  }\n  static endsWith(str, search) {\n    return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n  }\n  /**\n   * Parses string into an object.\n   *\n   * @param query\n   */\n  static queryStringToObject(query) {\n    const obj = {};\n    const params = query.split(\"&\");\n    const decode = s => decodeURIComponent(s.replace(/\\+/g, \" \"));\n    params.forEach(pair => {\n      if (pair.trim()) {\n        const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n        if (key && value) {\n          obj[decode(key)] = decode(value);\n        }\n      }\n    });\n    return obj;\n  }\n  /**\n   * Trims entries in an array.\n   *\n   * @param arr\n   */\n  static trimArrayEntries(arr) {\n    return arr.map(entry => entry.trim());\n  }\n  /**\n   * Removes empty strings from array\n   * @param arr\n   */\n  static removeEmptyStringsFromArray(arr) {\n    return arr.filter(entry => {\n      return !!entry;\n    });\n  }\n  /**\n   * Attempts to parse a string into JSON\n   * @param str\n   */\n  static jsonParseHelper(str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\n   * Tests if a given string matches a given pattern, with support for wildcards and queries.\n   * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\n   * @param input String to match against\n   */\n  static matchPattern(pattern, input) {\n    /**\n     * Wildcard support: https://stackoverflow.com/a/3117248/4888559\n     * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\n     */\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    const regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\?\"));\n    return regex.test(input);\n  }\n}\nexport { StringUtils };","map":{"version":3,"names":["StringUtils","obj","JSON","parse","strObj","keys","length","startsWith","str","search","indexOf","lastIndexOf","decode","s","decodeURIComponent","replace","params","forEach","pair","trim"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\utils\\StringUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/**\n * @hidden\n */\nexport class StringUtils {\n    /**\n     * Check if stringified object is empty\n     * @param strObj\n     */\n    static isEmptyObj(strObj?: string): boolean {\n        if (strObj) {\n            try {\n                const obj = JSON.parse(strObj);\n                return Object.keys(obj).length === 0;\n            } catch (e) {}\n        }\n        return true;\n    }\n\n    static startsWith(str: string, search: string): boolean {\n        return str.indexOf(search) === 0;\n    }\n\n    static endsWith(str: string, search: string): boolean {\n        return (\n            str.length >= search.length &&\n            str.lastIndexOf(search) === str.length - search.length\n        );\n    }\n\n    /**\n     * Parses string into an object.\n     *\n     * @param query\n     */\n    static queryStringToObject<T>(query: string): T {\n        const obj: {} = {};\n        const params = query.split(\"&\");\n        const decode = (s: string) => decodeURIComponent(s.replace(/\\+/g, \" \"));\n        params.forEach((pair) => {\n            if (pair.trim()) {\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n                if (key && value) {\n                    obj[decode(key)] = decode(value);\n                }\n            }\n        });\n        return obj as T;\n    }\n\n    /**\n     * Trims entries in an array.\n     *\n     * @param arr\n     */\n    static trimArrayEntries(arr: Array<string>): Array<string> {\n        return arr.map((entry) => entry.trim());\n    }\n\n    /**\n     * Removes empty strings from array\n     * @param arr\n     */\n    static removeEmptyStringsFromArray(arr: Array<string>): Array<string> {\n        return arr.filter((entry) => {\n            return !!entry;\n        });\n    }\n\n    /**\n     * Attempts to parse a string into JSON\n     * @param str\n     */\n    static jsonParseHelper<T>(str: string): T | null {\n        try {\n            return JSON.parse(str) as T;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\n     * @param input String to match against\n     */\n    static matchPattern(pattern: string, input: string): boolean {\n        /**\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\n         */\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        const regex: RegExp = new RegExp(\n            pattern\n                .replace(/\\\\/g, \"\\\\\\\\\")\n                .replace(/\\*/g, \"[^ ]*\")\n                .replace(/\\?/g, \"\\\\?\")\n        );\n\n        return regex.test(input);\n    }\n}\n"],"mappings":";;;AAKA;;AAEG;AACH;AACI;;;AAGG,MAAAA,WAAA;;;;AAsBH;;;;QAIG,MAAAC,GAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAC,MAAA;sBACuBC,IAAI,CAAKJ,GAAA,EAAAK,MAAQ,KAAI;MAe/C,E;;;EAIG;EACH,OAAOC,WAAAC,GAAA,EAAgBC,MAAM;IAI7B,OAAAD,GAAA,CAAAE,OAAA,CAAAD,MAAA;;;IAGG,OAAAD,GAAA,CAAAF,MAAA,IAAAG,MAAA,CAAAH,MAAA,IACIE,GAAA,CAAAG,WAAA,CAAAF,MAAA,MAA4BD,GAAK,CAAAF,MAAM,GAAAG,MAAO,CAAGH,MAAM;EAM9D;;;AAGG;;AASH;;;;IAIG,MAAAM,MAAA,GAAAC,CAAA,IAAAC,kBAAA,CAAAD,CAAA,CAAAE,OAAA;IACGC,MAAa,CAAAC,OAAA,CAACC,IAAO,IAAE;MAehC,IAAAA,IAAA,CAAAC,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}