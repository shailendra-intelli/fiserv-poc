{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { updateData } from \"./uploadSlice\";\nconst initialState = [];\nexport const addServer = createAsyncThunk(\"servers/addServer\", async (newServer, {\n  getState,\n  dispatch\n}) => {\n  // Access the state using getState()\n  const currentState = getState();\n  const updatedServers = [...currentState.upload.value.servers, newServer];\n  // Update the 'servers' array in the uploadSlice\n  const jsonDetailsObject = {\n    key: \"servers\",\n    data: updatedServers\n  };\n  dispatch(updateData(jsonDetailsObject));\n});\nexport const editServer = createAsyncThunk(\"servers/addServer\", async (newServer, {\n  getState,\n  dispatch\n}) => {\n  // Access the state using getState()\n  const currentState = getState();\n  const updatedServers = [...currentState.upload.value.servers, newServer];\n  // Update the 'servers' array in the uploadSlice\n  const jsonDetailsObject = {\n    key: \"servers\",\n    data: updatedServers\n  };\n  dispatch(updateData(jsonDetailsObject));\n});\nexport const deleteServers = createAsyncThunk(\"servers/addServer\", async (serversArrayWithDeletedServersData, {\n  getState,\n  dispatch\n}) => {\n  const currentState = getState();\n  const jsonDetailsObject = {\n    key: \"servers\",\n    data: serversArrayWithDeletedServersData\n  };\n  dispatch(updateData(jsonDetailsObject));\n});\nconst serversSlice = createSlice({\n  name: \"serversSlice\",\n  initialState,\n  reducers: {}\n});","map":{"version":3,"names":["createAsyncThunk","createSlice","updateData","initialState","addServer","newServer","getState","dispatch","currentState","updatedServers","upload","value","servers","jsonDetailsObject","key","data","editServer","deleteServers","serversArrayWithDeletedServersData","serversSlice","name","reducers"],"sources":["D:/react-typescript/intelli-gui/src/store/reducers/serversSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, current } from \"@reduxjs/toolkit\";\r\nimport { JsonDetailsObject, ServerData } from \"../../utils/constant/types\";\r\nimport { RootState } from \"../store\";\r\nimport { updateData } from \"./uploadSlice\";\r\n\r\nconst initialState: ServerData[] = [];\r\n\r\nexport interface ServerState {\r\n  selected: boolean;\r\n  id: string;\r\n  data: ServerData;\r\n}\r\n\r\nexport const addServer = createAsyncThunk(\r\n  \"servers/addServer\",\r\n  async (newServer: ServerData, { getState, dispatch }) => {\r\n    // Access the state using getState()\r\n    const currentState = getState() as RootState;\r\n    const updatedServers = [...currentState.upload.value.servers, newServer];\r\n    // Update the 'servers' array in the uploadSlice\r\n    const jsonDetailsObject: JsonDetailsObject = {\r\n      key: \"servers\",\r\n      data: updatedServers,\r\n    };\r\n    dispatch(updateData(jsonDetailsObject));\r\n  }\r\n);\r\n\r\nexport const editServer = createAsyncThunk(\r\n  \"servers/addServer\",\r\n  async (newServer: ServerData, { getState, dispatch }) => {\r\n    // Access the state using getState()\r\n    const currentState = getState() as RootState;\r\n    const updatedServers = [...currentState.upload.value.servers, newServer];\r\n    // Update the 'servers' array in the uploadSlice\r\n    const jsonDetailsObject: JsonDetailsObject = {\r\n      key: \"servers\",\r\n      data: updatedServers,\r\n    };\r\n    dispatch(updateData(jsonDetailsObject));\r\n  }\r\n);\r\nexport const deleteServers = createAsyncThunk(\r\n  \"servers/addServer\",\r\n  async (\r\n    serversArrayWithDeletedServersData: ServerData[],\r\n    { getState, dispatch }\r\n  ) => {\r\n    const currentState = getState() as RootState;\r\n\r\n    const jsonDetailsObject: JsonDetailsObject = {\r\n      key: \"servers\",\r\n      data: serversArrayWithDeletedServersData,\r\n    };\r\n    dispatch(updateData(jsonDetailsObject));\r\n  }\r\n);\r\n\r\nconst serversSlice = createSlice({\r\n  name: \"serversSlice\",\r\n  initialState,\r\n  reducers: {},\r\n});\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAiB,kBAAkB;AAGzE,SAASC,UAAU,QAAQ,eAAe;AAE1C,MAAMC,YAA0B,GAAG,EAAE;AAQrC,OAAO,MAAMC,SAAS,GAAGJ,gBAAgB,CACvC,mBAAmB,EACnB,OAAOK,SAAqB,EAAE;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EACvD;EACA,MAAMC,YAAY,GAAGF,QAAQ,CAAC,CAAc;EAC5C,MAAMG,cAAc,GAAG,CAAC,GAAGD,YAAY,CAACE,MAAM,CAACC,KAAK,CAACC,OAAO,EAAEP,SAAS,CAAC;EACxE;EACA,MAAMQ,iBAAoC,GAAG;IAC3CC,GAAG,EAAE,SAAS;IACdC,IAAI,EAAEN;EACR,CAAC;EACDF,QAAQ,CAACL,UAAU,CAACW,iBAAiB,CAAC,CAAC;AACzC,CACF,CAAC;AAED,OAAO,MAAMG,UAAU,GAAGhB,gBAAgB,CACxC,mBAAmB,EACnB,OAAOK,SAAqB,EAAE;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EACvD;EACA,MAAMC,YAAY,GAAGF,QAAQ,CAAC,CAAc;EAC5C,MAAMG,cAAc,GAAG,CAAC,GAAGD,YAAY,CAACE,MAAM,CAACC,KAAK,CAACC,OAAO,EAAEP,SAAS,CAAC;EACxE;EACA,MAAMQ,iBAAoC,GAAG;IAC3CC,GAAG,EAAE,SAAS;IACdC,IAAI,EAAEN;EACR,CAAC;EACDF,QAAQ,CAACL,UAAU,CAACW,iBAAiB,CAAC,CAAC;AACzC,CACF,CAAC;AACD,OAAO,MAAMI,aAAa,GAAGjB,gBAAgB,CAC3C,mBAAmB,EACnB,OACEkB,kCAAgD,EAChD;EAAEZ,QAAQ;EAAEC;AAAS,CAAC,KACnB;EACH,MAAMC,YAAY,GAAGF,QAAQ,CAAC,CAAc;EAE5C,MAAMO,iBAAoC,GAAG;IAC3CC,GAAG,EAAE,SAAS;IACdC,IAAI,EAAEG;EACR,CAAC;EACDX,QAAQ,CAACL,UAAU,CAACW,iBAAiB,CAAC,CAAC;AACzC,CACF,CAAC;AAED,MAAMM,YAAY,GAAGlB,WAAW,CAAC;EAC/BmB,IAAI,EAAE,cAAc;EACpBjB,YAAY;EACZkB,QAAQ,EAAE,CAAC;AACb,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}