{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { ProtocolUtils, ClientAuthError, UrlString } from '@azure/msal-common';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass BrowserProtocolUtils {\n  /**\n   * Extracts the BrowserStateObject from the state string.\n   * @param browserCrypto\n   * @param state\n   */\n  static extractBrowserRequestState(browserCrypto, state) {\n    if (!state) {\n      return null;\n    }\n    try {\n      const requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);\n      return requestStateObj.libraryState.meta;\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(state, e);\n    }\n  }\n  /**\n   * Parses properties of server response from url hash\n   * @param locationHash Hash from url\n   */\n  static parseServerResponseFromHash(locationHash) {\n    if (!locationHash) {\n      return {};\n    }\n    const hashUrlString = new UrlString(locationHash);\n    return UrlString.getDeserializedHash(hashUrlString.getHash());\n  }\n}\nexport { BrowserProtocolUtils };","map":{"version":3,"names":["BrowserProtocolUtils","extractBrowserRequestState","browserCrypto","state","requestStateObj","ProtocolUtils","parseRequestState","libraryState","meta"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\utils\\BrowserProtocolUtils.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { InteractionType } from \"./BrowserConstants\";\nimport {\n    ClientAuthError,\n    ICrypto,\n    RequestStateObject,\n    ProtocolUtils,\n    ServerAuthorizationCodeResponse,\n    UrlString,\n} from \"@azure/msal-common\";\n\nexport type BrowserStateObject = {\n    interactionType: InteractionType;\n};\n\nexport class BrowserProtocolUtils {\n    /**\n     * Extracts the BrowserStateObject from the state string.\n     * @param browserCrypto\n     * @param state\n     */\n    static extractBrowserRequestState(\n        browserCrypto: ICrypto,\n        state: string\n    ): BrowserStateObject | null {\n        if (!state) {\n            return null;\n        }\n\n        try {\n            const requestStateObj: RequestStateObject =\n                ProtocolUtils.parseRequestState(browserCrypto, state);\n            return requestStateObj.libraryState.meta as BrowserStateObject;\n        } catch (e) {\n            throw ClientAuthError.createInvalidStateError(state, e as string);\n        }\n    }\n\n    /**\n     * Parses properties of server response from url hash\n     * @param locationHash Hash from url\n     */\n    static parseServerResponseFromHash(\n        locationHash: string\n    ): ServerAuthorizationCodeResponse {\n        if (!locationHash) {\n            return {};\n        }\n\n        const hashUrlString = new UrlString(locationHash);\n        return UrlString.getDeserializedHash(hashUrlString.getHash());\n    }\n}\n"],"mappings":";;;;;AAKA;AACA;AASA;;AAIA,MAAAA,oBAAiC;EAC7B;;;;AAIG;EACH,OAAOC,0BAA0BA,CAC7BC,aAAa,EAAEC,KAAA,EAAO;IAgB1B,KAAAA,KAAA;;;IAGG;MAC+B,MAAAC,eAAA,GAAAC,aAAA,CAAAC,iBAEA,CAAAJ,aAAA,EAAAC,KAAA;MAQrC,OAAAC,eAAA,CAAAG,YAAA,CAAAC,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}