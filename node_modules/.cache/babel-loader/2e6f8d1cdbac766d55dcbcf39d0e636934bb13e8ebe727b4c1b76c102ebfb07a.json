{"ast":null,"code":"/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n\nimport { extractTokenClaims } from '../../account/AuthToken.mjs';\nimport { createClientAuthError } from '../../error/ClientAuthError.mjs';\nimport { Separators, CredentialType, AuthenticationScheme, SERVER_TELEM_CONSTANTS } from '../../utils/Constants.mjs';\nimport { TimeUtils } from '../../utils/TimeUtils.mjs';\nimport { tokenClaimsCnfRequiredForSignedJwt } from '../../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Cache Key: <home_account_id>-<environment>-<credential_type>-<client_id or familyId>-<realm>-<scopes>-<claims hash>-<scheme>\n * IdToken Example: uid.utid-login.microsoftonline.com-idtoken-app_client_id-contoso.com\n * AccessToken Example: uid.utid-login.microsoftonline.com-accesstoken-app_client_id-contoso.com-scope1 scope2--pop\n * RefreshToken Example: uid.utid-login.microsoftonline.com-refreshtoken-1-contoso.com\n * @param credentialEntity\n * @returns\n */\nfunction generateCredentialKey(credentialEntity) {\n  const credentialKey = [generateAccountId(credentialEntity), generateCredentialId(credentialEntity), generateTarget(credentialEntity), generateClaimsHash(credentialEntity), generateScheme(credentialEntity)];\n  return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\n * Create IdTokenEntity\n * @param homeAccountId\n * @param authenticationResult\n * @param clientId\n * @param authority\n */\nfunction createIdTokenEntity(homeAccountId, environment, idToken, clientId, tenantId) {\n  const idTokenEntity = {\n    credentialType: CredentialType.ID_TOKEN,\n    homeAccountId: homeAccountId,\n    environment: environment,\n    clientId: clientId,\n    secret: idToken,\n    realm: tenantId\n  };\n  return idTokenEntity;\n}\n/**\n * Create AccessTokenEntity\n * @param homeAccountId\n * @param environment\n * @param accessToken\n * @param clientId\n * @param tenantId\n * @param scopes\n * @param expiresOn\n * @param extExpiresOn\n */\nfunction createAccessTokenEntity(homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, base64Decode, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {\n  const atEntity = {\n    homeAccountId: homeAccountId,\n    credentialType: CredentialType.ACCESS_TOKEN,\n    secret: accessToken,\n    cachedAt: TimeUtils.nowSeconds().toString(),\n    expiresOn: expiresOn.toString(),\n    extendedExpiresOn: extExpiresOn.toString(),\n    environment: environment,\n    clientId: clientId,\n    realm: tenantId,\n    target: scopes,\n    tokenType: tokenType || AuthenticationScheme.BEARER\n  };\n  if (userAssertionHash) {\n    atEntity.userAssertionHash = userAssertionHash;\n  }\n  if (refreshOn) {\n    atEntity.refreshOn = refreshOn.toString();\n  }\n  if (requestedClaims) {\n    atEntity.requestedClaims = requestedClaims;\n    atEntity.requestedClaimsHash = requestedClaimsHash;\n  }\n  /*\n   * Create Access Token With Auth Scheme instead of regular access token\n   * Cast to lower to handle \"bearer\" from ADFS\n   */\n  if (atEntity.tokenType?.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) {\n    atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n    switch (atEntity.tokenType) {\n      case AuthenticationScheme.POP:\n        // Make sure keyId is present and add it to credential\n        const tokenClaims = extractTokenClaims(accessToken, base64Decode);\n        if (!tokenClaims?.cnf?.kid) {\n          throw createClientAuthError(tokenClaimsCnfRequiredForSignedJwt);\n        }\n        atEntity.keyId = tokenClaims.cnf.kid;\n        break;\n      case AuthenticationScheme.SSH:\n        atEntity.keyId = keyId;\n    }\n  }\n  return atEntity;\n}\n/**\n * Create RefreshTokenEntity\n * @param homeAccountId\n * @param authenticationResult\n * @param clientId\n * @param authority\n */\nfunction createRefreshTokenEntity(homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash) {\n  const rtEntity = {\n    credentialType: CredentialType.REFRESH_TOKEN,\n    homeAccountId: homeAccountId,\n    environment: environment,\n    clientId: clientId,\n    secret: refreshToken\n  };\n  if (userAssertionHash) {\n    rtEntity.userAssertionHash = userAssertionHash;\n  }\n  if (familyId) {\n    rtEntity.familyId = familyId;\n  }\n  return rtEntity;\n}\nfunction isCredentialEntity(entity) {\n  return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\");\n}\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nfunction isAccessTokenEntity(entity) {\n  if (!entity) {\n    return false;\n  }\n  return isCredentialEntity(entity) && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"target\") && (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\n}\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nfunction isIdTokenEntity(entity) {\n  if (!entity) {\n    return false;\n  }\n  return isCredentialEntity(entity) && entity.hasOwnProperty(\"realm\") && entity[\"credentialType\"] === CredentialType.ID_TOKEN;\n}\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nfunction isRefreshTokenEntity(entity) {\n  if (!entity) {\n    return false;\n  }\n  return isCredentialEntity(entity) && entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN;\n}\n/**\n * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n */\nfunction generateAccountId(credentialEntity) {\n  const accountId = [credentialEntity.homeAccountId, credentialEntity.environment];\n  return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\n * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\n */\nfunction generateCredentialId(credentialEntity) {\n  const clientOrFamilyId = credentialEntity.credentialType === CredentialType.REFRESH_TOKEN ? credentialEntity.familyId || credentialEntity.clientId : credentialEntity.clientId;\n  const credentialId = [credentialEntity.credentialType, clientOrFamilyId, credentialEntity.realm || \"\"];\n  return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\n * Generate target key component as per schema: <target>\n */\nfunction generateTarget(credentialEntity) {\n  return (credentialEntity.target || \"\").toLowerCase();\n}\n/**\n * Generate requested claims key component as per schema: <requestedClaims>\n */\nfunction generateClaimsHash(credentialEntity) {\n  return (credentialEntity.requestedClaimsHash || \"\").toLowerCase();\n}\n/**\n * Generate scheme key componenet as per schema: <scheme>\n */\nfunction generateScheme(credentialEntity) {\n  /*\n   * PoP Tokens and SSH certs include scheme in cache key\n   * Cast to lowercase to handle \"bearer\" from ADFS\n   */\n  return credentialEntity.tokenType && credentialEntity.tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? credentialEntity.tokenType.toLowerCase() : \"\";\n}\n/**\n * validates if a given cache entry is \"Telemetry\", parses <key,value>\n * @param key\n * @param entity\n */\nfunction isServerTelemetryEntity(key, entity) {\n  const validateKey = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\n  let validateEntity = true;\n  if (entity) {\n    validateEntity = entity.hasOwnProperty(\"failedRequests\") && entity.hasOwnProperty(\"errors\") && entity.hasOwnProperty(\"cacheHits\");\n  }\n  return validateKey && validateEntity;\n}\nexport { createAccessTokenEntity, createIdTokenEntity, createRefreshTokenEntity, generateCredentialKey, isAccessTokenEntity, isCredentialEntity, isIdTokenEntity, isRefreshTokenEntity, isServerTelemetryEntity };","map":{"version":3,"names":["generateTarget","credentialEntity","generateClaimsHash","generateScheme","createIdTokenEntity","homeAccountId","environment","idToken","clientId","tenantId","idTokenEntity","realm","atEntity","credentialType","CredentialType","ACCESS_TOKEN","extendedExpiresOn","extExpiresOn","toString"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\cache\\utils\\CacheHelpers.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { extractTokenClaims } from \"../../account/AuthToken\";\nimport { TokenClaims } from \"../../account/TokenClaims\";\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../../error/ClientAuthError\";\nimport {\n    AuthenticationScheme,\n    CredentialType,\n    SERVER_TELEM_CONSTANTS,\n    Separators,\n} from \"../../utils/Constants\";\nimport { TimeUtils } from \"../../utils/TimeUtils\";\nimport { AccessTokenEntity } from \"../entities/AccessTokenEntity\";\nimport { CredentialEntity } from \"../entities/CredentialEntity\";\nimport { IdTokenEntity } from \"../entities/IdTokenEntity\";\nimport { RefreshTokenEntity } from \"../entities/RefreshTokenEntity\";\n\n/**\n * Cache Key: <home_account_id>-<environment>-<credential_type>-<client_id or familyId>-<realm>-<scopes>-<claims hash>-<scheme>\n * IdToken Example: uid.utid-login.microsoftonline.com-idtoken-app_client_id-contoso.com\n * AccessToken Example: uid.utid-login.microsoftonline.com-accesstoken-app_client_id-contoso.com-scope1 scope2--pop\n * RefreshToken Example: uid.utid-login.microsoftonline.com-refreshtoken-1-contoso.com\n * @param credentialEntity\n * @returns\n */\nexport function generateCredentialKey(\n    credentialEntity: CredentialEntity\n): string {\n    const credentialKey = [\n        generateAccountId(credentialEntity),\n        generateCredentialId(credentialEntity),\n        generateTarget(credentialEntity),\n        generateClaimsHash(credentialEntity),\n        generateScheme(credentialEntity),\n    ];\n\n    return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n\n/**\n * Create IdTokenEntity\n * @param homeAccountId\n * @param authenticationResult\n * @param clientId\n * @param authority\n */\nexport function createIdTokenEntity(\n    homeAccountId: string,\n    environment: string,\n    idToken: string,\n    clientId: string,\n    tenantId: string\n): IdTokenEntity {\n    const idTokenEntity: IdTokenEntity = {\n        credentialType: CredentialType.ID_TOKEN,\n        homeAccountId: homeAccountId,\n        environment: environment,\n        clientId: clientId,\n        secret: idToken,\n        realm: tenantId,\n    };\n\n    return idTokenEntity;\n}\n\n/**\n * Create AccessTokenEntity\n * @param homeAccountId\n * @param environment\n * @param accessToken\n * @param clientId\n * @param tenantId\n * @param scopes\n * @param expiresOn\n * @param extExpiresOn\n */\nexport function createAccessTokenEntity(\n    homeAccountId: string,\n    environment: string,\n    accessToken: string,\n    clientId: string,\n    tenantId: string,\n    scopes: string,\n    expiresOn: number,\n    extExpiresOn: number,\n    base64Decode: (input: string) => string,\n    refreshOn?: number,\n    tokenType?: AuthenticationScheme,\n    userAssertionHash?: string,\n    keyId?: string,\n    requestedClaims?: string,\n    requestedClaimsHash?: string\n): AccessTokenEntity {\n    const atEntity: AccessTokenEntity = {\n        homeAccountId: homeAccountId,\n        credentialType: CredentialType.ACCESS_TOKEN,\n        secret: accessToken,\n        cachedAt: TimeUtils.nowSeconds().toString(),\n        expiresOn: expiresOn.toString(),\n        extendedExpiresOn: extExpiresOn.toString(),\n        environment: environment,\n        clientId: clientId,\n        realm: tenantId,\n        target: scopes,\n        tokenType: tokenType || AuthenticationScheme.BEARER,\n    };\n\n    if (userAssertionHash) {\n        atEntity.userAssertionHash = userAssertionHash;\n    }\n\n    if (refreshOn) {\n        atEntity.refreshOn = refreshOn.toString();\n    }\n\n    if (requestedClaims) {\n        atEntity.requestedClaims = requestedClaims;\n        atEntity.requestedClaimsHash = requestedClaimsHash;\n    }\n\n    /*\n     * Create Access Token With Auth Scheme instead of regular access token\n     * Cast to lower to handle \"bearer\" from ADFS\n     */\n    if (\n        atEntity.tokenType?.toLowerCase() !==\n        AuthenticationScheme.BEARER.toLowerCase()\n    ) {\n        atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n        switch (atEntity.tokenType) {\n            case AuthenticationScheme.POP:\n                // Make sure keyId is present and add it to credential\n                const tokenClaims: TokenClaims | null = extractTokenClaims(\n                    accessToken,\n                    base64Decode\n                );\n                if (!tokenClaims?.cnf?.kid) {\n                    throw createClientAuthError(\n                        ClientAuthErrorCodes.tokenClaimsCnfRequiredForSignedJwt\n                    );\n                }\n                atEntity.keyId = tokenClaims.cnf.kid;\n                break;\n            case AuthenticationScheme.SSH:\n                atEntity.keyId = keyId;\n        }\n    }\n\n    return atEntity;\n}\n\n/**\n * Create RefreshTokenEntity\n * @param homeAccountId\n * @param authenticationResult\n * @param clientId\n * @param authority\n */\nexport function createRefreshTokenEntity(\n    homeAccountId: string,\n    environment: string,\n    refreshToken: string,\n    clientId: string,\n    familyId?: string,\n    userAssertionHash?: string\n): RefreshTokenEntity {\n    const rtEntity: RefreshTokenEntity = {\n        credentialType: CredentialType.REFRESH_TOKEN,\n        homeAccountId: homeAccountId,\n        environment: environment,\n        clientId: clientId,\n        secret: refreshToken,\n    };\n\n    if (userAssertionHash) {\n        rtEntity.userAssertionHash = userAssertionHash;\n    }\n\n    if (familyId) {\n        rtEntity.familyId = familyId;\n    }\n\n    return rtEntity;\n}\n\nexport function isCredentialEntity(entity: object): boolean {\n    return (\n        entity.hasOwnProperty(\"homeAccountId\") &&\n        entity.hasOwnProperty(\"environment\") &&\n        entity.hasOwnProperty(\"credentialType\") &&\n        entity.hasOwnProperty(\"clientId\") &&\n        entity.hasOwnProperty(\"secret\")\n    );\n}\n\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nexport function isAccessTokenEntity(entity: object): boolean {\n    if (!entity) {\n        return false;\n    }\n\n    return (\n        isCredentialEntity(entity) &&\n        entity.hasOwnProperty(\"realm\") &&\n        entity.hasOwnProperty(\"target\") &&\n        (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN ||\n            entity[\"credentialType\"] ===\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME)\n    );\n}\n\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nexport function isIdTokenEntity(entity: object): boolean {\n    if (!entity) {\n        return false;\n    }\n\n    return (\n        isCredentialEntity(entity) &&\n        entity.hasOwnProperty(\"realm\") &&\n        entity[\"credentialType\"] === CredentialType.ID_TOKEN\n    );\n}\n\n/**\n * Validates an entity: checks for all expected params\n * @param entity\n */\nexport function isRefreshTokenEntity(entity: object): boolean {\n    if (!entity) {\n        return false;\n    }\n\n    return (\n        isCredentialEntity(entity) &&\n        entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN\n    );\n}\n\n/**\n * Generate Account Id key component as per the schema: <home_account_id>-<environment>\n */\nfunction generateAccountId(credentialEntity: CredentialEntity): string {\n    const accountId: Array<string> = [\n        credentialEntity.homeAccountId,\n        credentialEntity.environment,\n    ];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n\n/**\n * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\n */\nfunction generateCredentialId(credentialEntity: CredentialEntity): string {\n    const clientOrFamilyId =\n        credentialEntity.credentialType === CredentialType.REFRESH_TOKEN\n            ? credentialEntity.familyId || credentialEntity.clientId\n            : credentialEntity.clientId;\n    const credentialId: Array<string> = [\n        credentialEntity.credentialType,\n        clientOrFamilyId,\n        credentialEntity.realm || \"\",\n    ];\n\n    return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n\n/**\n * Generate target key component as per schema: <target>\n */\nfunction generateTarget(credentialEntity: CredentialEntity): string {\n    return (credentialEntity.target || \"\").toLowerCase();\n}\n\n/**\n * Generate requested claims key component as per schema: <requestedClaims>\n */\nfunction generateClaimsHash(credentialEntity: CredentialEntity): string {\n    return (credentialEntity.requestedClaimsHash || \"\").toLowerCase();\n}\n\n/**\n * Generate scheme key componenet as per schema: <scheme>\n */\nfunction generateScheme(credentialEntity: CredentialEntity): string {\n    /*\n     * PoP Tokens and SSH certs include scheme in cache key\n     * Cast to lowercase to handle \"bearer\" from ADFS\n     */\n    return credentialEntity.tokenType &&\n        credentialEntity.tokenType.toLowerCase() !==\n            AuthenticationScheme.BEARER.toLowerCase()\n        ? credentialEntity.tokenType.toLowerCase()\n        : \"\";\n}\n\n/**\n * validates if a given cache entry is \"Telemetry\", parses <key,value>\n * @param key\n * @param entity\n */\nexport function isServerTelemetryEntity(key: string, entity?: object): boolean {\n    const validateKey: boolean =\n        key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\n    let validateEntity: boolean = true;\n\n    if (entity) {\n        validateEntity =\n            entity.hasOwnProperty(\"failedRequests\") &&\n            entity.hasOwnProperty(\"errors\") &&\n            entity.hasOwnProperty(\"cacheHits\");\n    }\n\n    return validateKey && validateEntity;\n}\n"],"mappings":";;;;;;;;;AAWA;AAOA;AACA;AACA;;;;;AAUG;AACH;AAcA;;;sGAMGA,cAAA,CAAAC,gBAAA,GACaC,kBAAA,CAAAD,gBAAmB,CAC/B,EAkBJE,cAAA,CAAAF,gBAAA,E;;;;;;;;;AAUG;AACH,SAAAG,mBAAuCA,CAAAC,aACtB,EAAAC,WAAA,EAAAC,OACb,EAAAC,QAAA,EAAaC,QAAA,EACF;EAwEf,MAAAC,aAAA;;;;;;IAMGC,KAAA,EAAAF;EACH;EA2BA,OAAAC,aAAgB;AAUhB;;;AAGG;AACH;AAeA;;;AAGG;AACH;AAYA;;;EAGG,MAAAE,QAAA;IACHP,aAAA,EAAAA,aAAA;IAoEAQ,cAAA,EAAAC,cAAA,CAAAC,YAAA;;;;IAIGC,iBAAA,EAAAC,YAAA,CAAAC,QAAA;IACHZ,WAAA,EAAAA,WAAuC"},"metadata":{},"sourceType":"module","externalDependencies":[]}