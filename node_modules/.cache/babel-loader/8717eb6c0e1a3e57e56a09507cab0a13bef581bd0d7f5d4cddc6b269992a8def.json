{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { ClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Constants, OIDC_SCOPES } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\n * to ensure uniqueness of strings.\n */\nclass ScopeSet {\n  constructor(inputScopes) {\n    // Filter empty string and null/undefined array items\n    const scopeArr = inputScopes ? StringUtils.trimArrayEntries([...inputScopes]) : [];\n    const filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n    // Validate and filter scopes (validate function throws if validation fails)\n    this.validateInputScopes(filteredInput);\n    this.scopes = new Set(); // Iterator in constructor not supported by IE11\n    filteredInput.forEach(scope => this.scopes.add(scope));\n  }\n  /**\n   * Factory method to create ScopeSet from space-delimited string\n   * @param inputScopeString\n   * @param appClientId\n   * @param scopesRequired\n   */\n  static fromString(inputScopeString) {\n    const scopeString = inputScopeString || Constants.EMPTY_STRING;\n    const inputScopes = scopeString.split(\" \");\n    return new ScopeSet(inputScopes);\n  }\n  /**\n   * Creates the set of scopes to search for in cache lookups\n   * @param inputScopeString\n   * @returns\n   */\n  static createSearchScopes(inputScopeString) {\n    const scopeSet = new ScopeSet(inputScopeString);\n    if (!scopeSet.containsOnlyOIDCScopes()) {\n      scopeSet.removeOIDCScopes();\n    } else {\n      scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n    }\n    return scopeSet;\n  }\n  /**\n   * Used to validate the scopes input parameter requested  by the developer.\n   * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n   */\n  validateInputScopes(inputScopes) {\n    // Check if scopes are required but not given or is an empty array\n    if (!inputScopes || inputScopes.length < 1) {\n      throw ClientConfigurationError.createEmptyScopesArrayError();\n    }\n  }\n  /**\n   * Check if a given scope is present in this set of scopes.\n   * @param scope\n   */\n  containsScope(scope) {\n    const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n    const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n    // compare lowercase scopes\n    return scope ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n  }\n  /**\n   * Check if a set of scopes is present in this set of scopes.\n   * @param scopeSet\n   */\n  containsScopeSet(scopeSet) {\n    if (!scopeSet || scopeSet.scopes.size <= 0) {\n      return false;\n    }\n    return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(scope => this.containsScope(scope));\n  }\n  /**\n   * Check if set of scopes contains only the defaults\n   */\n  containsOnlyOIDCScopes() {\n    let defaultScopeCount = 0;\n    OIDC_SCOPES.forEach(defaultScope => {\n      if (this.containsScope(defaultScope)) {\n        defaultScopeCount += 1;\n      }\n    });\n    return this.scopes.size === defaultScopeCount;\n  }\n  /**\n   * Appends single scope if passed\n   * @param newScope\n   */\n  appendScope(newScope) {\n    if (newScope) {\n      this.scopes.add(newScope.trim());\n    }\n  }\n  /**\n   * Appends multiple scopes if passed\n   * @param newScopes\n   */\n  appendScopes(newScopes) {\n    try {\n      newScopes.forEach(newScope => this.appendScope(newScope));\n    } catch (e) {\n      throw ClientAuthError.createAppendScopeSetError(e);\n    }\n  }\n  /**\n   * Removes element from set of scopes.\n   * @param scope\n   */\n  removeScope(scope) {\n    if (!scope) {\n      throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n    }\n    this.scopes.delete(scope.trim());\n  }\n  /**\n   * Removes default scopes from set of scopes\n   * Primarily used to prevent cache misses if the default scopes are not returned from the server\n   */\n  removeOIDCScopes() {\n    OIDC_SCOPES.forEach(defaultScope => {\n      this.scopes.delete(defaultScope);\n    });\n  }\n  /**\n   * Combines an array of scopes with the current set of scopes.\n   * @param otherScopes\n   */\n  unionScopeSets(otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n    const unionScopes = new Set(); // Iterator in constructor not supported in IE11\n    otherScopes.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n    this.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\n    return unionScopes;\n  }\n  /**\n   * Check if scopes intersect between this set and another.\n   * @param otherScopes\n   */\n  intersectingScopeSets(otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n    // Do not allow OIDC scopes to be the only intersecting scopes\n    if (!otherScopes.containsOnlyOIDCScopes()) {\n      otherScopes.removeOIDCScopes();\n    }\n    const unionScopes = this.unionScopeSets(otherScopes);\n    const sizeOtherScopes = otherScopes.getScopeCount();\n    const sizeThisScopes = this.getScopeCount();\n    const sizeUnionScopes = unionScopes.size;\n    return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n  }\n  /**\n   * Returns size of set of scopes.\n   */\n  getScopeCount() {\n    return this.scopes.size;\n  }\n  /**\n   * Returns the scopes as an array of string values\n   */\n  asArray() {\n    const array = [];\n    this.scopes.forEach(val => array.push(val));\n    return array;\n  }\n  /**\n   * Prints scopes into a space-delimited string\n   */\n  printScopes() {\n    if (this.scopes) {\n      const scopeArr = this.asArray();\n      return scopeArr.join(\" \");\n    }\n    return Constants.EMPTY_STRING;\n  }\n  /**\n   * Prints scopes into a space-delimited lower-case string (used for caching)\n   */\n  printScopesLowerCase() {\n    return this.printScopes().toLowerCase();\n  }\n}\nexport { ScopeSet };","map":{"version":3,"names":["ScopeSet","constructor","inputScopes","filteredInput","scopeArr","StringUtils","removeEmptyStringsFromArray","forEach","scope","scopes","add","scopeString","split","scopeSet","inputScopeString","containsOnlyOIDCScopes","removeOIDCScopes","removeScope","Constants","OFFLINE_ACCESS_SCOPE","length","ClientConfigurationError","createEmptyScopesArrayError","lowerCaseScopes","printScopesLowerCase","lowerCaseScopesSet","has","toLowerCase","size","asArray","every","containsScope"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\request\\ScopeSet.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { Constants, OIDC_SCOPES } from \"../utils/Constants\";\n\n/**\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\n * to ensure uniqueness of strings.\n */\nexport class ScopeSet {\n    // Scopes as a Set of strings\n    private scopes: Set<string>;\n\n    constructor(inputScopes: Array<string>) {\n        // Filter empty string and null/undefined array items\n        const scopeArr = inputScopes\n            ? StringUtils.trimArrayEntries([...inputScopes])\n            : [];\n        const filteredInput = scopeArr\n            ? StringUtils.removeEmptyStringsFromArray(scopeArr)\n            : [];\n\n        // Validate and filter scopes (validate function throws if validation fails)\n        this.validateInputScopes(filteredInput);\n\n        this.scopes = new Set<string>(); // Iterator in constructor not supported by IE11\n        filteredInput.forEach((scope) => this.scopes.add(scope));\n    }\n\n    /**\n     * Factory method to create ScopeSet from space-delimited string\n     * @param inputScopeString\n     * @param appClientId\n     * @param scopesRequired\n     */\n    static fromString(inputScopeString: string): ScopeSet {\n        const scopeString = inputScopeString || Constants.EMPTY_STRING;\n        const inputScopes: Array<string> = scopeString.split(\" \");\n        return new ScopeSet(inputScopes);\n    }\n\n    /**\n     * Creates the set of scopes to search for in cache lookups\n     * @param inputScopeString\n     * @returns\n     */\n    static createSearchScopes(inputScopeString: Array<string>): ScopeSet {\n        const scopeSet = new ScopeSet(inputScopeString);\n        if (!scopeSet.containsOnlyOIDCScopes()) {\n            scopeSet.removeOIDCScopes();\n        } else {\n            scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\n        }\n\n        return scopeSet;\n    }\n\n    /**\n     * Used to validate the scopes input parameter requested  by the developer.\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\n     */\n    private validateInputScopes(inputScopes: Array<string>): void {\n        // Check if scopes are required but not given or is an empty array\n        if (!inputScopes || inputScopes.length < 1) {\n            throw ClientConfigurationError.createEmptyScopesArrayError();\n        }\n    }\n\n    /**\n     * Check if a given scope is present in this set of scopes.\n     * @param scope\n     */\n    containsScope(scope: string): boolean {\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n        // compare lowercase scopes\n        return scope\n            ? lowerCaseScopesSet.scopes.has(scope.toLowerCase())\n            : false;\n    }\n\n    /**\n     * Check if a set of scopes is present in this set of scopes.\n     * @param scopeSet\n     */\n    containsScopeSet(scopeSet: ScopeSet): boolean {\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\n            return false;\n        }\n\n        return (\n            this.scopes.size >= scopeSet.scopes.size &&\n            scopeSet.asArray().every((scope) => this.containsScope(scope))\n        );\n    }\n\n    /**\n     * Check if set of scopes contains only the defaults\n     */\n    containsOnlyOIDCScopes(): boolean {\n        let defaultScopeCount = 0;\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            if (this.containsScope(defaultScope)) {\n                defaultScopeCount += 1;\n            }\n        });\n\n        return this.scopes.size === defaultScopeCount;\n    }\n\n    /**\n     * Appends single scope if passed\n     * @param newScope\n     */\n    appendScope(newScope: string): void {\n        if (newScope) {\n            this.scopes.add(newScope.trim());\n        }\n    }\n\n    /**\n     * Appends multiple scopes if passed\n     * @param newScopes\n     */\n    appendScopes(newScopes: Array<string>): void {\n        try {\n            newScopes.forEach((newScope) => this.appendScope(newScope));\n        } catch (e) {\n            throw ClientAuthError.createAppendScopeSetError(e as string);\n        }\n    }\n\n    /**\n     * Removes element from set of scopes.\n     * @param scope\n     */\n    removeScope(scope: string): void {\n        if (!scope) {\n            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n        }\n        this.scopes.delete(scope.trim());\n    }\n\n    /**\n     * Removes default scopes from set of scopes\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\n     */\n    removeOIDCScopes(): void {\n        OIDC_SCOPES.forEach((defaultScope: string) => {\n            this.scopes.delete(defaultScope);\n        });\n    }\n\n    /**\n     * Combines an array of scopes with the current set of scopes.\n     * @param otherScopes\n     */\n    unionScopeSets(otherScopes: ScopeSet): Set<string> {\n        if (!otherScopes) {\n            throw ClientAuthError.createEmptyInputScopeSetError();\n        }\n        const unionScopes = new Set<string>(); // Iterator in constructor not supported in IE11\n        otherScopes.scopes.forEach((scope) =>\n            unionScopes.add(scope.toLowerCase())\n        );\n        this.scopes.forEach((scope) => unionScopes.add(scope.toLowerCase()));\n        return unionScopes;\n    }\n\n    /**\n     * Check if scopes intersect between this set and another.\n     * @param otherScopes\n     */\n    intersectingScopeSets(otherScopes: ScopeSet): boolean {\n        if (!otherScopes) {\n            throw ClientAuthError.createEmptyInputScopeSetError();\n        }\n\n        // Do not allow OIDC scopes to be the only intersecting scopes\n        if (!otherScopes.containsOnlyOIDCScopes()) {\n            otherScopes.removeOIDCScopes();\n        }\n        const unionScopes = this.unionScopeSets(otherScopes);\n        const sizeOtherScopes = otherScopes.getScopeCount();\n        const sizeThisScopes = this.getScopeCount();\n        const sizeUnionScopes = unionScopes.size;\n        return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n    }\n\n    /**\n     * Returns size of set of scopes.\n     */\n    getScopeCount(): number {\n        return this.scopes.size;\n    }\n\n    /**\n     * Returns the scopes as an array of string values\n     */\n    asArray(): Array<string> {\n        const array: Array<string> = [];\n        this.scopes.forEach((val) => array.push(val));\n        return array;\n    }\n\n    /**\n     * Prints scopes into a space-delimited string\n     */\n    printScopes(): string {\n        if (this.scopes) {\n            const scopeArr = this.asArray();\n            return scopeArr.join(\" \");\n        }\n        return Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Prints scopes into a space-delimited lower-case string (used for caching)\n     */\n    printScopesLowerCase(): string {\n        return this.printScopes().toLowerCase();\n    }\n}\n"],"mappings":";;;;;;;;AAUA;;;;AAyBI;;;;;AAKG,MAAAA,QAAA;EACHC,WAAiBA,CAAAC,WAAA;IAMjB;;IAIG,MAAAC,aAAA,GAAAC,QAAA,GACsBC,WAAA,CAAAC,2BAAwB,CAACF,QAAO,IAWzD;;;;IAIGD,aAAA,CAAAI,OAAA,CAAAC,KAAA,SAAAC,MAAA,CAAAC,GAAA,CAAAF,KAAA;EACH;EAOA;;;AAGG;AACH;AASA;;;IAGG,MAAAN,WAAA,GAAAS,WAAA,CAAAC,KAAA;IACH,WAAAZ,QAAiB,CAAAE,WAAkB;EAWnC;;AAEG;AACH;AAWA;;;IAGG,MAAAW,QAAA,OAAAb,QAAA,CAAAc,gBAAA;IACH,KAAAD,QAAY,CAAAE,sBAAuB;MAMnCF,QAAA,CAAAG,gBAAA;;MAGGH,QAAA,CAAAI,WAAA,CAAAC,SAAA,CAAAC,oBAAA;;IASH,OAAAN,QAAA;;;AAGG;AACH;AAOA;;;IAGG;IACH,KAAAX,WAAoB,IAAIA,WAAA,CAAAkB,MAAA;MAMxB,MAAAC,wBAAA,CAAAC,2BAAA;;;EAGG;;AAaH;;;IAGG,MAAAC,eAAA,QAAAC,oBAAA,GAAAZ,KAAA;IACH,MAAAa,kBAAsB,OAAazB,QAAQ,CAAAuB,eAAU;IAgBrD;mBAEGE,kBAAA,CAAAhB,MAAA,CAAAiB,GAAA,CAAAlB,KAAA,CAAAmB,WAAA,MACH;EAIA;;AAEG;AACH;AAMA;;IAEG,KAAAd,QAAA,IAAAA,QAAA,CAAAJ,MAAA,CAAAmB,IAAA;MACH,OAAe,KAAM;IAQrB;uDAEGf,QAAA,CAAAgB,OAAA,GAAAC,KAAA,CAAAtB,KAAA,SAAAuB,aAAA,CAAAvB,KAAA;EACH;EAGH"},"metadata":{},"sourceType":"module","externalDependencies":[]}