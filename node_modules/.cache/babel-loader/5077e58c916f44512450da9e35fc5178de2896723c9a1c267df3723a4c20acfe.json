{"ast":null,"code":"/*! @azure/msal-browser v3.5.0 2023-11-07 */\n'use strict';\n\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { DB_NAME, DB_VERSION, DB_TABLE_NAME } from '../utils/BrowserConstants.mjs';\nimport { databaseUnavailable, databaseNotOpen } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\n */\nclass DatabaseStorage {\n  constructor() {\n    this.dbName = DB_NAME;\n    this.version = DB_VERSION;\n    this.tableName = DB_TABLE_NAME;\n    this.dbOpen = false;\n  }\n  /**\n   * Opens IndexedDB instance.\n   */\n  async open() {\n    return new Promise((resolve, reject) => {\n      const openDB = window.indexedDB.open(this.dbName, this.version);\n      openDB.addEventListener(\"upgradeneeded\", e => {\n        const event = e;\n        event.target.result.createObjectStore(this.tableName);\n      });\n      openDB.addEventListener(\"success\", e => {\n        const event = e;\n        this.db = event.target.result;\n        this.dbOpen = true;\n        resolve();\n      });\n      openDB.addEventListener(\"error\", () => reject(createBrowserAuthError(databaseUnavailable)));\n    });\n  }\n  /**\n   * Closes the connection to IndexedDB database when all pending transactions\n   * complete.\n   */\n  closeConnection() {\n    const db = this.db;\n    if (db && this.dbOpen) {\n      db.close();\n      this.dbOpen = false;\n    }\n  }\n  /**\n   * Opens database if it's not already open\n   */\n  async validateDbIsOpen() {\n    if (!this.dbOpen) {\n      return await this.open();\n    }\n  }\n  /**\n   * Retrieves item from IndexedDB instance.\n   * @param key\n   */\n  async getItem(key) {\n    await this.validateDbIsOpen();\n    return new Promise((resolve, reject) => {\n      // TODO: Add timeouts?\n      if (!this.db) {\n        return reject(createBrowserAuthError(databaseNotOpen));\n      }\n      const transaction = this.db.transaction([this.tableName], \"readonly\");\n      const objectStore = transaction.objectStore(this.tableName);\n      const dbGet = objectStore.get(key);\n      dbGet.addEventListener(\"success\", e => {\n        const event = e;\n        this.closeConnection();\n        resolve(event.target.result);\n      });\n      dbGet.addEventListener(\"error\", e => {\n        this.closeConnection();\n        reject(e);\n      });\n    });\n  }\n  /**\n   * Adds item to IndexedDB under given key\n   * @param key\n   * @param payload\n   */\n  async setItem(key, payload) {\n    await this.validateDbIsOpen();\n    return new Promise((resolve, reject) => {\n      // TODO: Add timeouts?\n      if (!this.db) {\n        return reject(createBrowserAuthError(databaseNotOpen));\n      }\n      const transaction = this.db.transaction([this.tableName], \"readwrite\");\n      const objectStore = transaction.objectStore(this.tableName);\n      const dbPut = objectStore.put(payload, key);\n      dbPut.addEventListener(\"success\", () => {\n        this.closeConnection();\n        resolve();\n      });\n      dbPut.addEventListener(\"error\", e => {\n        this.closeConnection();\n        reject(e);\n      });\n    });\n  }\n  /**\n   * Removes item from IndexedDB under given key\n   * @param key\n   */\n  async removeItem(key) {\n    await this.validateDbIsOpen();\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        return reject(createBrowserAuthError(databaseNotOpen));\n      }\n      const transaction = this.db.transaction([this.tableName], \"readwrite\");\n      const objectStore = transaction.objectStore(this.tableName);\n      const dbDelete = objectStore.delete(key);\n      dbDelete.addEventListener(\"success\", () => {\n        this.closeConnection();\n        resolve();\n      });\n      dbDelete.addEventListener(\"error\", e => {\n        this.closeConnection();\n        reject(e);\n      });\n    });\n  }\n  /**\n   * Get all the keys from the storage object as an iterable array of strings.\n   */\n  async getKeys() {\n    await this.validateDbIsOpen();\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        return reject(createBrowserAuthError(databaseNotOpen));\n      }\n      const transaction = this.db.transaction([this.tableName], \"readonly\");\n      const objectStore = transaction.objectStore(this.tableName);\n      const dbGetKeys = objectStore.getAllKeys();\n      dbGetKeys.addEventListener(\"success\", e => {\n        const event = e;\n        this.closeConnection();\n        resolve(event.target.result);\n      });\n      dbGetKeys.addEventListener(\"error\", e => {\n        this.closeConnection();\n        reject(e);\n      });\n    });\n  }\n  /**\n   *\n   * Checks whether there is an object under the search key in the object store\n   */\n  async containsKey(key) {\n    await this.validateDbIsOpen();\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        return reject(createBrowserAuthError(databaseNotOpen));\n      }\n      const transaction = this.db.transaction([this.tableName], \"readonly\");\n      const objectStore = transaction.objectStore(this.tableName);\n      const dbContainsKey = objectStore.count(key);\n      dbContainsKey.addEventListener(\"success\", e => {\n        const event = e;\n        this.closeConnection();\n        resolve(event.target.result === 1);\n      });\n      dbContainsKey.addEventListener(\"error\", e => {\n        this.closeConnection();\n        reject(e);\n      });\n    });\n  }\n  /**\n   * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\n   * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\n   * with IndexedDB database versions.\n   */\n  async deleteDatabase() {\n    // Check if database being deleted exists\n    if (this.db && this.dbOpen) {\n      this.closeConnection();\n    }\n    return new Promise((resolve, reject) => {\n      const deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n      deleteDbRequest.addEventListener(\"success\", () => resolve(true));\n      deleteDbRequest.addEventListener(\"blocked\", () => resolve(true));\n      deleteDbRequest.addEventListener(\"error\", () => reject(false));\n    });\n  }\n}\nexport { DatabaseStorage };","map":{"version":3,"names":["DatabaseStorage","dbName","DB_NAME","tableName","DB_TABLE_NAME","dbOpen","open","Promise","resolve","reject","openDB","addEventListener","e","event","target","result","createObjectStore","db","closeConnection","close","validateDbIsOpen"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\cache\\DatabaseStorage.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { DB_NAME, DB_TABLE_NAME, DB_VERSION } from \"../utils/BrowserConstants\";\nimport { IAsyncStorage } from \"./IAsyncMemoryStorage\";\n\ninterface IDBOpenDBRequestEvent extends Event {\n    target: IDBOpenDBRequest & EventTarget;\n}\n\ninterface IDBOpenOnUpgradeNeededEvent extends IDBVersionChangeEvent {\n    target: IDBOpenDBRequest & EventTarget;\n}\n\ninterface IDBRequestEvent extends Event {\n    target: IDBRequest & EventTarget;\n}\n\n/**\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\n */\nexport class DatabaseStorage<T> implements IAsyncStorage<T> {\n    private db: IDBDatabase | undefined;\n    private dbName: string;\n    private tableName: string;\n    private version: number;\n    private dbOpen: boolean;\n\n    constructor() {\n        this.dbName = DB_NAME;\n        this.version = DB_VERSION;\n        this.tableName = DB_TABLE_NAME;\n        this.dbOpen = false;\n    }\n\n    /**\n     * Opens IndexedDB instance.\n     */\n    async open(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const openDB = window.indexedDB.open(this.dbName, this.version);\n            openDB.addEventListener(\n                \"upgradeneeded\",\n                (e: IDBVersionChangeEvent) => {\n                    const event = e as IDBOpenOnUpgradeNeededEvent;\n                    event.target.result.createObjectStore(this.tableName);\n                }\n            );\n            openDB.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBOpenDBRequestEvent;\n                this.db = event.target.result;\n                this.dbOpen = true;\n                resolve();\n            });\n            openDB.addEventListener(\"error\", () =>\n                reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.databaseUnavailable\n                    )\n                )\n            );\n        });\n    }\n\n    /**\n     * Closes the connection to IndexedDB database when all pending transactions\n     * complete.\n     */\n    closeConnection(): void {\n        const db = this.db;\n        if (db && this.dbOpen) {\n            db.close();\n            this.dbOpen = false;\n        }\n    }\n\n    /**\n     * Opens database if it's not already open\n     */\n    private async validateDbIsOpen(): Promise<void> {\n        if (!this.dbOpen) {\n            return await this.open();\n        }\n    }\n\n    /**\n     * Retrieves item from IndexedDB instance.\n     * @param key\n     */\n    async getItem(key: string): Promise<T | null> {\n        await this.validateDbIsOpen();\n        return new Promise<T>((resolve, reject) => {\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.databaseNotOpen\n                    )\n                );\n            }\n            const transaction = this.db.transaction(\n                [this.tableName],\n                \"readonly\"\n            );\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGet = objectStore.get(key);\n\n            dbGet.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                this.closeConnection();\n                resolve(event.target.result);\n            });\n\n            dbGet.addEventListener(\"error\", (e: Event) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Adds item to IndexedDB under given key\n     * @param key\n     * @param payload\n     */\n    async setItem(key: string, payload: T): Promise<void> {\n        await this.validateDbIsOpen();\n        return new Promise<void>((resolve: Function, reject: Function) => {\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.databaseNotOpen\n                    )\n                );\n            }\n            const transaction = this.db.transaction(\n                [this.tableName],\n                \"readwrite\"\n            );\n\n            const objectStore = transaction.objectStore(this.tableName);\n\n            const dbPut = objectStore.put(payload, key);\n\n            dbPut.addEventListener(\"success\", () => {\n                this.closeConnection();\n                resolve();\n            });\n\n            dbPut.addEventListener(\"error\", (e) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Removes item from IndexedDB under given key\n     * @param key\n     */\n    async removeItem(key: string): Promise<void> {\n        await this.validateDbIsOpen();\n        return new Promise<void>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.databaseNotOpen\n                    )\n                );\n            }\n\n            const transaction = this.db.transaction(\n                [this.tableName],\n                \"readwrite\"\n            );\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbDelete = objectStore.delete(key);\n\n            dbDelete.addEventListener(\"success\", () => {\n                this.closeConnection();\n                resolve();\n            });\n\n            dbDelete.addEventListener(\"error\", (e) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Get all the keys from the storage object as an iterable array of strings.\n     */\n    async getKeys(): Promise<string[]> {\n        await this.validateDbIsOpen();\n        return new Promise<string[]>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.databaseNotOpen\n                    )\n                );\n            }\n\n            const transaction = this.db.transaction(\n                [this.tableName],\n                \"readonly\"\n            );\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGetKeys = objectStore.getAllKeys();\n\n            dbGetKeys.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                this.closeConnection();\n                resolve(event.target.result);\n            });\n\n            dbGetKeys.addEventListener(\"error\", (e: Event) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     *\n     * Checks whether there is an object under the search key in the object store\n     */\n    async containsKey(key: string): Promise<boolean> {\n        await this.validateDbIsOpen();\n\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\n            if (!this.db) {\n                return reject(\n                    createBrowserAuthError(\n                        BrowserAuthErrorCodes.databaseNotOpen\n                    )\n                );\n            }\n\n            const transaction = this.db.transaction(\n                [this.tableName],\n                \"readonly\"\n            );\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbContainsKey = objectStore.count(key);\n\n            dbContainsKey.addEventListener(\"success\", (e: Event) => {\n                const event = e as IDBRequestEvent;\n                this.closeConnection();\n                resolve(event.target.result === 1);\n            });\n\n            dbContainsKey.addEventListener(\"error\", (e: Event) => {\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\n     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\n     * with IndexedDB database versions.\n     */\n    async deleteDatabase(): Promise<boolean> {\n        // Check if database being deleted exists\n\n        if (this.db && this.dbOpen) {\n            this.closeConnection();\n        }\n\n        return new Promise<boolean>((resolve: Function, reject: Function) => {\n            const deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);\n            deleteDbRequest.addEventListener(\"success\", () => resolve(true));\n            deleteDbRequest.addEventListener(\"blocked\", () => resolve(true));\n            deleteDbRequest.addEventListener(\"error\", () => reject(false));\n        });\n    }\n}\n"],"mappings":";;;;;;;AAUA;AAcA;;AAEG;;;;AAMQ,MAAAA,eAAiB;;IASxB,KAAAC,MAAA,GAAAC,OAAA;;IAEG,KAAAC,SAAA,GAAAC,aAAA;IACO,IAAI,CAAAC,MAAO,GAAC,KAAK;EA0B3B;;;AAGG;EACH,MAAAC,KAAA;IAQA,WAAAC,OAAA,EAAAC,OAAA,EAAAC,MAAA;;MAEGC,MAAA,CAAAC,gBAAA,kBAAAC,CAAA;QAC2B,MAAAC,KAAA,GAAAD,CAAA;QAM9BC,KAAA,CAAAC,MAAA,CAAAC,MAAA,CAAAC,iBAAA,MAAAb,SAAA;;;QAGG,MAAAU,KAAA,GAAAD,CAAA;QACc,IAAQ,CAAAK,EAAA,GAAGJ,KAAA,CAAAC,MAAY,CAAAC,MAAK;QA+B7C,KAAAV,MAAA;;;;IAIG;EACG;EAgCN;;;AAGG;EACGa,eAAgBA,CAAA;IA8BtB,MAAAD,EAAA,QAAAA,EAAA;;MAEGA,EAAA,CAAAE,KAAA;MACc,KAAAd,MAAQ,QAAQ;IA+BjC;;;AAGG;;EAiCH,MAAAe,iBAAA;;;;EAIG;EACG;AAcT"},"metadata":{},"sourceType":"module","externalDependencies":[]}