{"ast":null,"code":"/*! @azure/msal-react v2.0.11 2024-02-07 */\n'use strict';\n\nimport { useState, useEffect } from 'react';\nimport { AccountEntity } from '@azure/msal-browser';\nimport { useMsal } from './useMsal.js';\nimport { getAccountByIdentifiers } from '../utils/utilities.js';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nfunction getAccount(instance, accountIdentifiers) {\n  if (!accountIdentifiers || !accountIdentifiers.homeAccountId && !accountIdentifiers.localAccountId && !accountIdentifiers.username) {\n    // If no account identifiers are provided, return active account\n    return instance.getActiveAccount();\n  }\n  return getAccountByIdentifiers(instance.getAllAccounts(), accountIdentifiers);\n}\n/**\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\n * @param accountIdentifiers\n */\nfunction useAccount(accountIdentifiers) {\n  const {\n    instance,\n    inProgress,\n    logger\n  } = useMsal();\n  const [account, setAccount] = useState(() => getAccount(instance, accountIdentifiers));\n  useEffect(() => {\n    setAccount(currentAccount => {\n      const nextAccount = getAccount(instance, accountIdentifiers);\n      if (!AccountEntity.accountInfoIsEqual(currentAccount, nextAccount, true)) {\n        logger.info(\"useAccount - Updating account\");\n        return nextAccount;\n      }\n      return currentAccount;\n    });\n  }, [inProgress, accountIdentifiers, instance, logger]);\n  return account;\n}\nexport { useAccount };","map":{"version":3,"names":["getAccount","instance","accountIdentifiers","homeAccountId","localAccountId","username","getActiveAccount","getAccountByIdentifiers","getAllAccounts","useAccount","inProgress","logger","useMsal","account","setAccount","useState","useEffect","currentAccount","nextAccount","AccountEntity","accountInfoIsEqual","info"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-react\\src\\hooks\\useAccount.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useState, useEffect } from \"react\";\nimport {\n    AccountInfo,\n    IPublicClientApplication,\n    AccountEntity,\n} from \"@azure/msal-browser\";\nimport { useMsal } from \"./useMsal\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { getAccountByIdentifiers } from \"../utils/utilities\";\n\nfunction getAccount(\n    instance: IPublicClientApplication,\n    accountIdentifiers?: AccountIdentifiers\n): AccountInfo | null {\n    if (\n        !accountIdentifiers ||\n        (!accountIdentifiers.homeAccountId &&\n            !accountIdentifiers.localAccountId &&\n            !accountIdentifiers.username)\n    ) {\n        // If no account identifiers are provided, return active account\n        return instance.getActiveAccount();\n    }\n\n    return getAccountByIdentifiers(\n        instance.getAllAccounts(),\n        accountIdentifiers\n    );\n}\n\n/**\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\n * @param accountIdentifiers\n */\nexport function useAccount(\n    accountIdentifiers?: AccountIdentifiers\n): AccountInfo | null {\n    const { instance, inProgress, logger } = useMsal();\n\n    const [account, setAccount] = useState<AccountInfo | null>(() =>\n        getAccount(instance, accountIdentifiers)\n    );\n\n    useEffect(() => {\n        setAccount((currentAccount: AccountInfo | null) => {\n            const nextAccount = getAccount(instance, accountIdentifiers);\n            if (\n                !AccountEntity.accountInfoIsEqual(\n                    currentAccount,\n                    nextAccount,\n                    true\n                )\n            ) {\n                logger.info(\"useAccount - Updating account\");\n                return nextAccount;\n            }\n\n            return currentAccount;\n        });\n    }, [inProgress, accountIdentifiers, instance, logger]);\n\n    return account;\n}\n"],"mappings":";;;;;;;;AAAA;;;AAGG;AAYH,SAASA,UAAUA,CACfC,QAAkC,EAClCC,kBAAuC;EAEvC,IACI,CAACA,kBAAkB,IAClB,CAACA,kBAAkB,CAACC,aAAa,IAC9B,CAACD,kBAAkB,CAACE,cAAc,IAClC,CAACF,kBAAkB,CAACG,QAAS,EACnC;;IAEE,OAAOJ,QAAQ,CAACK,gBAAgB,EAAE;EACrC;EAED,OAAOC,uBAAuB,CAC1BN,QAAQ,CAACO,cAAc,EAAE,EACzBN,kBAAkB,CACrB;AACL;AAEA;;;AAGG;AACG,SAAUO,UAAUA,CACtBP,kBAAuC;EAEvC,MAAM;IAAED,QAAQ;IAAES,UAAU;IAAEC;EAAM,CAAE,GAAGC,OAAO,EAAE;EAElD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAqB,MACvDf,UAAU,CAACC,QAAQ,EAAEC,kBAAkB,CAAC,CAC3C;EAEDc,SAAS,CAAC,MAAK;IACXF,UAAU,CAAEG,cAAkC,IAAI;MAC9C,MAAMC,WAAW,GAAGlB,UAAU,CAACC,QAAQ,EAAEC,kBAAkB,CAAC;MAC5D,IACI,CAACiB,aAAa,CAACC,kBAAkB,CAC7BH,cAAc,EACdC,WAAW,EACX,IAAI,CACP,EACH;QACEP,MAAM,CAACU,IAAI,CAAC,+BAA+B,CAAC;QAC5C,OAAOH,WAAW;MACrB;MAED,OAAOD,cAAc;IACzB,CAAC,CAAC;GACL,EAAE,CAACP,UAAU,EAAER,kBAAkB,EAAED,QAAQ,EAAEU,MAAM,CAAC,CAAC;EAEtD,OAAOE,OAAO;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}