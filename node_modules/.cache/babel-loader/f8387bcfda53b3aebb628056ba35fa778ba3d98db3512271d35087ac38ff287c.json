{"ast":null,"code":"/*! @azure/msal-react v2.0.3 2023-09-05 */\n'use strict';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nfunction getChildrenOrFunction(children, args) {\n  if (typeof children === \"function\") {\n    return children(args);\n  }\n  return children;\n}\n/**\n * Helper function to determine whether 2 arrays are equal\n * Used to avoid unnecessary state updates\n * @param arrayA\n * @param arrayB\n */\nfunction accountArraysAreEqual(arrayA, arrayB) {\n  if (arrayA.length !== arrayB.length) {\n    return false;\n  }\n  const comparisonArray = [...arrayB];\n  return arrayA.every(elementA => {\n    const elementB = comparisonArray.shift();\n    if (!elementA || !elementB) {\n      return false;\n    }\n    return elementA.homeAccountId === elementB.homeAccountId && elementA.localAccountId === elementB.localAccountId && elementA.username === elementB.username;\n  });\n}\nfunction getAccountByIdentifiers(allAccounts, accountIdentifiers) {\n  if (allAccounts.length > 0 && (accountIdentifiers.homeAccountId || accountIdentifiers.localAccountId || accountIdentifiers.username)) {\n    const matchedAccounts = allAccounts.filter(accountObj => {\n      if (accountIdentifiers.username && accountIdentifiers.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n        return false;\n      }\n      if (accountIdentifiers.homeAccountId && accountIdentifiers.homeAccountId.toLowerCase() !== accountObj.homeAccountId.toLowerCase()) {\n        return false;\n      }\n      if (accountIdentifiers.localAccountId && accountIdentifiers.localAccountId.toLowerCase() !== accountObj.localAccountId.toLowerCase()) {\n        return false;\n      }\n      return true;\n    });\n    return matchedAccounts[0] || null;\n  } else {\n    return null;\n  }\n}\nexport { accountArraysAreEqual, getAccountByIdentifiers, getChildrenOrFunction };","map":{"version":3,"names":["getChildrenOrFunction","children","args","accountArraysAreEqual","arrayA","arrayB","length","comparisonArray","every","elementA","elementB","shift","homeAccountId","localAccountId","username","getAccountByIdentifiers","allAccounts","accountIdentifiers","matchedAccounts","filter","accountObj","toLowerCase"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-react\\src\\utils\\utilities.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nexport function getChildrenOrFunction(children, args) {\n    if (typeof children === \"function\") {\n        return children(args);\n    }\n    return children;\n}\n/**\n * Helper function to determine whether 2 arrays are equal\n * Used to avoid unnecessary state updates\n * @param arrayA\n * @param arrayB\n */\nexport function accountArraysAreEqual(arrayA, arrayB) {\n    if (arrayA.length !== arrayB.length) {\n        return false;\n    }\n    const comparisonArray = [...arrayB];\n    return arrayA.every((elementA) => {\n        const elementB = comparisonArray.shift();\n        if (!elementA || !elementB) {\n            return false;\n        }\n        return (elementA.homeAccountId === elementB.homeAccountId &&\n            elementA.localAccountId === elementB.localAccountId &&\n            elementA.username === elementB.username);\n    });\n}\nexport function getAccountByIdentifiers(allAccounts, accountIdentifiers) {\n    if (allAccounts.length > 0 &&\n        (accountIdentifiers.homeAccountId ||\n            accountIdentifiers.localAccountId ||\n            accountIdentifiers.username)) {\n        const matchedAccounts = allAccounts.filter((accountObj) => {\n            if (accountIdentifiers.username &&\n                accountIdentifiers.username.toLowerCase() !==\n                    accountObj.username.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.homeAccountId &&\n                accountIdentifiers.homeAccountId.toLowerCase() !==\n                    accountObj.homeAccountId.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.localAccountId &&\n                accountIdentifiers.localAccountId.toLowerCase() !==\n                    accountObj.localAccountId.toLowerCase()) {\n                return false;\n            }\n            return true;\n        });\n        return matchedAccounts[0] || null;\n    }\n    else {\n        return null;\n    }\n}\n//# sourceMappingURL=utilities.js.map"],"mappings":";;;AAAA;AACA;AACA;AACA;AACO,SAASA,qBAAqBA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EAClD,IAAI,OAAOD,QAAQ,KAAK,UAAU,EAAE;IAChC,OAAOA,QAAQ,CAACC,IAAI,CAAC;EAC7B;EACI,OAAOD,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,qBAAqBA,CAACC,MAAM,EAAEC,MAAM,EAAE;EAClD,IAAID,MAAM,CAACE,MAAM,KAAKD,MAAM,CAACC,MAAM,EAAE;IACjC,OAAO,KAAK;EACpB;EACI,MAAMC,eAAe,GAAG,CAAC,GAAGF,MAAM,CAAC;EACnC,OAAOD,MAAM,CAACI,KAAK,CAAEC,QAAQ,IAAK;IAC9B,MAAMC,QAAQ,GAAGH,eAAe,CAACI,KAAK,EAAE;IACxC,IAAI,CAACF,QAAQ,IAAI,CAACC,QAAQ,EAAE;MACxB,OAAO,KAAK;IACxB;IACQ,OAAQD,QAAQ,CAACG,aAAa,KAAKF,QAAQ,CAACE,aAAa,IACrDH,QAAQ,CAACI,cAAc,KAAKH,QAAQ,CAACG,cAAc,IACnDJ,QAAQ,CAACK,QAAQ,KAAKJ,QAAQ,CAACI,QAAQ;EACnD,CAAK,CAAC;AACN;AACO,SAASC,uBAAuBA,CAACC,WAAW,EAAEC,kBAAkB,EAAE;EACrE,IAAID,WAAW,CAACV,MAAM,GAAG,CAAC,KACrBW,kBAAkB,CAACL,aAAa,IAC7BK,kBAAkB,CAACJ,cAAc,IACjCI,kBAAkB,CAACH,QAAQ,CAAC,EAAE;IAClC,MAAMI,eAAe,GAAGF,WAAW,CAACG,MAAM,CAAEC,UAAU,IAAK;MACvD,IAAIH,kBAAkB,CAACH,QAAQ,IAC3BG,kBAAkB,CAACH,QAAQ,CAACO,WAAW,EAAE,KACrCD,UAAU,CAACN,QAAQ,CAACO,WAAW,EAAE,EAAE;QACvC,OAAO,KAAK;MAC5B;MACY,IAAIJ,kBAAkB,CAACL,aAAa,IAChCK,kBAAkB,CAACL,aAAa,CAACS,WAAW,EAAE,KAC1CD,UAAU,CAACR,aAAa,CAACS,WAAW,EAAE,EAAE;QAC5C,OAAO,KAAK;MAC5B;MACY,IAAIJ,kBAAkB,CAACJ,cAAc,IACjCI,kBAAkB,CAACJ,cAAc,CAACQ,WAAW,EAAE,KAC3CD,UAAU,CAACP,cAAc,CAACQ,WAAW,EAAE,EAAE;QAC7C,OAAO,KAAK;MAC5B;MACY,OAAO,IAAI;IACvB,CAAS,CAAC;IACF,OAAOH,eAAe,CAAC,CAAC,CAAC,IAAI,IAAI;EACzC,CAAK,MACI;IACD,OAAO,IAAI;EACnB;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}