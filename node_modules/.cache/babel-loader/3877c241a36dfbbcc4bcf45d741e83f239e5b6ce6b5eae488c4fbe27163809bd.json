{"ast":null,"code":"/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { tokenParsingError, nullOrEmptyToken, maxAgeTranspired } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Extract token by decoding the rawToken\n *\n * @param encodedToken\n */\nfunction extractTokenClaims(encodedToken, base64Decode) {\n  const jswPayload = getJWSPayload(encodedToken);\n  // token will be decoded to get the username\n  try {\n    // base64Decode() should throw an error if there is an issue\n    const base64Decoded = base64Decode(jswPayload);\n    return JSON.parse(base64Decoded);\n  } catch (err) {\n    throw createClientAuthError(tokenParsingError);\n  }\n}\n/**\n * decode a JWT\n *\n * @param authToken\n */\nfunction getJWSPayload(authToken) {\n  if (!authToken) {\n    throw createClientAuthError(nullOrEmptyToken);\n  }\n  const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n  const matches = tokenPartsRegex.exec(authToken);\n  if (!matches || matches.length < 4) {\n    throw createClientAuthError(tokenParsingError);\n  }\n  /**\n   * const crackedToken = {\n   *  header: matches[1],\n   *  JWSPayload: matches[2],\n   *  JWSSig: matches[3],\n   * };\n   */\n  return matches[2];\n}\n/**\n * Determine if the token's max_age has transpired\n */\nfunction checkMaxAge(authTime, maxAge) {\n  /*\n   * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n   * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\n   * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\n   */\n  const fiveMinuteSkew = 300000; // five minutes in milliseconds\n  if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n    throw createClientAuthError(maxAgeTranspired);\n  }\n}\nexport { checkMaxAge, extractTokenClaims, getJWSPayload };","map":{"version":3,"names":["jswPayload","getJWSPayload","encodedToken","base64Decoded","base64Decode","JSON","parse"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\account\\AuthToken.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenClaims } from \"./TokenClaims\";\nimport {\n    createClientAuthError,\n    ClientAuthErrorCodes,\n} from \"../error/ClientAuthError\";\n\n/**\n * Extract token by decoding the rawToken\n *\n * @param encodedToken\n */\nexport function extractTokenClaims(\n    encodedToken: string,\n    base64Decode: (input: string) => string\n): TokenClaims {\n    const jswPayload = getJWSPayload(encodedToken);\n\n    // token will be decoded to get the username\n    try {\n        // base64Decode() should throw an error if there is an issue\n        const base64Decoded = base64Decode(jswPayload);\n        return JSON.parse(base64Decoded) as TokenClaims;\n    } catch (err) {\n        throw createClientAuthError(ClientAuthErrorCodes.tokenParsingError);\n    }\n}\n\n/**\n * decode a JWT\n *\n * @param authToken\n */\nexport function getJWSPayload(authToken: string): string {\n    if (!authToken) {\n        throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n    }\n    const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    const matches = tokenPartsRegex.exec(authToken);\n    if (!matches || matches.length < 4) {\n        throw createClientAuthError(ClientAuthErrorCodes.tokenParsingError);\n    }\n    /**\n     * const crackedToken = {\n     *  header: matches[1],\n     *  JWSPayload: matches[2],\n     *  JWSSig: matches[3],\n     * };\n     */\n\n    return matches[2];\n}\n\n/**\n * Determine if the token's max_age has transpired\n */\nexport function checkMaxAge(authTime: number, maxAge: number): void {\n    /*\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\n     */\n    const fiveMinuteSkew = 300000; // five minutes in milliseconds\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n        throw createClientAuthError(ClientAuthErrorCodes.maxAgeTranspired);\n    }\n}\n"],"mappings":";;;;;;AAKA;AAMA;;;AAIG;AACH;AAgBA;;;;EAIG,MAAAA,UAAA,GAAAC,aAAA,CAAAC,YAAA;EACH;EAoBA;;IAEG,MAAAC,aAAA,GAAAC,YAAA,CAAAJ,UAAA;IACa,OAAAK,IAAA,CAAAC,KAAA,CAAAH,aAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}