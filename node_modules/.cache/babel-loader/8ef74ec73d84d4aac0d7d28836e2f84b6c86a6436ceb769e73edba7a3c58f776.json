{"ast":null,"code":"/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n\nimport { TimeUtils } from '../utils/TimeUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst KeyLocation = {\n  SW: \"sw\",\n  UHW: \"uhw\"\n};\n/** @internal */\nclass PopTokenGenerator {\n  constructor(cryptoUtils, performanceClient) {\n    this.cryptoUtils = cryptoUtils;\n    this.performanceClient = performanceClient;\n  }\n  /**\n   * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\n   * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\n   * @param request\n   * @returns\n   */\n  async generateCnf(request, logger) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n    const reqCnf = await invokeAsync(this.generateKid.bind(this), PerformanceEvents.PopTokenGenerateCnf, logger, this.performanceClient, request.correlationId)(request);\n    const reqCnfString = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\n    return {\n      kid: reqCnf.kid,\n      reqCnfString,\n      reqCnfHash: await this.cryptoUtils.hashString(reqCnfString)\n    };\n  }\n  /**\n   * Generates key_id for a SHR token request\n   * @param request\n   * @returns\n   */\n  async generateKid(request) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n    const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\n    return {\n      kid: kidThumbprint,\n      xms_ksl: KeyLocation.SW\n    };\n  }\n  /**\n   * Signs the POP access_token with the local generated key-pair\n   * @param accessToken\n   * @param request\n   * @returns\n   */\n  async signPopToken(accessToken, keyId, request) {\n    return this.signPayload(accessToken, keyId, request);\n  }\n  /**\n   * Utility function to generate the signed JWT for an access_token\n   * @param payload\n   * @param kid\n   * @param request\n   * @param claims\n   * @returns\n   */\n  async signPayload(payload, keyId, request, claims) {\n    // Deconstruct request to extract SHR parameters\n    const {\n      resourceRequestMethod,\n      resourceRequestUri,\n      shrClaims,\n      shrNonce,\n      shrOptions\n    } = request;\n    const resourceUrlString = resourceRequestUri ? new UrlString(resourceRequestUri) : undefined;\n    const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n    return await this.cryptoUtils.signJwt({\n      at: payload,\n      ts: TimeUtils.nowSeconds(),\n      m: resourceRequestMethod?.toUpperCase(),\n      u: resourceUrlComponents?.HostNameAndPort,\n      nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n      p: resourceUrlComponents?.AbsolutePath,\n      q: resourceUrlComponents?.QueryString ? [[], resourceUrlComponents.QueryString] : undefined,\n      client_claims: shrClaims || undefined,\n      ...claims\n    }, keyId, shrOptions, request.correlationId);\n  }\n}\nexport { PopTokenGenerator };","map":{"version":3,"names":["SW","UHW","PopTokenGenerator","constructor","cryptoUtils","performanceClient","generateCnf","request","logger","addQueueMeasurement","PerformanceEvents","PopTokenGenerateCnf","correlationId","reqCnf","invokeAsync","generateKid","bind","reqCnfString","base64Encode","JSON","stringify","kid","PopTokenGenerateKid","kidThumbprint","getPublicKeyThumbprint"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\crypto\\PopTokenGenerator.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, SignedHttpRequestParameters } from \"./ICrypto\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\nimport { invokeAsync } from \"../utils/FunctionWrappers\";\nimport { Logger } from \"../logger/Logger\";\n\n/**\n * See eSTS docs for more info.\n * - A kid element, with the value containing an RFC 7638-compliant JWK thumbprint that is base64 encoded.\n * -  xms_ksl element, representing the storage location of the key's secret component on the client device. One of two values:\n *      - sw: software storage\n *      - uhw: hardware storage\n */\ntype ReqCnf = {\n    kid: string;\n    xms_ksl: KeyLocation;\n};\n\nexport type ReqCnfData = {\n    kid: string;\n    reqCnfString: string;\n    reqCnfHash: string;\n};\n\nconst KeyLocation = {\n    SW: \"sw\",\n    UHW: \"uhw\",\n} as const;\nexport type KeyLocation = (typeof KeyLocation)[keyof typeof KeyLocation];\n\n/** @internal */\nexport class PopTokenGenerator {\n    private cryptoUtils: ICrypto;\n    private performanceClient?: IPerformanceClient;\n\n    constructor(cryptoUtils: ICrypto, performanceClient?: IPerformanceClient) {\n        this.cryptoUtils = cryptoUtils;\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\n     * @param request\n     * @returns\n     */\n    async generateCnf(\n        request: SignedHttpRequestParameters,\n        logger: Logger\n    ): Promise<ReqCnfData> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.PopTokenGenerateCnf,\n            request.correlationId\n        );\n\n        const reqCnf = await invokeAsync(\n            this.generateKid.bind(this),\n            PerformanceEvents.PopTokenGenerateCnf,\n            logger,\n            this.performanceClient,\n            request.correlationId\n        )(request);\n        const reqCnfString: string = this.cryptoUtils.base64Encode(\n            JSON.stringify(reqCnf)\n        );\n\n        return {\n            kid: reqCnf.kid,\n            reqCnfString,\n            reqCnfHash: await this.cryptoUtils.hashString(reqCnfString),\n        };\n    }\n\n    /**\n     * Generates key_id for a SHR token request\n     * @param request\n     * @returns\n     */\n    async generateKid(request: SignedHttpRequestParameters): Promise<ReqCnf> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.PopTokenGenerateKid,\n            request.correlationId\n        );\n\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(\n            request\n        );\n\n        return {\n            kid: kidThumbprint,\n            xms_ksl: KeyLocation.SW,\n        };\n    }\n\n    /**\n     * Signs the POP access_token with the local generated key-pair\n     * @param accessToken\n     * @param request\n     * @returns\n     */\n    async signPopToken(\n        accessToken: string,\n        keyId: string,\n        request: SignedHttpRequestParameters\n    ): Promise<string> {\n        return this.signPayload(accessToken, keyId, request);\n    }\n\n    /**\n     * Utility function to generate the signed JWT for an access_token\n     * @param payload\n     * @param kid\n     * @param request\n     * @param claims\n     * @returns\n     */\n    async signPayload(\n        payload: string,\n        keyId: string,\n        request: SignedHttpRequestParameters,\n        claims?: object\n    ): Promise<string> {\n        // Deconstruct request to extract SHR parameters\n        const {\n            resourceRequestMethod,\n            resourceRequestUri,\n            shrClaims,\n            shrNonce,\n            shrOptions,\n        } = request;\n\n        const resourceUrlString = resourceRequestUri\n            ? new UrlString(resourceRequestUri)\n            : undefined;\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n        return await this.cryptoUtils.signJwt(\n            {\n                at: payload,\n                ts: TimeUtils.nowSeconds(),\n                m: resourceRequestMethod?.toUpperCase(),\n                u: resourceUrlComponents?.HostNameAndPort,\n                nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n                p: resourceUrlComponents?.AbsolutePath,\n                q: resourceUrlComponents?.QueryString\n                    ? [[], resourceUrlComponents.QueryString]\n                    : undefined,\n                client_claims: shrClaims || undefined,\n                ...claims,\n            },\n            keyId,\n            shrOptions,\n            request.correlationId\n        );\n    }\n}\n"],"mappings":";;;;;;;;AAKA;AAGA;AAGA;AAEA;;EAMGA,EAAA;EACHC,GAAA;;;AAGE,MAAAC,iBAAA;EAEIC,YAAAC,WAAmB,EAAAC,iBAAA;IAClB,KAAAD,WAAS,GAAAA,WAAA;IACA,KAAAC,iBAAS,GAAAA,iBAAA;;;AAIzB;;;;AAIA;EAEgB,MAAAC,YAAAC,OAAA,EAAAC,MAAA;IAChB,KAAAH,iBAA8B,EAAAI,mBAAA,CAAAC,iBAAA,CAAAC,mBAAA,EAAAJ,OAAA,CAAAK,aAAA;IACnB,MAAAC,MAAA,GAAY,MAAUC,WAAA,MAAAC,WAAA,CAAAC,IAAA,QAAAN,iBAAA,CAAAC,mBAAA,EAAAH,MAAA,OAAAH,iBAAA,EAAAE,OAAA,CAAAK,aAAA,EAAAL,OAAA;IACtB,MAAkBU,YAAA,OAAsB,CAAAb,WAAA,CAAAc,YAAA,CAAAC,IAAA,CAAAC,SAAA,CAAAP,MAAA;IAEnC;MAKZQ,GAAA,EAAAR,MAAA,CAAAQ,GAAA;;;;;EAKG;AACG;AA2BN;;;;IAIG,KAAAhB,iBAAA,EAAAI,mBAAA,CAAAC,iBAAA,CAAAY,mBAAA,EAAAf,OAAA,CAAAK,aAAA;IACc,MAAAW,aAAU,cAAAnB,WAA2B,CAAAoB,sBAAkB,CAAAjB,OAAA;IAgBxE;;;;;EAKG;AACG;AAQN;;;;;;;EAOG;;AAuCN"},"metadata":{},"sourceType":"module","externalDependencies":[]}