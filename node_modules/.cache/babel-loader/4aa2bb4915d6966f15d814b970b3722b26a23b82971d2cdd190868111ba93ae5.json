{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { updateData } from \"./uploadSlice\";\nconst initialState = [];\nconst serversSlice = createSlice({\n  name: \"serversSlice\",\n  initialState,\n  reducers: {\n    addServer1: (state, action) => {\n      console.log(\"Actions\", action);\n    },\n    editServer: (state, action) => {},\n    deleteServer: (state, action) => {},\n    deleteAllServers: (state, action) => {}\n  }\n});\nexport const addServer = createAsyncThunk(\"servers/addServer\", async (newServer, {\n  getState,\n  dispatch\n}) => {\n  // Access the state using getState()\n  const currentState = getState();\n  const updatedServers = [...currentState.upload.value.servers, newServer];\n  // Update the 'servers' array in the uploadSlice\n  dispatch(updateData({\n    key: \"servers\",\n    value: updatedServers\n  }));\n});","map":{"version":3,"names":["createAsyncThunk","createSlice","updateData","initialState","serversSlice","name","reducers","addServer1","state","action","console","log","editServer","deleteServer","deleteAllServers","addServer","newServer","getState","dispatch","currentState","updatedServers","upload","value","servers","key"],"sources":["D:/react-typescript/intelli-gui/src/store/reducers/serversSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, current } from \"@reduxjs/toolkit\";\r\nimport { ServerData } from \"../../utils/constant/types\";\r\nimport { RootState } from \"../store\";\r\nimport { updateData } from \"./uploadSlice\";\r\n\r\nconst initialState: ServerData[] = [];\r\n\r\nconst serversSlice = createSlice({\r\n  name: \"serversSlice\",\r\n  initialState,\r\n  reducers: {\r\n    addServer1: (state, action) => {\r\n      console.log(\"Actions\", action);\r\n    },\r\n    editServer: (state, action) => {},\r\n    deleteServer: (state, action) => {},\r\n    deleteAllServers: (state, action) => {},\r\n  },\r\n});\r\n\r\nexport const addServer = createAsyncThunk(\r\n  \"servers/addServer\",\r\n  async (newServer: ServerData, { getState, dispatch }) => {\r\n    // Access the state using getState()\r\n    const currentState = getState() as RootState;\r\n    const updatedServers = [...currentState.upload.value.servers, newServer];\r\n    // Update the 'servers' array in the uploadSlice\r\n    dispatch(updateData({ key: \"servers\", value: updatedServers }));\r\n  }\r\n);\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAiB,kBAAkB;AAGzE,SAASC,UAAU,QAAQ,eAAe;AAE1C,MAAMC,YAA0B,GAAG,EAAE;AAErC,MAAMC,YAAY,GAAGH,WAAW,CAAC;EAC/BI,IAAI,EAAE,cAAc;EACpBF,YAAY;EACZG,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7BC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,MAAM,CAAC;IAChC,CAAC;IACDG,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK,CAAC,CAAC;IACjCI,YAAY,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK,CAAC,CAAC;IACnCK,gBAAgB,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK,CAAC;EACxC;AACF,CAAC,CAAC;AAEF,OAAO,MAAMM,SAAS,GAAGf,gBAAgB,CACvC,mBAAmB,EACnB,OAAOgB,SAAqB,EAAE;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EACvD;EACA,MAAMC,YAAY,GAAGF,QAAQ,CAAC,CAAc;EAC5C,MAAMG,cAAc,GAAG,CAAC,GAAGD,YAAY,CAACE,MAAM,CAACC,KAAK,CAACC,OAAO,EAAEP,SAAS,CAAC;EACxE;EACAE,QAAQ,CAAChB,UAAU,CAAC;IAAEsB,GAAG,EAAE,SAAS;IAAEF,KAAK,EAAEF;EAAe,CAAC,CAAC,CAAC;AACjE,CACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}