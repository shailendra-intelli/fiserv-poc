{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { BrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst stubbedPublicClientApplication = {\n  initialize: () => {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  acquireTokenPopup: () => {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  acquireTokenRedirect: () => {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  acquireTokenSilent: () => {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  acquireTokenByCode: () => {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  getAllAccounts: () => {\n    return [];\n  },\n  getAccountByHomeId: () => {\n    return null;\n  },\n  getAccountByUsername: () => {\n    return null;\n  },\n  getAccountByLocalId: () => {\n    return null;\n  },\n  handleRedirectPromise: () => {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  loginPopup: () => {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  loginRedirect: () => {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  logout: () => {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  logoutRedirect: () => {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  logoutPopup: () => {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  ssoSilent: () => {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  addEventCallback: () => {\n    return null;\n  },\n  removeEventCallback: () => {\n    return;\n  },\n  addPerformanceCallback: () => {\n    return \"\";\n  },\n  removePerformanceCallback: () => {\n    return false;\n  },\n  enableAccountStorageEvents: () => {\n    return;\n  },\n  disableAccountStorageEvents: () => {\n    return;\n  },\n  getTokenCache: () => {\n    throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();\n  },\n  getLogger: () => {\n    throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();\n  },\n  setLogger: () => {\n    return;\n  },\n  setActiveAccount: () => {\n    return;\n  },\n  getActiveAccount: () => {\n    return null;\n  },\n  initializeWrapperLibrary: () => {\n    return;\n  },\n  setNavigationClient: () => {\n    return;\n  },\n  getConfiguration: () => {\n    throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();\n  },\n  hydrateCache: () => {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  },\n  clearCache: () => {\n    return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());\n  }\n};\nexport { stubbedPublicClientApplication };","map":{"version":3,"names":["stubbedPublicClientApplication","initialize","Promise","reject","BrowserConfigurationAuthError","createStubPcaInstanceCalledError","acquireTokenPopup","acquireTokenRedirect","acquireTokenSilent","acquireTokenByCode","getAllAccounts","getAccountByHomeId","getAccountByUsername","getAccountByLocalId","handleRedirectPromise","loginPopup","loginRedirect","logout","logoutRedirect","logoutPopup"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\app\\IPublicClientApplication.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    AccountInfo,\n    Logger,\n    PerformanceCallbackFunction,\n} from \"@azure/msal-common\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { BrowserConfigurationAuthError } from \"../error/BrowserConfigurationAuthError\";\nimport { WrapperSKU } from \"../utils/BrowserConstants\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { EventCallbackFunction } from \"../event/EventMessage\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\n\nexport interface IPublicClientApplication {\n    initialize(): Promise<void>;\n    acquireTokenPopup(request: PopupRequest): Promise<AuthenticationResult>;\n    acquireTokenRedirect(request: RedirectRequest): Promise<void>;\n    acquireTokenSilent(\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult>;\n    acquireTokenByCode(\n        request: AuthorizationCodeRequest\n    ): Promise<AuthenticationResult>;\n    addEventCallback(callback: EventCallbackFunction): string | null;\n    removeEventCallback(callbackId: string): void;\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string;\n    removePerformanceCallback(callbackId: string): boolean;\n    enableAccountStorageEvents(): void;\n    disableAccountStorageEvents(): void;\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null;\n    getAccountByLocalId(localId: string): AccountInfo | null;\n    getAccountByUsername(userName: string): AccountInfo | null;\n    getAllAccounts(): AccountInfo[];\n    handleRedirectPromise(hash?: string): Promise<AuthenticationResult | null>;\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult>;\n    loginRedirect(request?: RedirectRequest): Promise<void>;\n    logout(logoutRequest?: EndSessionRequest): Promise<void>;\n    logoutRedirect(logoutRequest?: EndSessionRequest): Promise<void>;\n    logoutPopup(logoutRequest?: EndSessionPopupRequest): Promise<void>;\n    ssoSilent(request: SsoSilentRequest): Promise<AuthenticationResult>;\n    getTokenCache(): ITokenCache;\n    getLogger(): Logger;\n    setLogger(logger: Logger): void;\n    setActiveAccount(account: AccountInfo | null): void;\n    getActiveAccount(): AccountInfo | null;\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void;\n    setNavigationClient(navigationClient: INavigationClient): void;\n    /** @internal */\n    getConfiguration(): BrowserConfiguration;\n    hydrateCache(\n        result: AuthenticationResult,\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void>;\n    clearCache(logoutRequest?: ClearCacheRequest): Promise<void>;\n}\n\nexport const stubbedPublicClientApplication: IPublicClientApplication = {\n    initialize: () => {\n        return Promise.reject(\n            BrowserConfigurationAuthError.createStubPcaInstanceCalledError()\n        );\n    },\n    acquireTokenPopup: () => {\n        return Promise.reject(\n            BrowserConfigurationAuthError.createStubPcaInstanceCalledError()\n        );\n    },\n    acquireTokenRedirect: () => {\n        return Promise.reject(\n            BrowserConfigurationAuthError.createStubPcaInstanceCalledError()\n        );\n    },\n    acquireTokenSilent: () => {\n        return Promise.reject(\n            BrowserConfigurationAuthError.createStubPcaInstanceCalledError()\n        );\n    },\n    acquireTokenByCode: () => {\n        return Promise.reject(\n            BrowserConfigurationAuthError.createStubPcaInstanceCalledError()\n        );\n    },\n    getAllAccounts: () => {\n        return [];\n    },\n    getAccountByHomeId: () => {\n        return null;\n    },\n    getAccountByUsername: () => {\n        return null;\n    },\n    getAccountByLocalId: () => {\n        return null;\n    },\n    handleRedirectPromise: () => {\n        return Promise.reject(\n            BrowserConfigurationAuthError.createStubPcaInstanceCalledError()\n        );\n    },\n    loginPopup: () => {\n        return Promise.reject(\n            BrowserConfigurationAuthError.createStubPcaInstanceCalledError()\n        );\n    },\n    loginRedirect: () => {\n        return Promise.reject(\n            BrowserConfigurationAuthError.createStubPcaInstanceCalledError()\n        );\n    },\n    logout: () => {\n        return Promise.reject(\n            BrowserConfigurationAuthError.createStubPcaInstanceCalledError()\n        );\n    },\n    logoutRedirect: () => {\n        return Promise.reject(\n            BrowserConfigurationAuthError.createStubPcaInstanceCalledError()\n        );\n    },\n    logoutPopup: () => {\n        return Promise.reject(\n            BrowserConfigurationAuthError.createStubPcaInstanceCalledError()\n        );\n    },\n    ssoSilent: () => {\n        return Promise.reject(\n            BrowserConfigurationAuthError.createStubPcaInstanceCalledError()\n        );\n    },\n    addEventCallback: () => {\n        return null;\n    },\n    removeEventCallback: () => {\n        return;\n    },\n    addPerformanceCallback: () => {\n        return \"\";\n    },\n    removePerformanceCallback: () => {\n        return false;\n    },\n    enableAccountStorageEvents: () => {\n        return;\n    },\n    disableAccountStorageEvents: () => {\n        return;\n    },\n    getTokenCache: () => {\n        throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();\n    },\n    getLogger: () => {\n        throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();\n    },\n    setLogger: () => {\n        return;\n    },\n    setActiveAccount: () => {\n        return;\n    },\n    getActiveAccount: () => {\n        return null;\n    },\n    initializeWrapperLibrary: () => {\n        return;\n    },\n    setNavigationClient: () => {\n        return;\n    },\n    getConfiguration: () => {\n        throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();\n    },\n    hydrateCache: () => {\n        return Promise.reject(\n            BrowserConfigurationAuthError.createStubPcaInstanceCalledError()\n        );\n    },\n    clearCache: () => {\n        return Promise.reject(\n            BrowserConfigurationAuthError.createStubPcaInstanceCalledError()\n        );\n    },\n};\n"],"mappings":";;;;;AAKA;AAKA;AACA;AACA;AAES,MAAAA,8BAAA;EAETC,UAAS,EAAAA,CAAA,KAAY;IACZ,OAAAC,OAAA,CAAAC,MAAmB,CAAAC,6BAAA,CAAAC,gCAAwC;EACpE;EACAC,iBAAsB,EAAAA,CAAA;IACb,OAAAJ,OAAA,CAAAC,MAAA,CAAAC,6BAAA,CAAAC,gCAAsE;EAC/E;EACAE,oBAAS,EAAAA,CAAA,KAAsB;IACtB,OAAAL,OAAA,CAAAC,MAAA,CAAqBC,6BAAA,CAAAC,gCAAgC;EAC9D;EAEAG,kBAAyC,EAAAA,CAAA;IACrC,OAAcN,OAAA,CAAAC,MAAQ,CAAIC,6BAAE,CAAAC,gCAAA;GACX;EACjBI,kBAAoB,EAAAA,CAAA;IACF,OAAAP,OAAA,CACdC,MAAA,CAAAC,6BACM,CAAAC,gCAAuB;GACf;EAGlBK,cAAgB,EAAAA,CAAA;IAChB;EACA;EACAC,kBAAA,EAAAA,CAAA,KAA0B;IACA;GACC;EAC3BC,oBAAA,EAAAA,CAAA;IACmB;GACC;EACpBC,mBAA6B,EAAAA,CAAA;IAC7B;GACU;EACVC,qBAAqB,EAAGA,CAAA;IAClB,OAAcZ,OAAA,CAAAC,MAAG,CAAAC,6BAAgC,CAACC,gCAAC;GAC3C;EACdU,UAAW,EAACA,CAAA,KAAa;IAChB,OAAAb,OAAU,CAAAC,MAAA,CAAAC,6BAA+C,CAAAC,gCAAE;GACvD;EACbW,aAAa,EAAAA,CAAA,KAAO;IACpB,OAAgBd,OAAE,CAAMC,MAAA,CAAAC,6BAAQ,CAAAC,gCAAA;GAChB;EAChBY,MAAA,EAAAA,CAAA;IACwB,OAAAf,OAAA,CAAAC,MAAC,CAAGC,6BAAuB,CAAAC,gCAAc;EACjE;EACAa,cAAgB,EAAAA,CAAA;IACA,OAAAhB,OAAA,CAAAC,MAAA,CAAAC,6BAAyB,CAAAC,gCAAA;EACzC;EAQAc,WAAW,EAAaA,CAAA;IAC3B,OAAAjB,OAAA,CAAAC,MAAA,CAAAC,6BAAA,CAAAC,gCAAA;EAED"},"metadata":{},"sourceType":"module","externalDependencies":[]}