{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { ClientAuthError } from './ClientAuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\n */\nconst ClientConfigurationErrorMessage = {\n  redirectUriNotSet: {\n    code: \"redirect_uri_empty\",\n    desc: \"A redirect URI is required for all calls, and none has been set.\"\n  },\n  postLogoutUriNotSet: {\n    code: \"post_logout_uri_empty\",\n    desc: \"A post logout redirect has not been set.\"\n  },\n  claimsRequestParsingError: {\n    code: \"claims_request_parsing_error\",\n    desc: \"Could not parse the given claims request object.\"\n  },\n  authorityUriInsecure: {\n    code: \"authority_uri_insecure\",\n    desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\n  },\n  urlParseError: {\n    code: \"url_parse_error\",\n    desc: \"URL could not be parsed into appropriate segments.\"\n  },\n  urlEmptyError: {\n    code: \"empty_url_error\",\n    desc: \"URL was empty or null.\"\n  },\n  emptyScopesError: {\n    code: \"empty_input_scopes_error\",\n    desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\"\n  },\n  nonArrayScopesError: {\n    code: \"nonarray_input_scopes_error\",\n    desc: \"Scopes cannot be passed as non-array.\"\n  },\n  clientIdSingleScopeError: {\n    code: \"clientid_input_scopes_error\",\n    desc: \"Client ID can only be provided as a single scope.\"\n  },\n  invalidPrompt: {\n    code: \"invalid_prompt_value\",\n    desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create', 'none' and 'no_session'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\"\n  },\n  invalidClaimsRequest: {\n    code: \"invalid_claims\",\n    desc: \"Given claims parameter must be a stringified JSON object.\"\n  },\n  tokenRequestEmptyError: {\n    code: \"token_request_empty\",\n    desc: \"Token request was empty and not found in cache.\"\n  },\n  logoutRequestEmptyError: {\n    code: \"logout_request_empty\",\n    desc: \"The logout request was null or undefined.\"\n  },\n  invalidCodeChallengeMethod: {\n    code: \"invalid_code_challenge_method\",\n    desc: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".'\n  },\n  invalidCodeChallengeParams: {\n    code: \"pkce_params_missing\",\n    desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\"\n  },\n  invalidCloudDiscoveryMetadata: {\n    code: \"invalid_cloud_discovery_metadata\",\n    desc: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\"\n  },\n  invalidAuthorityMetadata: {\n    code: \"invalid_authority_metadata\",\n    desc: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\"\n  },\n  untrustedAuthority: {\n    code: \"untrusted_authority\",\n    desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\"\n  },\n  invalidAzureCloudInstance: {\n    code: \"invalid_azure_cloud_instance\",\n    desc: \"Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values\"\n  },\n  missingSshJwk: {\n    code: \"missing_ssh_jwk\",\n    desc: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\"\n  },\n  missingSshKid: {\n    code: \"missing_ssh_kid\",\n    desc: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\"\n  },\n  missingNonceAuthenticationHeader: {\n    code: \"missing_nonce_authentication_header\",\n    desc: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\"\n  },\n  invalidAuthenticationHeader: {\n    code: \"invalid_authentication_header\",\n    desc: \"Invalid authentication header provided\"\n  },\n  cannotSetOIDCOptions: {\n    code: \"cannot_set_OIDCOptions\",\n    desc: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\"\n  },\n  cannotAllowNativeBroker: {\n    code: \"cannot_allow_native_broker\",\n    desc: \"Cannot set allowNativeBroker parameter to true when not in AAD protocol mode.\"\n  },\n  authorityMismatch: {\n    code: \"authority_mismatch\",\n    desc: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\"\n  }\n};\n/**\n * Error thrown when there is an error in configuration of the MSAL.js library.\n */\nclass ClientConfigurationError extends ClientAuthError {\n  constructor(errorCode, errorMessage) {\n    super(errorCode, errorMessage);\n    this.name = \"ClientConfigurationError\";\n    Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n  }\n  /**\n   * Creates an error thrown when the redirect uri is empty (not set by caller)\n   */\n  static createRedirectUriEmptyError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);\n  }\n  /**\n   * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\n   */\n  static createPostLogoutRedirectUriEmptyError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\n  }\n  /**\n   * Creates an error thrown when the claims request could not be successfully parsed\n   */\n  static createClaimsRequestParsingError(claimsRequestParseError) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, `${ClientConfigurationErrorMessage.claimsRequestParsingError.desc} Given value: ${claimsRequestParseError}`);\n  }\n  /**\n   * Creates an error thrown if authority uri is given an insecure protocol.\n   * @param urlString\n   */\n  static createInsecureAuthorityUriError(urlString) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, `${ClientConfigurationErrorMessage.authorityUriInsecure.desc} Given URI: ${urlString}`);\n  }\n  /**\n   * Creates an error thrown if URL string does not parse into separate segments.\n   * @param urlString\n   */\n  static createUrlParseError(urlParseError) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, `${ClientConfigurationErrorMessage.urlParseError.desc} Given Error: ${urlParseError}`);\n  }\n  /**\n   * Creates an error thrown if URL string is empty or null.\n   * @param urlString\n   */\n  static createUrlEmptyError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);\n  }\n  /**\n   * Error thrown when scopes are empty.\n   * @param scopesValue\n   */\n  static createEmptyScopesArrayError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, `${ClientConfigurationErrorMessage.emptyScopesError.desc}`);\n  }\n  /**\n   * Error thrown when client id scope is not provided as single scope.\n   * @param inputScopes\n   */\n  static createClientIdSingleScopeError(inputScopes) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, `${ClientConfigurationErrorMessage.clientIdSingleScopeError.desc} Given Scopes: ${inputScopes}`);\n  }\n  /**\n   * Error thrown when prompt is not an allowed type.\n   * @param promptValue\n   */\n  static createInvalidPromptError(promptValue) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, `${ClientConfigurationErrorMessage.invalidPrompt.desc} Given value: ${promptValue}`);\n  }\n  /**\n   * Creates error thrown when claims parameter is not a stringified JSON object\n   */\n  static createInvalidClaimsRequestError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\n  }\n  /**\n   * Throws error when token request is empty and nothing cached in storage.\n   */\n  static createEmptyLogoutRequestError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);\n  }\n  /**\n   * Throws error when token request is empty and nothing cached in storage.\n   */\n  static createEmptyTokenRequestError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);\n  }\n  /**\n   * Throws error when an invalid code_challenge_method is passed by the user\n   */\n  static createInvalidCodeChallengeMethodError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);\n  }\n  /**\n   * Throws error when both params: code_challenge and code_challenge_method are not passed together\n   */\n  static createInvalidCodeChallengeParamsError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);\n  }\n  /**\n   * Throws an error when the user passes invalid cloudDiscoveryMetadata\n   */\n  static createInvalidCloudDiscoveryMetadataError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\n  }\n  /**\n   * Throws an error when the user passes invalid cloudDiscoveryMetadata\n   */\n  static createInvalidAuthorityMetadataError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code, ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\n  }\n  /**\n   * Throws error when provided authority is not a member of the trusted host list\n   */\n  static createUntrustedAuthorityError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);\n  }\n  /**\n   * Throws error when the AzureCloudInstance is set to an invalid value\n   */\n  static createInvalidAzureCloudInstanceError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAzureCloudInstance.code, ClientConfigurationErrorMessage.invalidAzureCloudInstance.desc);\n  }\n  /**\n   * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request\n   */\n  static createMissingSshJwkError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshJwk.code, ClientConfigurationErrorMessage.missingSshJwk.desc);\n  }\n  /**\n   * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request\n   */\n  static createMissingSshKidError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshKid.code, ClientConfigurationErrorMessage.missingSshKid.desc);\n  }\n  /**\n   * Throws error when provided headers don't contain a header that a server nonce can be extracted from\n   */\n  static createMissingNonceAuthenticationHeadersError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code, ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc);\n  }\n  /**\n   * Throws error when a provided header is invalid in any way\n   */\n  static createInvalidAuthenticationHeaderError(invalidHeaderName, details) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthenticationHeader.code, `${ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc}. Invalid header: ${invalidHeaderName}. Details: ${details}`);\n  }\n  /**\n   * Throws error when provided non-default OIDCOptions when not in OIDC protocol mode\n   */\n  static createCannotSetOIDCOptionsError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.cannotSetOIDCOptions.code, ClientConfigurationErrorMessage.cannotSetOIDCOptions.desc);\n  }\n  /**\n   * Throws error when allowNativeBroker is set to true when not in AAD protocol mode\n   */\n  static createCannotAllowNativeBrokerError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.cannotAllowNativeBroker.code, ClientConfigurationErrorMessage.cannotAllowNativeBroker.desc);\n  }\n  /**\n   * Create an error when the authority provided in request does not match authority provided in account or MSAL.js configuration.\n   */\n  static createAuthorityMismatchError() {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityMismatch.code, ClientConfigurationErrorMessage.authorityMismatch.desc);\n  }\n}\nexport { ClientConfigurationError, ClientConfigurationErrorMessage };","map":{"version":3,"names":["authorityMismatch","code","ClientConfigurationError","ClientAuthError","constructor","errorCode","errorMessage","Object","setPrototypeOf","prototype","createRedirectUriEmptyError","ClientConfigurationErrorMessage","redirectUriNotSet","desc","createPostLogoutRedirectUriEmptyError","createInsecureAuthorityUriError","urlString","authorityUriInsecure","createUrlParseError","urlParseError","createUrlEmptyError","urlEmptyError","emptyScopesError","createClientIdSingleScopeError","inputScopes","createInvalidPromptError","promptValue","invalidPrompt","invalidClaimsRequest","createEmptyLogoutRequestError","logoutRequestEmptyError","tokenRequestEmptyError","createInvalidCodeChallengeMethodError","invalidCodeChallengeMethod","invalidCodeChallengeParams","createInvalidCloudDiscoveryMetadataError","invalidCloudDiscoveryMetadata"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\error\\ClientConfigurationError.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientAuthError } from \"./ClientAuthError\";\n\n/**\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\n */\nexport const ClientConfigurationErrorMessage = {\n    redirectUriNotSet: {\n        code: \"redirect_uri_empty\",\n        desc: \"A redirect URI is required for all calls, and none has been set.\",\n    },\n    postLogoutUriNotSet: {\n        code: \"post_logout_uri_empty\",\n        desc: \"A post logout redirect has not been set.\",\n    },\n    claimsRequestParsingError: {\n        code: \"claims_request_parsing_error\",\n        desc: \"Could not parse the given claims request object.\",\n    },\n    authorityUriInsecure: {\n        code: \"authority_uri_insecure\",\n        desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\n    },\n    urlParseError: {\n        code: \"url_parse_error\",\n        desc: \"URL could not be parsed into appropriate segments.\",\n    },\n    urlEmptyError: {\n        code: \"empty_url_error\",\n        desc: \"URL was empty or null.\",\n    },\n    emptyScopesError: {\n        code: \"empty_input_scopes_error\",\n        desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\n    },\n    nonArrayScopesError: {\n        code: \"nonarray_input_scopes_error\",\n        desc: \"Scopes cannot be passed as non-array.\",\n    },\n    clientIdSingleScopeError: {\n        code: \"clientid_input_scopes_error\",\n        desc: \"Client ID can only be provided as a single scope.\",\n    },\n    invalidPrompt: {\n        code: \"invalid_prompt_value\",\n        desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create', 'none' and 'no_session'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\n    },\n    invalidClaimsRequest: {\n        code: \"invalid_claims\",\n        desc: \"Given claims parameter must be a stringified JSON object.\",\n    },\n    tokenRequestEmptyError: {\n        code: \"token_request_empty\",\n        desc: \"Token request was empty and not found in cache.\",\n    },\n    logoutRequestEmptyError: {\n        code: \"logout_request_empty\",\n        desc: \"The logout request was null or undefined.\",\n    },\n    invalidCodeChallengeMethod: {\n        code: \"invalid_code_challenge_method\",\n        desc: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\n    },\n    invalidCodeChallengeParams: {\n        code: \"pkce_params_missing\",\n        desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\n    },\n    invalidCloudDiscoveryMetadata: {\n        code: \"invalid_cloud_discovery_metadata\",\n        desc: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\n    },\n    invalidAuthorityMetadata: {\n        code: \"invalid_authority_metadata\",\n        desc: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\n    },\n    untrustedAuthority: {\n        code: \"untrusted_authority\",\n        desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\n    },\n    invalidAzureCloudInstance: {\n        code: \"invalid_azure_cloud_instance\",\n        desc: \"Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values\",\n    },\n    missingSshJwk: {\n        code: \"missing_ssh_jwk\",\n        desc: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\n    },\n    missingSshKid: {\n        code: \"missing_ssh_kid\",\n        desc: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\n    },\n    missingNonceAuthenticationHeader: {\n        code: \"missing_nonce_authentication_header\",\n        desc: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\n    },\n    invalidAuthenticationHeader: {\n        code: \"invalid_authentication_header\",\n        desc: \"Invalid authentication header provided\",\n    },\n    cannotSetOIDCOptions: {\n        code: \"cannot_set_OIDCOptions\",\n        desc: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\n    },\n    cannotAllowNativeBroker: {\n        code: \"cannot_allow_native_broker\",\n        desc: \"Cannot set allowNativeBroker parameter to true when not in AAD protocol mode.\",\n    },\n    authorityMismatch: {\n        code: \"authority_mismatch\",\n        desc: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\",\n    },\n};\n\n/**\n * Error thrown when there is an error in configuration of the MSAL.js library.\n */\nexport class ClientConfigurationError extends ClientAuthError {\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n        this.name = \"ClientConfigurationError\";\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n    }\n\n    /**\n     * Creates an error thrown when the redirect uri is empty (not set by caller)\n     */\n    static createRedirectUriEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.redirectUriNotSet.code,\n            ClientConfigurationErrorMessage.redirectUriNotSet.desc\n        );\n    }\n\n    /**\n     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\n     */\n    static createPostLogoutRedirectUriEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.postLogoutUriNotSet.code,\n            ClientConfigurationErrorMessage.postLogoutUriNotSet.desc\n        );\n    }\n\n    /**\n     * Creates an error thrown when the claims request could not be successfully parsed\n     */\n    static createClaimsRequestParsingError(\n        claimsRequestParseError: string\n    ): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.claimsRequestParsingError.code,\n            `${ClientConfigurationErrorMessage.claimsRequestParsingError.desc} Given value: ${claimsRequestParseError}`\n        );\n    }\n\n    /**\n     * Creates an error thrown if authority uri is given an insecure protocol.\n     * @param urlString\n     */\n    static createInsecureAuthorityUriError(\n        urlString: string\n    ): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.authorityUriInsecure.code,\n            `${ClientConfigurationErrorMessage.authorityUriInsecure.desc} Given URI: ${urlString}`\n        );\n    }\n\n    /**\n     * Creates an error thrown if URL string does not parse into separate segments.\n     * @param urlString\n     */\n    static createUrlParseError(\n        urlParseError: string\n    ): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.urlParseError.code,\n            `${ClientConfigurationErrorMessage.urlParseError.desc} Given Error: ${urlParseError}`\n        );\n    }\n\n    /**\n     * Creates an error thrown if URL string is empty or null.\n     * @param urlString\n     */\n    static createUrlEmptyError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.urlEmptyError.code,\n            ClientConfigurationErrorMessage.urlEmptyError.desc\n        );\n    }\n\n    /**\n     * Error thrown when scopes are empty.\n     * @param scopesValue\n     */\n    static createEmptyScopesArrayError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.emptyScopesError.code,\n            `${ClientConfigurationErrorMessage.emptyScopesError.desc}`\n        );\n    }\n\n    /**\n     * Error thrown when client id scope is not provided as single scope.\n     * @param inputScopes\n     */\n    static createClientIdSingleScopeError(\n        inputScopes: Array<string>\n    ): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.clientIdSingleScopeError.code,\n            `${ClientConfigurationErrorMessage.clientIdSingleScopeError.desc} Given Scopes: ${inputScopes}`\n        );\n    }\n\n    /**\n     * Error thrown when prompt is not an allowed type.\n     * @param promptValue\n     */\n    static createInvalidPromptError(\n        promptValue: string\n    ): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidPrompt.code,\n            `${ClientConfigurationErrorMessage.invalidPrompt.desc} Given value: ${promptValue}`\n        );\n    }\n\n    /**\n     * Creates error thrown when claims parameter is not a stringified JSON object\n     */\n    static createInvalidClaimsRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidClaimsRequest.code,\n            ClientConfigurationErrorMessage.invalidClaimsRequest.desc\n        );\n    }\n\n    /**\n     * Throws error when token request is empty and nothing cached in storage.\n     */\n    static createEmptyLogoutRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.logoutRequestEmptyError.code,\n            ClientConfigurationErrorMessage.logoutRequestEmptyError.desc\n        );\n    }\n\n    /**\n     * Throws error when token request is empty and nothing cached in storage.\n     */\n    static createEmptyTokenRequestError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.tokenRequestEmptyError.code,\n            ClientConfigurationErrorMessage.tokenRequestEmptyError.desc\n        );\n    }\n\n    /**\n     * Throws error when an invalid code_challenge_method is passed by the user\n     */\n    static createInvalidCodeChallengeMethodError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code,\n            ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc\n        );\n    }\n\n    /**\n     * Throws error when both params: code_challenge and code_challenge_method are not passed together\n     */\n    static createInvalidCodeChallengeParamsError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidCodeChallengeParams.code,\n            ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc\n        );\n    }\n\n    /**\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\n     */\n    static createInvalidCloudDiscoveryMetadataError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code,\n            ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc\n        );\n    }\n\n    /**\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\n     */\n    static createInvalidAuthorityMetadataError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidAuthorityMetadata.code,\n            ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc\n        );\n    }\n\n    /**\n     * Throws error when provided authority is not a member of the trusted host list\n     */\n    static createUntrustedAuthorityError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.untrustedAuthority.code,\n            ClientConfigurationErrorMessage.untrustedAuthority.desc\n        );\n    }\n\n    /**\n     * Throws error when the AzureCloudInstance is set to an invalid value\n     */\n    static createInvalidAzureCloudInstanceError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidAzureCloudInstance.code,\n            ClientConfigurationErrorMessage.invalidAzureCloudInstance.desc\n        );\n    }\n\n    /**\n     * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request\n     */\n    static createMissingSshJwkError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.missingSshJwk.code,\n            ClientConfigurationErrorMessage.missingSshJwk.desc\n        );\n    }\n\n    /**\n     * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request\n     */\n    static createMissingSshKidError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.missingSshKid.code,\n            ClientConfigurationErrorMessage.missingSshKid.desc\n        );\n    }\n\n    /**\n     * Throws error when provided headers don't contain a header that a server nonce can be extracted from\n     */\n    static createMissingNonceAuthenticationHeadersError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code,\n            ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc\n        );\n    }\n\n    /**\n     * Throws error when a provided header is invalid in any way\n     */\n    static createInvalidAuthenticationHeaderError(\n        invalidHeaderName: string,\n        details: string\n    ): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.invalidAuthenticationHeader.code,\n            `${ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc}. Invalid header: ${invalidHeaderName}. Details: ${details}`\n        );\n    }\n\n    /**\n     * Throws error when provided non-default OIDCOptions when not in OIDC protocol mode\n     */\n    static createCannotSetOIDCOptionsError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.cannotSetOIDCOptions.code,\n            ClientConfigurationErrorMessage.cannotSetOIDCOptions.desc\n        );\n    }\n\n    /**\n     * Throws error when allowNativeBroker is set to true when not in AAD protocol mode\n     */\n    static createCannotAllowNativeBrokerError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.cannotAllowNativeBroker.code,\n            ClientConfigurationErrorMessage.cannotAllowNativeBroker.desc\n        );\n    }\n\n    /**\n     * Create an error when the authority provided in request does not match authority provided in account or MSAL.js configuration.\n     */\n    static createAuthorityMismatchError(): ClientConfigurationError {\n        return new ClientConfigurationError(\n            ClientConfigurationErrorMessage.authorityMismatch.code,\n            ClientConfigurationErrorMessage.authorityMismatch.desc\n        );\n    }\n}\n"],"mappings":";;;;;AAKA;AAEA;;AAEG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA0GDA,iBAAA;IAEFC,IAAA;;EAEG;AACH;AACgB;AAMZ;;AAEG,MAAAC,wBAAA,SAAAC,eAAA;EACHC,WAAkCA,CAAAC,SAAA,EAAAC,YAAA;IAOlC,MAAAD,SAAA,EAAAC,YAAA;;IAEGC,MAAA,CAAAC,cAAA,OAAAN,wBAAA,CAAAO,SAAA;;EAQH;;AAEG;EACH,OAAOC,2BAA+BA,CAAA;IAStC,WAAAR,wBAAA,CAAAS,+BAAA,CAAAC,iBAAA,CAAAX,IAAA,EAAAU,+BAAA,CAAAC,iBAAA,CAAAC,IAAA;;;AAGG;AACH;EASA,OAAAC,sCAAA;;;EAGG;AACH;AASA;;;EAGG;;AAQH;;;EAGG,OAAAC,gCAAAC,SAAA;IACG,OAA4B,IAAAd,wBAA4B,CAAAS,+BAAA,CAAAM,oBAAA,CAAAhB,IAAA,KAAAU,+BAAA,CAAAM,oBAAA,CAAAJ,IAAA,eAAAG,SAAA;EAO9D;;;AAGG;;EAUH,OAAAE,oBAAAC,aAAA;;;EAGG;AACH;AASA;;EAEG,OAAAC,oBAAA;IACG,OAAgC,IAAAlB,wBAAA,CAAAS,+BAA4B,CAAAU,aAAA,CAAApB,IAAA,EAAAU,+BAAA,CAAAU,aAAA,CAAAR,IAAA;EAOlE;;AAEG;;AAQH;;IAEG,WAAAX,wBAAA,CAAAS,+BAAA,CAAAW,gBAAA,CAAArB,IAAA,KAAAU,+BAAA,CAAAW,gBAAA,CAAAT,IAAA;;EAQH;;AAEG;;EAQH,OAAAU,+BAAAC,WAAA;;EAEG;;AAQH;;AAEG;EACH,OAAOC,wBAAwCA,CAAAC,WAAA;IAO/C,WAAAxB,wBAAA,CAAAS,+BAAA,CAAAgB,aAAA,CAAA1B,IAAA,KAAAU,+BAAA,CAAAgB,aAAA,CAAAd,IAAA,iBAAAa,WAAA;;EAEG;;AAQH;;IAEG,WAAAxB,wBAAA,CAAAS,+BAAA,CAAAiB,oBAAA,CAAA3B,IAAA,EAAAU,+BAAA,CAAAiB,oBAAA,CAAAf,IAAA;;EAQH;;AAEG;EACH,OAAOgB,6BAAoCA,CAAA;IAO3C,WAAA3B,wBAAA,CAAAS,+BAAA,CAAAmB,uBAAA,CAAA7B,IAAA,EAAAU,+BAAA,CAAAmB,uBAAA,CAAAjB,IAAA;;EAEG;;AAQH;;IAEG,WAAAX,wBAAA,CAAAS,+BAAA,CAAAoB,sBAAA,CAAA9B,IAAA,EAAAU,+BAAA,CAAAoB,sBAAA,CAAAlB,IAAA;;EAQH;;AAEG;EACH,OAAOmB,qCAA4CA,CAAA;IAOnD,WAAA9B,wBAAA,CAAAS,+BAAA,CAAAsB,0BAAA,CAAAhC,IAAA,EAAAU,+BAAA,CAAAsB,0BAAA,CAAApB,IAAA;;EAEG;;AAWH;;IAEG,WAAAX,wBAAA,CAAAS,+BAAA,CAAAuB,0BAAA,CAAAjC,IAAA,EAAAU,+BAAA,CAAAuB,0BAAA,CAAArB,IAAA;;EAQH;;AAEG;EACH,OAAOsB,wCAA8DA,CAAA;IAOrE,WAAAjC,wBAAA,CAAAS,+BAAA,CAAAyB,6BAAA,CAAAnC,IAAA,EAAAU,+BAAA,CAAAyB,6BAAA,CAAAvB,IAAA;;EAEG;;AAON"},"metadata":{},"sourceType":"module","externalDependencies":[]}