{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Validates server consumable params from the \"request\" objects\n */\nclass RequestValidator {\n  /**\n   * Utility to check if the `redirectUri` in the request is a non-null value\n   * @param redirectUri\n   */\n  static validateRedirectUri(redirectUri) {\n    if (!redirectUri) {\n      throw ClientConfigurationError.createRedirectUriEmptyError();\n    }\n  }\n  /**\n   * Utility to validate prompt sent by the user in the request\n   * @param prompt\n   */\n  static validatePrompt(prompt) {\n    const promptValues = [];\n    for (const value in PromptValue) {\n      promptValues.push(PromptValue[value]);\n    }\n    if (promptValues.indexOf(prompt) < 0) {\n      throw ClientConfigurationError.createInvalidPromptError(prompt);\n    }\n  }\n  static validateClaims(claims) {\n    try {\n      JSON.parse(claims);\n    } catch (e) {\n      throw ClientConfigurationError.createInvalidClaimsRequestError();\n    }\n  }\n  /**\n   * Utility to validate code_challenge and code_challenge_method\n   * @param codeChallenge\n   * @param codeChallengeMethod\n   */\n  static validateCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n    if (!codeChallenge || !codeChallengeMethod) {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    } else {\n      this.validateCodeChallengeMethod(codeChallengeMethod);\n    }\n  }\n  /**\n   * Utility to validate code_challenge_method\n   * @param codeChallengeMethod\n   */\n  static validateCodeChallengeMethod(codeChallengeMethod) {\n    if ([CodeChallengeMethodValues.PLAIN, CodeChallengeMethodValues.S256].indexOf(codeChallengeMethod) < 0) {\n      throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n    }\n  }\n  /**\n   * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters\n   * @param request\n   */\n  static sanitizeEQParams(eQParams, queryParams) {\n    if (!eQParams) {\n      return {};\n    }\n    // Remove any query parameters already included in SSO params\n    queryParams.forEach((_value, key) => {\n      if (eQParams[key]) {\n        delete eQParams[key];\n      }\n    });\n    // remove empty string parameters\n    return Object.fromEntries(Object.entries(eQParams).filter(kv => kv[1] !== \"\"));\n  }\n}\nexport { RequestValidator };","map":{"version":3,"names":["RequestValidator","validateRedirectUri","redirectUri","ClientConfigurationError","createRedirectUriEmptyError","value","PromptValue","promptValues","push","validateClaims","claims"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\request\\RequestValidator.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { PromptValue, CodeChallengeMethodValues } from \"../utils/Constants\";\nimport { StringDict } from \"../utils/MsalTypes\";\n\n/**\n * Validates server consumable params from the \"request\" objects\n */\nexport class RequestValidator {\n    /**\n     * Utility to check if the `redirectUri` in the request is a non-null value\n     * @param redirectUri\n     */\n    static validateRedirectUri(redirectUri: string): void {\n        if (!redirectUri) {\n            throw ClientConfigurationError.createRedirectUriEmptyError();\n        }\n    }\n\n    /**\n     * Utility to validate prompt sent by the user in the request\n     * @param prompt\n     */\n    static validatePrompt(prompt: string): void {\n        const promptValues = [];\n\n        for (const value in PromptValue) {\n            promptValues.push(PromptValue[value]);\n        }\n\n        if (promptValues.indexOf(prompt) < 0) {\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\n        }\n    }\n\n    static validateClaims(claims: string): void {\n        try {\n            JSON.parse(claims);\n        } catch (e) {\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\n        }\n    }\n\n    /**\n     * Utility to validate code_challenge and code_challenge_method\n     * @param codeChallenge\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeParams(\n        codeChallenge: string,\n        codeChallengeMethod: string\n    ): void {\n        if (!codeChallenge || !codeChallengeMethod) {\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n        } else {\n            this.validateCodeChallengeMethod(codeChallengeMethod);\n        }\n    }\n\n    /**\n     * Utility to validate code_challenge_method\n     * @param codeChallengeMethod\n     */\n    static validateCodeChallengeMethod(codeChallengeMethod: string): void {\n        if (\n            [\n                CodeChallengeMethodValues.PLAIN,\n                CodeChallengeMethodValues.S256,\n            ].indexOf(codeChallengeMethod) < 0\n        ) {\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n        }\n    }\n\n    /**\n     * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters\n     * @param request\n     */\n    static sanitizeEQParams(\n        eQParams: StringDict,\n        queryParams: Map<string, string>\n    ): StringDict {\n        if (!eQParams) {\n            return {};\n        }\n\n        // Remove any query parameters already included in SSO params\n        queryParams.forEach((_value, key) => {\n            if (eQParams[key]) {\n                delete eQParams[key];\n            }\n        });\n\n        // remove empty string parameters\n        return Object.fromEntries(\n            Object.entries(eQParams).filter((kv) => kv[1] !== \"\")\n        );\n    }\n}\n"],"mappings":";;;;;;AAOA;AAEA;;AAEG;;;AAKI;AACH,MAA0BA,gBAAA;EAM1B;;;AAGG;EACH,OAAOC,oBAAAC,WAAA,EAAoC;IAY3C,IAAqB,CAAAA,WAAA,EAAC;MAQtB,MAAAC,wBAAA,CAAAC,2BAAA;;;;AAIG;;AAYH;;;IAGG,WAAAC,KAAA,IAAAC,WAAA;MAC+BC,YAAA,CAAAC,IAAA,CAAAF,WAAA,CAAAD,KAAA;IAWlC;;;IAGG;EACH;EAoBH,OAAAI,eAAAC,MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}