{"ast":null,"code":"/*! @azure/msal-browser v3.1.0 2023-09-05 */\n'use strict';\n\nimport { BaseOperatingContext } from './BaseOperatingContext.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass TeamsAppOperatingContext extends BaseOperatingContext {\n  /**\n   * Return the module name.  Intended for use with import() to enable dynamic import\n   * of the implementation associated with this operating context\n   * @returns\n   */\n  getModuleName() {\n    return TeamsAppOperatingContext.MODULE_NAME;\n  }\n  /**\n   * Returns the unique identifier for this operating context\n   * @returns string\n   */\n  getId() {\n    return TeamsAppOperatingContext.ID;\n  }\n  /**\n   * Checks whether the operating context is available.\n   * Confirms that the code is running a browser rather.  This is required.\n   * @returns Promise<boolean> indicating whether this operating context is currently available.\n   */\n  async initialize() {\n    /*\n     * TODO: Add implementation to check for presence of inject MetaOSHub JavaScript interface\n     * TODO: Make pre-flight token request to ensure that App is eligible to use Nested App Auth\n     */\n    return false;\n  }\n}\n/*\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n * containing the implementation for this operating context\n */\nTeamsAppOperatingContext.MODULE_NAME = \"\";\n/**\n * Unique identifier for the operating context\n */\nTeamsAppOperatingContext.ID = \"TeamsAppOperatingContext\";\nexport { TeamsAppOperatingContext };","map":{"version":3,"names":["TeamsAppOperatingContext","BaseOperatingContext","getModuleName","MODULE_NAME","getId"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\operatingcontext\\TeamsAppOperatingContext.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseOperatingContext } from \"./BaseOperatingContext\";\n\nexport class TeamsAppOperatingContext extends BaseOperatingContext {\n    /*\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n     * containing the implementation for this operating context\n     */\n    static readonly MODULE_NAME: string = \"\";\n\n    /**\n     * Unique identifier for the operating context\n     */\n    static readonly ID: string = \"TeamsAppOperatingContext\";\n\n    /**\n     * Return the module name.  Intended for use with import() to enable dynamic import\n     * of the implementation associated with this operating context\n     * @returns\n     */\n    getModuleName(): string {\n        return TeamsAppOperatingContext.MODULE_NAME;\n    }\n    /**\n     * Returns the unique identifier for this operating context\n     * @returns string\n     */\n    getId(): string {\n        return TeamsAppOperatingContext.ID;\n    }\n\n    /**\n     * Checks whether the operating context is available.\n     * Confirms that the code is running a browser rather.  This is required.\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\n     */\n    async initialize(): Promise<boolean> {\n        /*\n         * TODO: Add implementation to check for presence of inject MetaOSHub JavaScript interface\n         * TODO: Make pre-flight token request to ensure that App is eligible to use Nested App Auth\n         */\n        return false;\n    }\n}\n"],"mappings":";;;;;AAKA;AAEA;AAKI;AAEA;AAEG,MAAAA,wBAAA,SAAAC,oBAAA;EACH;AAEA;;;;EAIGC,cAAA;IACH,OAAAF,wBAAuB,CAAAG,WAAA;EAGvB;;;AAGG;AACH;EAIAC,MAAA;;;;AAIG;AACG;AAOT"},"metadata":{},"sourceType":"module","externalDependencies":[]}