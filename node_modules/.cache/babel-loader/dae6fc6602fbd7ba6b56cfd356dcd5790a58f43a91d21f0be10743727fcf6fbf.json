{"ast":null,"code":"/*! @azure/msal-browser v3.5.0 2023-11-07 */\n'use strict';\n\nimport { OIDC_DEFAULT_SCOPES } from '@azure/msal-common';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Constants\n */\nconst BrowserConstants = {\n  /**\n   * Interaction in progress cache value\n   */\n  INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n  /**\n   * Invalid grant error code\n   */\n  INVALID_GRANT_ERROR: \"invalid_grant\",\n  /**\n   * Default popup window width\n   */\n  POPUP_WIDTH: 483,\n  /**\n   * Default popup window height\n   */\n  POPUP_HEIGHT: 600,\n  /**\n   * Name of the popup window starts with\n   */\n  POPUP_NAME_PREFIX: \"msal\",\n  /**\n   * Default popup monitor poll interval in milliseconds\n   */\n  DEFAULT_POLL_INTERVAL_MS: 30,\n  /**\n   * Msal-browser SKU\n   */\n  MSAL_SKU: \"msal.js.browser\"\n};\nconst NativeConstants = {\n  CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\n  PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\n  MATS_TELEMETRY: \"MATS\"\n};\nconst NativeExtensionMethod = {\n  HandshakeRequest: \"Handshake\",\n  HandshakeResponse: \"HandshakeResponse\",\n  GetToken: \"GetToken\",\n  Response: \"Response\"\n};\nconst BrowserCacheLocation = {\n  LocalStorage: \"localStorage\",\n  SessionStorage: \"sessionStorage\",\n  MemoryStorage: \"memoryStorage\"\n};\n/**\n * HTTP Request types supported by MSAL.\n */\nconst HTTP_REQUEST_TYPE = {\n  GET: \"GET\",\n  POST: \"POST\"\n};\n/**\n * Temporary cache keys for MSAL, deleted after any request.\n */\nconst TemporaryCacheKeys = {\n  AUTHORITY: \"authority\",\n  ACQUIRE_TOKEN_ACCOUNT: \"acquireToken.account\",\n  SESSION_STATE: \"session.state\",\n  REQUEST_STATE: \"request.state\",\n  NONCE_IDTOKEN: \"nonce.id_token\",\n  ORIGIN_URI: \"request.origin\",\n  RENEW_STATUS: \"token.renew.status\",\n  URL_HASH: \"urlHash\",\n  REQUEST_PARAMS: \"request.params\",\n  SCOPES: \"scopes\",\n  INTERACTION_STATUS_KEY: \"interaction.status\",\n  CCS_CREDENTIAL: \"ccs.credential\",\n  CORRELATION_ID: \"request.correlationId\",\n  NATIVE_REQUEST: \"request.native\",\n  REDIRECT_CONTEXT: \"request.redirect.context\"\n};\nconst StaticCacheKeys = {\n  ACCOUNT_KEYS: \"msal.account.keys\",\n  TOKEN_KEYS: \"msal.token.keys\"\n};\n/**\n * Cache keys stored in-memory\n */\nconst InMemoryCacheKeys = {\n  WRAPPER_SKU: \"wrapper.sku\",\n  WRAPPER_VER: \"wrapper.version\"\n};\n/**\n * API Codes for Telemetry purposes.\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\n * 0-99 Silent Flow\n * 800-899 Auth Code Flow\n */\nconst ApiId = {\n  acquireTokenRedirect: 861,\n  acquireTokenPopup: 862,\n  ssoSilent: 863,\n  acquireTokenSilent_authCode: 864,\n  handleRedirectPromise: 865,\n  acquireTokenByCode: 866,\n  acquireTokenSilent_silentFlow: 61,\n  logout: 961,\n  logoutPopup: 962\n};\n/*\n * Interaction type of the API - used for state and telemetry\n */\nvar InteractionType;\n(function (InteractionType) {\n  InteractionType[\"Redirect\"] = \"redirect\";\n  InteractionType[\"Popup\"] = \"popup\";\n  InteractionType[\"Silent\"] = \"silent\";\n  InteractionType[\"None\"] = \"none\";\n})(InteractionType || (InteractionType = {}));\n/**\n * Types of interaction currently in progress.\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\n */\nconst InteractionStatus = {\n  /**\n   * Initial status before interaction occurs\n   */\n  Startup: \"startup\",\n  /**\n   * Status set when all login calls occuring\n   */\n  Login: \"login\",\n  /**\n   * Status set when logout call occuring\n   */\n  Logout: \"logout\",\n  /**\n   * Status set for acquireToken calls\n   */\n  AcquireToken: \"acquireToken\",\n  /**\n   * Status set for ssoSilent calls\n   */\n  SsoSilent: \"ssoSilent\",\n  /**\n   * Status set when handleRedirect in progress\n   */\n  HandleRedirect: \"handleRedirect\",\n  /**\n   * Status set when interaction is complete\n   */\n  None: \"none\"\n};\nconst DEFAULT_REQUEST = {\n  scopes: OIDC_DEFAULT_SCOPES\n};\n/**\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\n */\nconst KEY_FORMAT_JWK = \"jwk\";\n// Supported wrapper SKUs\nconst WrapperSKU = {\n  React: \"@azure/msal-react\",\n  Angular: \"@azure/msal-angular\"\n};\n// DatabaseStorage Constants\nconst DB_NAME = \"msal.db\";\nconst DB_VERSION = 1;\nconst DB_TABLE_NAME = `${DB_NAME}.keys`;\nconst CacheLookupPolicy = {\n  /*\n   * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\n   * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\n   * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\n   */\n  Default: 0,\n  /*\n   * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\n   * refresh tokens.\n   */\n  AccessToken: 1,\n  /*\n   * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\n   * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\n   * will not be renewed and acquireTokenSilent will fail.\n   */\n  AccessTokenAndRefreshToken: 2,\n  /*\n   * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\n   * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\n   * renewed and acquireTokenSilent will fail.\n   */\n  RefreshToken: 3,\n  /*\n   * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\n   * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\n   * setting \"forceRefresh: true\".\n   */\n  RefreshTokenAndNetwork: 4,\n  /*\n   * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\n   * always fail if 3rd party cookies are blocked by the browser.\n   */\n  Skip: 5\n};\nexport { ApiId, BrowserCacheLocation, BrowserConstants, CacheLookupPolicy, DB_NAME, DB_TABLE_NAME, DB_VERSION, DEFAULT_REQUEST, HTTP_REQUEST_TYPE, InMemoryCacheKeys, InteractionStatus, InteractionType, KEY_FORMAT_JWK, NativeConstants, NativeExtensionMethod, StaticCacheKeys, TemporaryCacheKeys, WrapperSKU };","map":{"version":3,"names":["BrowserConstants","INTERACTION_IN_PROGRESS_VALUE","INVALID_GRANT_ERROR","POPUP_WIDTH","POPUP_HEIGHT","POPUP_NAME_PREFIX","DEFAULT_POLL_INTERVAL_MS","CHANNEL_ID","PREFERRED_EXTENSION_ID","HandshakeResponse","GetToken","Response","SessionStorage","MemoryStorage","POST","TemporaryCacheKeys","StaticCacheKeys","ACCOUNT_KEYS","WRAPPER_SKU","WRAPPER_VER","acquireTokenPopup","ssoSilent","InteractionType","InteractionStatus","DEFAULT_REQUEST","scopes","OIDC_DEFAULT_SCOPES","KEY_FORMAT_JWK","React","Angular","DB_NAME","DB_VERSION","Default"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\utils\\BrowserConstants.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { OIDC_DEFAULT_SCOPES } from \"@azure/msal-common\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\n\n/**\n * Constants\n */\nexport const BrowserConstants = {\n    /**\n     * Interaction in progress cache value\n     */\n    INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n    /**\n     * Invalid grant error code\n     */\n    INVALID_GRANT_ERROR: \"invalid_grant\",\n    /**\n     * Default popup window width\n     */\n    POPUP_WIDTH: 483,\n    /**\n     * Default popup window height\n     */\n    POPUP_HEIGHT: 600,\n    /**\n     * Name of the popup window starts with\n     */\n    POPUP_NAME_PREFIX: \"msal\",\n    /**\n     * Default popup monitor poll interval in milliseconds\n     */\n    DEFAULT_POLL_INTERVAL_MS: 30,\n    /**\n     * Msal-browser SKU\n     */\n    MSAL_SKU: \"msal.js.browser\",\n};\n\nexport const NativeConstants = {\n    CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\n    PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\n    MATS_TELEMETRY: \"MATS\",\n};\n\nexport const NativeExtensionMethod = {\n    HandshakeRequest: \"Handshake\",\n    HandshakeResponse: \"HandshakeResponse\",\n    GetToken: \"GetToken\",\n    Response: \"Response\",\n} as const;\nexport type NativeExtensionMethod =\n    (typeof NativeExtensionMethod)[keyof typeof NativeExtensionMethod];\n\nexport const BrowserCacheLocation = {\n    LocalStorage: \"localStorage\",\n    SessionStorage: \"sessionStorage\",\n    MemoryStorage: \"memoryStorage\",\n} as const;\nexport type BrowserCacheLocation =\n    (typeof BrowserCacheLocation)[keyof typeof BrowserCacheLocation];\n\n/**\n * HTTP Request types supported by MSAL.\n */\nexport const HTTP_REQUEST_TYPE = {\n    GET: \"GET\",\n    POST: \"POST\",\n} as const;\nexport type HTTP_REQUEST_TYPE =\n    (typeof HTTP_REQUEST_TYPE)[keyof typeof HTTP_REQUEST_TYPE];\n\n/**\n * Temporary cache keys for MSAL, deleted after any request.\n */\nexport const TemporaryCacheKeys = {\n    AUTHORITY: \"authority\",\n    ACQUIRE_TOKEN_ACCOUNT: \"acquireToken.account\",\n    SESSION_STATE: \"session.state\",\n    REQUEST_STATE: \"request.state\",\n    NONCE_IDTOKEN: \"nonce.id_token\",\n    ORIGIN_URI: \"request.origin\",\n    RENEW_STATUS: \"token.renew.status\",\n    URL_HASH: \"urlHash\",\n    REQUEST_PARAMS: \"request.params\",\n    SCOPES: \"scopes\",\n    INTERACTION_STATUS_KEY: \"interaction.status\",\n    CCS_CREDENTIAL: \"ccs.credential\",\n    CORRELATION_ID: \"request.correlationId\",\n    NATIVE_REQUEST: \"request.native\",\n    REDIRECT_CONTEXT: \"request.redirect.context\",\n} as const;\nexport type TemporaryCacheKeys =\n    (typeof TemporaryCacheKeys)[keyof typeof TemporaryCacheKeys];\n\nexport const StaticCacheKeys = {\n    ACCOUNT_KEYS: \"msal.account.keys\",\n    TOKEN_KEYS: \"msal.token.keys\",\n} as const;\nexport type StaticCacheKeys =\n    (typeof StaticCacheKeys)[keyof typeof StaticCacheKeys];\n\n/**\n * Cache keys stored in-memory\n */\nexport const InMemoryCacheKeys = {\n    WRAPPER_SKU: \"wrapper.sku\",\n    WRAPPER_VER: \"wrapper.version\",\n} as const;\nexport type InMemoryCacheKeys =\n    (typeof InMemoryCacheKeys)[keyof typeof InMemoryCacheKeys];\n\n/**\n * API Codes for Telemetry purposes.\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\n * 0-99 Silent Flow\n * 800-899 Auth Code Flow\n */\nexport const ApiId = {\n    acquireTokenRedirect: 861,\n    acquireTokenPopup: 862,\n    ssoSilent: 863,\n    acquireTokenSilent_authCode: 864,\n    handleRedirectPromise: 865,\n    acquireTokenByCode: 866,\n    acquireTokenSilent_silentFlow: 61,\n    logout: 961,\n    logoutPopup: 962,\n} as const;\nexport type ApiId = (typeof ApiId)[keyof typeof ApiId];\n\n/*\n * Interaction type of the API - used for state and telemetry\n */\nexport enum InteractionType {\n    Redirect = \"redirect\",\n    Popup = \"popup\",\n    Silent = \"silent\",\n    None = \"none\",\n}\n\n/**\n * Types of interaction currently in progress.\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\n */\nexport const InteractionStatus = {\n    /**\n     * Initial status before interaction occurs\n     */\n    Startup: \"startup\",\n    /**\n     * Status set when all login calls occuring\n     */\n    Login: \"login\",\n    /**\n     * Status set when logout call occuring\n     */\n    Logout: \"logout\",\n    /**\n     * Status set for acquireToken calls\n     */\n    AcquireToken: \"acquireToken\",\n    /**\n     * Status set for ssoSilent calls\n     */\n    SsoSilent: \"ssoSilent\",\n    /**\n     * Status set when handleRedirect in progress\n     */\n    HandleRedirect: \"handleRedirect\",\n    /**\n     * Status set when interaction is complete\n     */\n    None: \"none\",\n} as const;\nexport type InteractionStatus =\n    (typeof InteractionStatus)[keyof typeof InteractionStatus];\n\nexport const DEFAULT_REQUEST: RedirectRequest | PopupRequest = {\n    scopes: OIDC_DEFAULT_SCOPES,\n};\n\n/**\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\n */\nexport const KEY_FORMAT_JWK = \"jwk\";\n\n// Supported wrapper SKUs\nexport const WrapperSKU = {\n    React: \"@azure/msal-react\",\n    Angular: \"@azure/msal-angular\",\n} as const;\nexport type WrapperSKU = (typeof WrapperSKU)[keyof typeof WrapperSKU];\n\n// DatabaseStorage Constants\nexport const DB_NAME = \"msal.db\";\nexport const DB_VERSION = 1;\nexport const DB_TABLE_NAME = `${DB_NAME}.keys`;\n\nexport const CacheLookupPolicy = {\n    /*\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\n     * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\n     * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\n     */\n    Default: 0, // 0 is falsy, is equivalent to not passing in a CacheLookupPolicy\n    /*\n     * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\n     * refresh tokens.\n     */\n    AccessToken: 1,\n    /*\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\n     * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\n     * will not be renewed and acquireTokenSilent will fail.\n     */\n    AccessTokenAndRefreshToken: 2,\n    /*\n     * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\n     * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\n     * renewed and acquireTokenSilent will fail.\n     */\n    RefreshToken: 3,\n    /*\n     * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\n     * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\n     * setting \"forceRefresh: true\".\n     */\n    RefreshTokenAndNetwork: 4,\n    /*\n     * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\n     * always fail if 3rd party cookies are blocked by the browser.\n     */\n    Skip: 5,\n} as const;\nexport type CacheLookupPolicy =\n    (typeof CacheLookupPolicy)[keyof typeof CacheLookupPolicy];\n"],"mappings":";;;;;AAMA;AACA;AAEA;;AAGA;AACI;;AAEG,MAAAA,gBAAA;;AAEH;;EAEGC,6BAAA;;AAEH;;EAEGC,mBAAA;;AAEH;;EAEGC,WAAA;;AAEH;;EAEGC,YAAA;;AAEH;;EAEGC,iBAAA;;AAEH;;EAEGC,wBAAA;;;AAIP;;;;EAIEC,UAAA;EAEFC,sBAAkC;;;;;EAKvBC,iBAAA;EACXC,QAAY;EAGZC,QAAA;;;;EAIWC,cAAA;EACXC,aAAY;AAGZ;;AAEG;AACH;;;EAGWC,IAAA;AACX;AAGA;;AAEG;AACH,MAAAC,kBAA+B;;;;;;;;;;;;;;;;;AAiBnB,MAAAC,eAAA,GACR;EAEJC,YAAA,qBAA4B;;;;AAI5B;AAGA;;EAEGC,WAAA;EACHC,WAAO;;;;AAIP;AAGA;;;;;EAKGC,iBAAA;EACHC,SAAA,EAAO;;;;;;;;;;;AAWK,IAAAC,eAAA;AAKZ,WAAAA,eAA2B;EACvBA,eAAqB;EACrBA,eAAe;EACfA,eAAiB;EACjBA,eAAa;AAChB,GAAAA,eAAA,KAAAA,eAAA;AAED;;;AAGG;AACH,MAAAC,iBAA8B;EAC1B;;AAEG;;EAEH;;AAEG;;EAEH;;AAEG;;EAEH;;AAEG;;EAEH;;AAEG;;EAEH;;AAEG;;EAEH;;AAEG;;;AAGK,MAAAC,eAAA,GACR;EAEJC,MAAA,EAAAC;AAIA;;AAEG;AACH;AAGA,MAAAC,cAAuB;;;EAGZC,KAAA;EACXC,OAAY;AAGZ;AACA;AACO,MAAAC,OAAA,GAAmB;AAE1B,MAAAC,UAA8B;;;;;;;;EAoC9BC,OAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}