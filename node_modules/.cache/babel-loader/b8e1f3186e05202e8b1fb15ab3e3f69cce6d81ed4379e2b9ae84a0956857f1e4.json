{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-typescript\\\\intelli-gui\\\\src\\\\components\\\\main\\\\subtabs\\\\description\\\\PathSubTabDescription.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { InputWithMovingLabel, MultiAutoComplete } from \"intelli-ui-components-library\";\nimport { updatePath } from \"../../mainTabsSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../../../store/hooks\";\nimport styles from \"./pathsubtabdescription.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PathSubTabDescription = ({\n  pathName,\n  methodName\n}) => {\n  _s();\n  var _paths$pathName$metho, _paths$pathName$metho2, _paths$pathName$metho3;\n  const paths = useAppSelector(state => state.export.paths);\n  const tags = useAppSelector(state => state.export.tags);\n  const state = useAppSelector(state => state);\n  console.log(state);\n  const dispatch = useAppDispatch();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles[\"mt-6\"],\n    children: [/*#__PURE__*/_jsxDEV(InputWithMovingLabel, {\n      inputProps: {\n        label: \"Summary\",\n        name: \"summary\",\n        value: (_paths$pathName$metho = paths[pathName][methodName]) === null || _paths$pathName$metho === void 0 ? void 0 : _paths$pathName$metho.summary,\n        onChange: event => {\n          dispatch(updatePath({\n            pathName,\n            methodName,\n            methodKey: \"summary\",\n            data: event.target.value\n          }));\n        },\n        type: \"text\"\n      },\n      top: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputWithMovingLabel, {\n      inputProps: {\n        label: \"Description\",\n        name: \"description\",\n        value: (_paths$pathName$metho2 = (_paths$pathName$metho3 = paths[pathName][methodName]) === null || _paths$pathName$metho3 === void 0 ? void 0 : _paths$pathName$metho3.description) !== null && _paths$pathName$metho2 !== void 0 ? _paths$pathName$metho2 : \"\",\n        onChange: event => {\n          dispatch(updatePath({\n            pathName,\n            methodName,\n            methodKey: \"description\",\n            data: event.target.value\n          }));\n        },\n        type: \"text\"\n      },\n      top: true,\n      className: styles[\"my-4\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MultiAutoComplete, {\n      options: tags.map(x => ({\n        ...x,\n        label: x.name\n      })),\n      onSelection: event => {\n        const newTag = event.target.value;\n        const updatedTags = [...new Set([...paths[pathName][methodName].tags, newTag])];\n        dispatch(updatePath({\n          pathName,\n          methodName,\n          methodKey: \"tags\",\n          data: updatedTags\n        }));\n      },\n      onClose: x => console.log(x),\n      inputProps: {\n        type: \"text\",\n        label: \"Tags\",\n        placeHolder: \"Placeholder\",\n        onChange: event => console.log(event.target.value)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(PathSubTabDescription, \"N0BSW9ReOOVicALOQq583zj02zU=\", false, function () {\n  return [useAppSelector, useAppSelector, useAppSelector, useAppDispatch];\n});\n_c = PathSubTabDescription;\nexport default PathSubTabDescription;\nvar _c;\n$RefreshReg$(_c, \"PathSubTabDescription\");","map":{"version":3,"names":["React","InputWithMovingLabel","MultiAutoComplete","updatePath","useAppDispatch","useAppSelector","styles","jsxDEV","_jsxDEV","PathSubTabDescription","pathName","methodName","_s","_paths$pathName$metho","_paths$pathName$metho2","_paths$pathName$metho3","paths","state","export","tags","console","log","dispatch","className","children","inputProps","label","name","value","summary","onChange","event","methodKey","data","target","type","top","fileName","_jsxFileName","lineNumber","columnNumber","description","options","map","x","onSelection","newTag","updatedTags","Set","onClose","placeHolder","_c","$RefreshReg$"],"sources":["D:/react-typescript/intelli-gui/src/components/main/subtabs/description/PathSubTabDescription.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  InputWithMovingLabel,\r\n  MultiAutoComplete,\r\n} from \"intelli-ui-components-library\";\r\nimport { updatePath } from \"../../mainTabsSlice\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../../store/hooks\";\r\nimport styles from \"./pathsubtabdescription.module.scss\";\r\n\r\nconst PathSubTabDescription = ({\r\n  pathName,\r\n  methodName,\r\n}: {\r\n  pathName: string;\r\n  methodName: string;\r\n}) => {\r\n  const paths = useAppSelector((state) => state.export.paths);\r\n  const tags = useAppSelector((state) => state.export.tags);\r\n  const state = useAppSelector((state) => state);\r\n  console.log(state);\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <div className={styles[\"mt-6\"]}>\r\n      <InputWithMovingLabel\r\n        inputProps={{\r\n          label: \"Summary\",\r\n          name: \"summary\",\r\n          value: paths[pathName][methodName]?.summary,\r\n          onChange: (event) => {\r\n            dispatch(\r\n              updatePath({\r\n                pathName,\r\n                methodName,\r\n                methodKey: \"summary\",\r\n                data: event.target.value,\r\n              })\r\n            );\r\n          },\r\n          type: \"text\",\r\n        }}\r\n        top\r\n      />\r\n      <InputWithMovingLabel\r\n        inputProps={{\r\n          label: \"Description\",\r\n          name: \"description\",\r\n          value: paths[pathName][methodName]?.description ?? \"\",\r\n          onChange: (event) => {\r\n            dispatch(\r\n              updatePath({\r\n                pathName,\r\n                methodName,\r\n                methodKey: \"description\",\r\n                data: event.target.value,\r\n              })\r\n            );\r\n          },\r\n          type: \"text\",\r\n        }}\r\n        top\r\n        className={styles[\"my-4\"]}\r\n      />\r\n      <MultiAutoComplete\r\n        options={tags.map((x: any) => ({ ...x, label: x.name }))}\r\n        onSelection={(event) => {\r\n          const newTag = event.target.value;\r\n          const updatedTags = [\r\n            ...new Set([...paths[pathName][methodName].tags, newTag]),\r\n          ];\r\n\r\n          dispatch(\r\n            updatePath({\r\n              pathName,\r\n              methodName,\r\n              methodKey: \"tags\",\r\n              data: updatedTags,\r\n            })\r\n          );\r\n        }}\r\n        onClose={(x) => console.log(x)}\r\n        inputProps={{\r\n          type: \"text\",\r\n          label: \"Tags\",\r\n          placeHolder: \"Placeholder\",\r\n          onChange: (event) => console.log(event.target.value),\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PathSubTabDescription;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}