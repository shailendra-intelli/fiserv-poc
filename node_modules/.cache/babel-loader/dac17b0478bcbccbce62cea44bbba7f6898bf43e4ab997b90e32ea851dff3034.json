{"ast":null,"code":"/*! @azure/msal-common v14.0.3 2023-09-05 */\n'use strict';\n\nimport { JoseHeaderError } from '../error/JoseHeaderError.mjs';\nimport { JsonTypes } from '../utils/Constants.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass JoseHeader {\n  constructor(options) {\n    this.typ = options.typ;\n    this.alg = options.alg;\n    this.kid = options.kid;\n  }\n  /**\n   * Builds SignedHttpRequest formatted JOSE Header from the\n   * JOSE Header options provided or previously set on the object and returns\n   * the stringified header object.\n   * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\n   * @param shrHeaderOptions\n   * @returns\n   */\n  static getShrHeaderString(shrHeaderOptions) {\n    // KeyID is required on the SHR header\n    if (!shrHeaderOptions.kid) {\n      throw JoseHeaderError.createMissingKidError();\n    }\n    // Alg is required on the SHR header\n    if (!shrHeaderOptions.alg) {\n      throw JoseHeaderError.createMissingAlgError();\n    }\n    const shrHeader = new JoseHeader({\n      // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n      typ: shrHeaderOptions.typ || JsonTypes.Pop,\n      kid: shrHeaderOptions.kid,\n      alg: shrHeaderOptions.alg\n    });\n    return JSON.stringify(shrHeader);\n  }\n}\nexport { JoseHeader };","map":{"version":3,"names":["JoseHeader","constructor","options","typ","alg","kid","getShrHeaderString","shrHeaderOptions"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\crypto\\JoseHeader.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { JoseHeaderError } from \"../error/JoseHeaderError\";\nimport { JsonTypes } from \"../utils/Constants\";\n\nexport type JoseHeaderOptions = {\n    typ?: JsonTypes;\n    alg?: string;\n    kid?: string;\n};\n\n/** @internal */\nexport class JoseHeader {\n    public typ?: JsonTypes;\n    public alg?: string;\n    public kid?: string;\n\n    constructor(options: JoseHeaderOptions) {\n        this.typ = options.typ;\n        this.alg = options.alg;\n        this.kid = options.kid;\n    }\n\n    /**\n     * Builds SignedHttpRequest formatted JOSE Header from the\n     * JOSE Header options provided or previously set on the object and returns\n     * the stringified header object.\n     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\n     * @param shrHeaderOptions\n     * @returns\n     */\n    static getShrHeaderString(shrHeaderOptions: JoseHeaderOptions): string {\n        // KeyID is required on the SHR header\n        if (!shrHeaderOptions.kid) {\n            throw JoseHeaderError.createMissingKidError();\n        }\n\n        // Alg is required on the SHR header\n        if (!shrHeaderOptions.alg) {\n            throw JoseHeaderError.createMissingAlgError();\n        }\n\n        const shrHeader = new JoseHeader({\n            // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n            typ: shrHeaderOptions.typ || JsonTypes.Pop,\n            kid: shrHeaderOptions.kid,\n            alg: shrHeaderOptions.alg,\n        });\n\n        return JSON.stringify(shrHeader);\n    }\n}\n"],"mappings":";;;;;;AAMA;AAEA;;;AAMA;AACA,MAAAA,UAAuB;EACZC,WAAMA,CAAAC,OAAU;IACZ,IAAE,CAAAC,GAAM,GAACD,OAAA,CAAAC,GAAA;IACT,IAAE,CAAAC,GAAM,GAACF,OAAA,CAAAE,GAAA;IAER,KAAAC,GAAA,GAAAH,OAA0B,CAAAG,GAAA;EAMtC;;;;;;;AAOG;AACH;EAoBH,OAAAC,mBAAAC,gBAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}