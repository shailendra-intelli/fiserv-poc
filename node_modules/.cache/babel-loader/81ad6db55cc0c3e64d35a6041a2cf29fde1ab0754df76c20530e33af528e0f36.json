{"ast":null,"code":"/*! @azure/msal-browser v3.9.0 2024-02-07 */\n'use strict';\n\nimport { CacheManager, CredentialType, CacheHelpers, AccountEntity, createClientAuthError, ClientAuthErrorCodes, Constants, PersistentCacheKeys, PerformanceEvents, StringUtils, ProtocolUtils, AuthToken, CacheRecord, DEFAULT_CRYPTO_IMPLEMENTATION, CcsCredentialType } from '@azure/msal-common';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { BrowserCacheLocation, StaticCacheKeys, InMemoryCacheKeys, TemporaryCacheKeys } from '../utils/BrowserConstants.mjs';\nimport { BrowserStorage } from './BrowserStorage.mjs';\nimport { MemoryStorage } from './MemoryStorage.mjs';\nimport { extractBrowserRequestState } from '../utils/BrowserProtocolUtils.mjs';\nimport { base64Decode } from '../encode/Base64Decode.mjs';\nimport { base64Encode } from '../encode/Base64Encode.mjs';\nimport { noTokenRequestCacheError, unableToParseTokenRequestCacheError, noCachedAuthorityError, interactionInProgress } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * This class implements the cache storage interface for MSAL through browser local or session storage.\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\n * parameters such as state and nonce, generally.\n */\nclass BrowserCacheManager extends CacheManager {\n  constructor(clientId, cacheConfig, cryptoImpl, logger, staticAuthorityOptions) {\n    super(clientId, cryptoImpl, logger, staticAuthorityOptions);\n    // Cookie life calculation (hours * minutes * seconds * ms)\n    this.COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\n    this.cacheConfig = cacheConfig;\n    this.logger = logger;\n    this.internalStorage = new MemoryStorage();\n    this.browserStorage = this.setupBrowserStorage(this.cacheConfig.cacheLocation);\n    this.temporaryCacheStorage = this.setupTemporaryCacheStorage(this.cacheConfig.temporaryCacheLocation, this.cacheConfig.cacheLocation);\n    // Migrate cache entries from older versions of MSAL.\n    if (cacheConfig.cacheMigrationEnabled) {\n      this.migrateCacheEntries();\n      this.createKeyMaps();\n    }\n  }\n  /**\n   * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\n   * @param cacheLocation\n   */\n  setupBrowserStorage(cacheLocation) {\n    switch (cacheLocation) {\n      case BrowserCacheLocation.LocalStorage:\n      case BrowserCacheLocation.SessionStorage:\n        try {\n          return new BrowserStorage(cacheLocation);\n        } catch (e) {\n          this.logger.verbose(e);\n          break;\n        }\n    }\n    this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\n    return new MemoryStorage();\n  }\n  /**\n   * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured temporaryCacheLocation.\n   * @param temporaryCacheLocation\n   * @param cacheLocation\n   */\n  setupTemporaryCacheStorage(temporaryCacheLocation, cacheLocation) {\n    switch (cacheLocation) {\n      case BrowserCacheLocation.LocalStorage:\n      case BrowserCacheLocation.SessionStorage:\n        try {\n          // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n          return new BrowserStorage(temporaryCacheLocation || BrowserCacheLocation.SessionStorage);\n        } catch (e) {\n          this.logger.verbose(e);\n          return this.internalStorage;\n        }\n      case BrowserCacheLocation.MemoryStorage:\n      default:\n        return this.internalStorage;\n    }\n  }\n  /**\n   * Migrate all old cache entries to new schema. No rollback supported.\n   * @param storeAuthStateInCookie\n   */\n  migrateCacheEntries() {\n    const idTokenKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ID_TOKEN}`;\n    const clientInfoKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.CLIENT_INFO}`;\n    const errorKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR}`;\n    const errorDescKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR_DESC}`;\n    const idTokenValue = this.browserStorage.getItem(idTokenKey);\n    const clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n    const errorValue = this.browserStorage.getItem(errorKey);\n    const errorDescValue = this.browserStorage.getItem(errorDescKey);\n    const values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\n    const keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\n    keysToMigrate.forEach((cacheKey, index) => this.migrateCacheEntry(cacheKey, values[index]));\n  }\n  /**\n   * Utility function to help with migration.\n   * @param newKey\n   * @param value\n   * @param storeAuthStateInCookie\n   */\n  migrateCacheEntry(newKey, value) {\n    if (value) {\n      this.setTemporaryCache(newKey, value, true);\n    }\n  }\n  /**\n   * Searches all cache entries for MSAL accounts and creates the account key map\n   * This is used to migrate users from older versions of MSAL which did not create the map.\n   * @returns\n   */\n  createKeyMaps() {\n    this.logger.trace(\"BrowserCacheManager - createKeyMaps called.\");\n    const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n    const tokenKeys = this.getItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);\n    if (accountKeys && tokenKeys) {\n      this.logger.verbose(\"BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.\");\n      // Key maps already exist, no need to iterate through cache\n      return;\n    }\n    const allKeys = this.browserStorage.getKeys();\n    allKeys.forEach(key => {\n      if (this.isCredentialKey(key)) {\n        // Get item, parse, validate and write key to map\n        const value = this.getItem(key);\n        if (value) {\n          const credObj = this.validateAndParseJson(value);\n          if (credObj && credObj.hasOwnProperty(\"credentialType\")) {\n            switch (credObj[\"credentialType\"]) {\n              case CredentialType.ID_TOKEN:\n                if (CacheHelpers.isIdTokenEntity(credObj)) {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - idToken with key: ${key} found, saving key to token key map`);\n                  const idTokenEntity = credObj;\n                  const newKey = this.updateCredentialCacheKey(key, idTokenEntity);\n                  this.addTokenKey(newKey, CredentialType.ID_TOKEN);\n                  return;\n                } else {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed idToken validation on key: ${key}`);\n                }\n                break;\n              case CredentialType.ACCESS_TOKEN:\n              case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                if (CacheHelpers.isAccessTokenEntity(credObj)) {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - accessToken with key: ${key} found, saving key to token key map`);\n                  const accessTokenEntity = credObj;\n                  const newKey = this.updateCredentialCacheKey(key, accessTokenEntity);\n                  this.addTokenKey(newKey, CredentialType.ACCESS_TOKEN);\n                  return;\n                } else {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed accessToken validation on key: ${key}`);\n                }\n                break;\n              case CredentialType.REFRESH_TOKEN:\n                if (CacheHelpers.isRefreshTokenEntity(credObj)) {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - refreshToken with key: ${key} found, saving key to token key map`);\n                  const refreshTokenEntity = credObj;\n                  const newKey = this.updateCredentialCacheKey(key, refreshTokenEntity);\n                  this.addTokenKey(newKey, CredentialType.REFRESH_TOKEN);\n                  return;\n                } else {\n                  this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.\");\n                  this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: ${key}`);\n                }\n                break;\n              // If credentialType isn't one of our predefined ones, it may not be an MSAL cache value. Ignore.\n            }\n          }\n        }\n      }\n      if (this.isAccountKey(key)) {\n        const value = this.getItem(key);\n        if (value) {\n          const accountObj = this.validateAndParseJson(value);\n          if (accountObj && AccountEntity.isAccountEntity(accountObj)) {\n            this.logger.trace(\"BrowserCacheManager:createKeyMaps - account found, saving key to account key map\");\n            this.logger.tracePii(`BrowserCacheManager:createKeyMaps - account with key: ${key} found, saving key to account key map`);\n            this.addAccountKeyToMap(key);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Parses passed value as JSON object, JSON.parse() will throw an error.\n   * @param input\n   */\n  validateAndParseJson(jsonValue) {\n    try {\n      const parsedJson = JSON.parse(jsonValue);\n      /**\n       * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\n       * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\n       * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\n       *\n       */\n      return parsedJson && typeof parsedJson === \"object\" ? parsedJson : null;\n    } catch (error) {\n      return null;\n    }\n  }\n  /**\n   * fetches the entry from the browser storage based off the key\n   * @param key\n   */\n  getItem(key) {\n    return this.browserStorage.getItem(key);\n  }\n  /**\n   * sets the entry in the browser storage\n   * @param key\n   * @param value\n   */\n  setItem(key, value) {\n    this.browserStorage.setItem(key, value);\n  }\n  /**\n   * fetch the account entity from the platform cache\n   * @param accountKey\n   */\n  getAccount(accountKey, logger) {\n    this.logger.trace(\"BrowserCacheManager.getAccount called\");\n    const accountEntity = this.getCachedAccountEntity(accountKey);\n    return this.updateOutdatedCachedAccount(accountKey, accountEntity, logger);\n  }\n  /**\n   * Reads account from cache, deserializes it into an account entity and returns it.\n   * If account is not found from the key, returns null and removes key from map.\n   * @param accountKey\n   * @returns\n   */\n  getCachedAccountEntity(accountKey) {\n    const serializedAccount = this.getItem(accountKey);\n    if (!serializedAccount) {\n      this.removeAccountKeyFromMap(accountKey);\n      return null;\n    }\n    const parsedAccount = this.validateAndParseJson(serializedAccount);\n    if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\n      this.removeAccountKeyFromMap(accountKey);\n      return null;\n    }\n    return CacheManager.toObject(new AccountEntity(), parsedAccount);\n  }\n  /**\n   * set account entity in the platform cache\n   * @param account\n   */\n  setAccount(account) {\n    this.logger.trace(\"BrowserCacheManager.setAccount called\");\n    const key = account.generateAccountKey();\n    this.setItem(key, JSON.stringify(account));\n    this.addAccountKeyToMap(key);\n  }\n  /**\n   * Returns the array of account keys currently cached\n   * @returns\n   */\n  getAccountKeys() {\n    this.logger.trace(\"BrowserCacheManager.getAccountKeys called\");\n    const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n    if (accountKeys) {\n      return JSON.parse(accountKeys);\n    }\n    this.logger.verbose(\"BrowserCacheManager.getAccountKeys - No account keys found\");\n    return [];\n  }\n  /**\n   * Add a new account to the key map\n   * @param key\n   */\n  addAccountKeyToMap(key) {\n    this.logger.trace(\"BrowserCacheManager.addAccountKeyToMap called\");\n    this.logger.tracePii(`BrowserCacheManager.addAccountKeyToMap called with key: ${key}`);\n    const accountKeys = this.getAccountKeys();\n    if (accountKeys.indexOf(key) === -1) {\n      // Only add key if it does not already exist in the map\n      accountKeys.push(key);\n      this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\n      this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key added\");\n    } else {\n      this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key already exists in map\");\n    }\n  }\n  /**\n   * Remove an account from the key map\n   * @param key\n   */\n  removeAccountKeyFromMap(key) {\n    this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap called\");\n    this.logger.tracePii(`BrowserCacheManager.removeAccountKeyFromMap called with key: ${key}`);\n    const accountKeys = this.getAccountKeys();\n    const removalIndex = accountKeys.indexOf(key);\n    if (removalIndex > -1) {\n      accountKeys.splice(removalIndex, 1);\n      this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\n      this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap account key removed\");\n    } else {\n      this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap key not found in existing map\");\n    }\n  }\n  /**\n   * Extends inherited removeAccount function to include removal of the account key from the map\n   * @param key\n   */\n  async removeAccount(key) {\n    void super.removeAccount(key);\n    this.removeAccountKeyFromMap(key);\n  }\n  /**\n   * Remove account entity from the platform cache if it's outdated\n   * @param accountKey\n   */\n  removeOutdatedAccount(accountKey) {\n    this.removeItem(accountKey);\n    this.removeAccountKeyFromMap(accountKey);\n  }\n  /**\n   * Removes given idToken from the cache and from the key map\n   * @param key\n   */\n  removeIdToken(key) {\n    super.removeIdToken(key);\n    this.removeTokenKey(key, CredentialType.ID_TOKEN);\n  }\n  /**\n   * Removes given accessToken from the cache and from the key map\n   * @param key\n   */\n  async removeAccessToken(key) {\n    void super.removeAccessToken(key);\n    this.removeTokenKey(key, CredentialType.ACCESS_TOKEN);\n  }\n  /**\n   * Removes given refreshToken from the cache and from the key map\n   * @param key\n   */\n  removeRefreshToken(key) {\n    super.removeRefreshToken(key);\n    this.removeTokenKey(key, CredentialType.REFRESH_TOKEN);\n  }\n  /**\n   * Gets the keys for the cached tokens associated with this clientId\n   * @returns\n   */\n  getTokenKeys() {\n    this.logger.trace(\"BrowserCacheManager.getTokenKeys called\");\n    const item = this.getItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);\n    if (item) {\n      const tokenKeys = this.validateAndParseJson(item);\n      if (tokenKeys && tokenKeys.hasOwnProperty(\"idToken\") && tokenKeys.hasOwnProperty(\"accessToken\") && tokenKeys.hasOwnProperty(\"refreshToken\")) {\n        return tokenKeys;\n      } else {\n        this.logger.error(\"BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.\");\n      }\n    } else {\n      this.logger.verbose(\"BrowserCacheManager.getTokenKeys - No token keys found\");\n    }\n    return {\n      idToken: [],\n      accessToken: [],\n      refreshToken: []\n    };\n  }\n  /**\n   * Adds the given key to the token key map\n   * @param key\n   * @param type\n   */\n  addTokenKey(key, type) {\n    this.logger.trace(\"BrowserCacheManager addTokenKey called\");\n    const tokenKeys = this.getTokenKeys();\n    switch (type) {\n      case CredentialType.ID_TOKEN:\n        if (tokenKeys.idToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - idToken added to map\");\n          tokenKeys.idToken.push(key);\n        }\n        break;\n      case CredentialType.ACCESS_TOKEN:\n        if (tokenKeys.accessToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - accessToken added to map\");\n          tokenKeys.accessToken.push(key);\n        }\n        break;\n      case CredentialType.REFRESH_TOKEN:\n        if (tokenKeys.refreshToken.indexOf(key) === -1) {\n          this.logger.info(\"BrowserCacheManager: addTokenKey - refreshToken added to map\");\n          tokenKeys.refreshToken.push(key);\n        }\n        break;\n      default:\n        this.logger.error(`BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: ${type}`);\n        throw createClientAuthError(ClientAuthErrorCodes.unexpectedCredentialType);\n    }\n    this.setItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));\n  }\n  /**\n   * Removes the given key from the token key map\n   * @param key\n   * @param type\n   */\n  removeTokenKey(key, type) {\n    this.logger.trace(\"BrowserCacheManager removeTokenKey called\");\n    const tokenKeys = this.getTokenKeys();\n    switch (type) {\n      case CredentialType.ID_TOKEN:\n        this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: ${key} from map`);\n        const idRemoval = tokenKeys.idToken.indexOf(key);\n        if (idRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken removed from map\");\n          tokenKeys.idToken.splice(idRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n        break;\n      case CredentialType.ACCESS_TOKEN:\n        this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: ${key} from map`);\n        const accessRemoval = tokenKeys.accessToken.indexOf(key);\n        if (accessRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken removed from map\");\n          tokenKeys.accessToken.splice(accessRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n        break;\n      case CredentialType.REFRESH_TOKEN:\n        this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: ${key} from map`);\n        const refreshRemoval = tokenKeys.refreshToken.indexOf(key);\n        if (refreshRemoval > -1) {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken removed from map\");\n          tokenKeys.refreshToken.splice(refreshRemoval, 1);\n        } else {\n          this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.\");\n        }\n        break;\n      default:\n        this.logger.error(`BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: ${type}`);\n        throw createClientAuthError(ClientAuthErrorCodes.unexpectedCredentialType);\n    }\n    this.setItem(`${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));\n  }\n  /**\n   * generates idToken entity from a string\n   * @param idTokenKey\n   */\n  getIdTokenCredential(idTokenKey) {\n    const value = this.getItem(idTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n      return null;\n    }\n    const parsedIdToken = this.validateAndParseJson(value);\n    if (!parsedIdToken || !CacheHelpers.isIdTokenEntity(parsedIdToken)) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\n    return parsedIdToken;\n  }\n  /**\n   * set IdToken credential to the platform cache\n   * @param idToken\n   */\n  setIdTokenCredential(idToken) {\n    this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n    const idTokenKey = CacheHelpers.generateCredentialKey(idToken);\n    this.setItem(idTokenKey, JSON.stringify(idToken));\n    this.addTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n  }\n  /**\n   * generates accessToken entity from a string\n   * @param key\n   */\n  getAccessTokenCredential(accessTokenKey) {\n    const value = this.getItem(accessTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n      return null;\n    }\n    const parsedAccessToken = this.validateAndParseJson(value);\n    if (!parsedAccessToken || !CacheHelpers.isAccessTokenEntity(parsedAccessToken)) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\n    return parsedAccessToken;\n  }\n  /**\n   * set accessToken credential to the platform cache\n   * @param accessToken\n   */\n  setAccessTokenCredential(accessToken) {\n    this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\n    const accessTokenKey = CacheHelpers.generateCredentialKey(accessToken);\n    this.setItem(accessTokenKey, JSON.stringify(accessToken));\n    this.addTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n  }\n  /**\n   * generates refreshToken entity from a string\n   * @param refreshTokenKey\n   */\n  getRefreshTokenCredential(refreshTokenKey) {\n    const value = this.getItem(refreshTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n      return null;\n    }\n    const parsedRefreshToken = this.validateAndParseJson(value);\n    if (!parsedRefreshToken || !CacheHelpers.isRefreshTokenEntity(parsedRefreshToken)) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\n    return parsedRefreshToken;\n  }\n  /**\n   * set refreshToken credential to the platform cache\n   * @param refreshToken\n   */\n  setRefreshTokenCredential(refreshToken) {\n    this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\n    const refreshTokenKey = CacheHelpers.generateCredentialKey(refreshToken);\n    this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n    this.addTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n  }\n  /**\n   * fetch appMetadata entity from the platform cache\n   * @param appMetadataKey\n   */\n  getAppMetadata(appMetadataKey) {\n    const value = this.getItem(appMetadataKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n    const parsedMetadata = this.validateAndParseJson(value);\n    if (!parsedMetadata || !CacheHelpers.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n    return parsedMetadata;\n  }\n  /**\n   * set appMetadata entity to the platform cache\n   * @param appMetadata\n   */\n  setAppMetadata(appMetadata) {\n    this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n    const appMetadataKey = CacheHelpers.generateAppMetadataKey(appMetadata);\n    this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n  }\n  /**\n   * fetch server telemetry entity from the platform cache\n   * @param serverTelemetryKey\n   */\n  getServerTelemetry(serverTelemetryKey) {\n    const value = this.getItem(serverTelemetryKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n    const parsedEntity = this.validateAndParseJson(value);\n    if (!parsedEntity || !CacheHelpers.isServerTelemetryEntity(serverTelemetryKey, parsedEntity)) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n    return parsedEntity;\n  }\n  /**\n   * set server telemetry entity to the platform cache\n   * @param serverTelemetryKey\n   * @param serverTelemetry\n   */\n  setServerTelemetry(serverTelemetryKey, serverTelemetry) {\n    this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n    this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n  }\n  /**\n   *\n   */\n  getAuthorityMetadata(key) {\n    const value = this.internalStorage.getItem(key);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\n      return null;\n    }\n    const parsedMetadata = this.validateAndParseJson(value);\n    if (parsedMetadata && CacheHelpers.isAuthorityMetadataEntity(key, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\n      return parsedMetadata;\n    }\n    return null;\n  }\n  /**\n   *\n   */\n  getAuthorityMetadataKeys() {\n    const allKeys = this.internalStorage.getKeys();\n    return allKeys.filter(key => {\n      return this.isAuthorityMetadata(key);\n    });\n  }\n  /**\n   * Sets wrapper metadata in memory\n   * @param wrapperSKU\n   * @param wrapperVersion\n   */\n  setWrapperMetadata(wrapperSKU, wrapperVersion) {\n    this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\n    this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);\n  }\n  /**\n   * Returns wrapper metadata from in-memory storage\n   */\n  getWrapperMetadata() {\n    const sku = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) || Constants.EMPTY_STRING;\n    const version = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) || Constants.EMPTY_STRING;\n    return [sku, version];\n  }\n  /**\n   *\n   * @param entity\n   */\n  setAuthorityMetadata(key, entity) {\n    this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n    this.internalStorage.setItem(key, JSON.stringify(entity));\n  }\n  /**\n   * Gets the active account\n   */\n  getActiveAccount() {\n    const activeAccountKeyFilters = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n    const activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\n    if (!activeAccountValueFilters) {\n      // if new active account cache type isn't found, it's an old version, so look for that instead\n      this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema\");\n      const activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n      const activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\n      if (!activeAccountValueLocal) {\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\n        return null;\n      }\n      const activeAccount = this.getAccountInfoFilteredBy({\n        localAccountId: activeAccountValueLocal\n      });\n      if (activeAccount) {\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: Legacy active account cache schema found\");\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: Adding active account filters cache schema\");\n        this.setActiveAccount(activeAccount);\n        return activeAccount;\n      }\n      return null;\n    }\n    const activeAccountValueObj = this.validateAndParseJson(activeAccountValueFilters);\n    if (activeAccountValueObj) {\n      this.logger.trace(\"BrowserCacheManager.getActiveAccount: Active account filters schema found\");\n      return this.getAccountInfoFilteredBy({\n        homeAccountId: activeAccountValueObj.homeAccountId,\n        localAccountId: activeAccountValueObj.localAccountId,\n        tenantId: activeAccountValueObj.tenantId\n      });\n    }\n    this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\n    return null;\n  }\n  /**\n   * Sets the active account's localAccountId in cache\n   * @param account\n   */\n  setActiveAccount(account) {\n    const activeAccountKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n    const activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n    if (account) {\n      this.logger.verbose(\"setActiveAccount: Active account set\");\n      const activeAccountValue = {\n        homeAccountId: account.homeAccountId,\n        localAccountId: account.localAccountId,\n        tenantId: account.tenantId\n      };\n      this.browserStorage.setItem(activeAccountKey, JSON.stringify(activeAccountValue));\n      this.browserStorage.setItem(activeAccountKeyLocal, account.localAccountId);\n    } else {\n      this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\n      this.browserStorage.removeItem(activeAccountKey);\n      this.browserStorage.removeItem(activeAccountKeyLocal);\n    }\n  }\n  /**\n   * fetch throttling entity from the platform cache\n   * @param throttlingCacheKey\n   */\n  getThrottlingCache(throttlingCacheKey) {\n    const value = this.getItem(throttlingCacheKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n    const parsedThrottlingCache = this.validateAndParseJson(value);\n    if (!parsedThrottlingCache || !CacheHelpers.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n    return parsedThrottlingCache;\n  }\n  /**\n   * set throttling entity to the platform cache\n   * @param throttlingCacheKey\n   * @param throttlingCache\n   */\n  setThrottlingCache(throttlingCacheKey, throttlingCache) {\n    this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n    this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n  }\n  /**\n   * Gets cache item with given key.\n   * Will retrieve from cookies if storeAuthStateInCookie is set to true.\n   * @param key\n   */\n  getTemporaryCache(cacheKey, generateKey) {\n    const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      const itemCookie = this.getItemCookie(key);\n      if (itemCookie) {\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\n        return itemCookie;\n      }\n    }\n    const value = this.temporaryCacheStorage.getItem(key);\n    if (!value) {\n      // If temp cache item not found in session/memory, check local storage for items set by old versions\n      if (this.cacheConfig.cacheLocation === BrowserCacheLocation.LocalStorage) {\n        const item = this.browserStorage.getItem(key);\n        if (item) {\n          this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\n          return item;\n        }\n      }\n      this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\n    return value;\n  }\n  /**\n   * Sets the cache item with the key and value given.\n   * Stores in cookie if storeAuthStateInCookie is set to true.\n   * This can cause cookie overflow if used incorrectly.\n   * @param key\n   * @param value\n   */\n  setTemporaryCache(cacheKey, value, generateKey) {\n    const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n    this.temporaryCacheStorage.setItem(key, value);\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\n      this.setItemCookie(key, value);\n    }\n  }\n  /**\n   * Removes the cache item with the given key.\n   * Will also clear the cookie item if storeAuthStateInCookie is set to true.\n   * @param key\n   */\n  removeItem(key) {\n    this.browserStorage.removeItem(key);\n    this.temporaryCacheStorage.removeItem(key);\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\n      this.clearItemCookie(key);\n    }\n  }\n  /**\n   * Checks whether key is in cache.\n   * @param key\n   */\n  containsKey(key) {\n    return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);\n  }\n  /**\n   * Gets all keys in window.\n   */\n  getKeys() {\n    return [...this.browserStorage.getKeys(), ...this.temporaryCacheStorage.getKeys()];\n  }\n  /**\n   * Clears all cache entries created by MSAL.\n   */\n  async clear() {\n    // Removes all accounts and their credentials\n    await this.removeAllAccounts();\n    this.removeAppMetadata();\n    // Removes all remaining MSAL cache items\n    this.getKeys().forEach(cacheKey => {\n      // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\n      if ((this.browserStorage.containsKey(cacheKey) || this.temporaryCacheStorage.containsKey(cacheKey)) && (cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 || cacheKey.indexOf(this.clientId) !== -1)) {\n        this.removeItem(cacheKey);\n      }\n    });\n    this.internalStorage.clear();\n  }\n  /**\n   * Clears all access tokes that have claims prior to saving the current one\n   * @param performanceClient {IPerformanceClient}\n   * @returns\n   */\n  async clearTokensAndKeysWithClaims(performanceClient) {\n    performanceClient.addQueueMeasurement(PerformanceEvents.ClearTokensAndKeysWithClaims);\n    const tokenKeys = this.getTokenKeys();\n    const removedAccessTokens = [];\n    tokenKeys.accessToken.forEach(key => {\n      // if the access token has claims in its key, remove the token key and the token\n      const credential = this.getAccessTokenCredential(key);\n      if (credential?.requestedClaimsHash && key.includes(credential.requestedClaimsHash.toLowerCase())) {\n        removedAccessTokens.push(this.removeAccessToken(key));\n      }\n    });\n    await Promise.all(removedAccessTokens);\n    // warn if any access tokens are removed\n    if (removedAccessTokens.length > 0) {\n      this.logger.warning(`${removedAccessTokens.length} access tokens with claims in the cache keys have been removed from the cache.`);\n    }\n  }\n  /**\n   * Add value to cookies\n   * @param cookieName\n   * @param cookieValue\n   * @param expires\n   */\n  setItemCookie(cookieName, cookieValue, expires) {\n    let cookieStr = `${encodeURIComponent(cookieName)}=${encodeURIComponent(cookieValue)};path=/;SameSite=Lax;`;\n    if (expires) {\n      const expireTime = this.getCookieExpirationTime(expires);\n      cookieStr += `expires=${expireTime};`;\n    }\n    if (this.cacheConfig.secureCookies) {\n      cookieStr += \"Secure;\";\n    }\n    document.cookie = cookieStr;\n  }\n  /**\n   * Get one item by key from cookies\n   * @param cookieName\n   */\n  getItemCookie(cookieName) {\n    const name = `${encodeURIComponent(cookieName)}=`;\n    const cookieList = document.cookie.split(\";\");\n    for (let i = 0; i < cookieList.length; i++) {\n      let cookie = cookieList[i];\n      while (cookie.charAt(0) === \" \") {\n        cookie = cookie.substring(1);\n      }\n      if (cookie.indexOf(name) === 0) {\n        return decodeURIComponent(cookie.substring(name.length, cookie.length));\n      }\n    }\n    return Constants.EMPTY_STRING;\n  }\n  /**\n   * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\n   */\n  clearMsalCookies() {\n    const cookiePrefix = `${Constants.CACHE_PREFIX}.${this.clientId}`;\n    const cookieList = document.cookie.split(\";\");\n    cookieList.forEach(cookie => {\n      while (cookie.charAt(0) === \" \") {\n        // eslint-disable-next-line no-param-reassign\n        cookie = cookie.substring(1);\n      }\n      if (cookie.indexOf(cookiePrefix) === 0) {\n        const cookieKey = cookie.split(\"=\")[0];\n        this.clearItemCookie(cookieKey);\n      }\n    });\n  }\n  /**\n   * Clear an item in the cookies by key\n   * @param cookieName\n   */\n  clearItemCookie(cookieName) {\n    this.setItemCookie(cookieName, Constants.EMPTY_STRING, -1);\n  }\n  /**\n   * Get cookie expiration time\n   * @param cookieLifeDays\n   */\n  getCookieExpirationTime(cookieLifeDays) {\n    const today = new Date();\n    const expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);\n    return expr.toUTCString();\n  }\n  /**\n   * Gets the cache object referenced by the browser\n   */\n  getCache() {\n    return this.browserStorage;\n  }\n  /**\n   * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser\n   */\n  setCache() {\n    // sets nothing\n  }\n  /**\n   * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\n   * @param key\n   * @param addInstanceId\n   */\n  generateCacheKey(key) {\n    const generatedKey = this.validateAndParseJson(key);\n    if (!generatedKey) {\n      if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {\n        return key;\n      }\n      return `${Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\n    }\n    return JSON.stringify(key);\n  }\n  /**\n   * Create authorityKey to cache authority\n   * @param state\n   */\n  generateAuthorityKey(stateString) {\n    const {\n      libraryState: {\n        id: stateId\n      }\n    } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n    return this.generateCacheKey(`${TemporaryCacheKeys.AUTHORITY}.${stateId}`);\n  }\n  /**\n   * Create Nonce key to cache nonce\n   * @param state\n   */\n  generateNonceKey(stateString) {\n    const {\n      libraryState: {\n        id: stateId\n      }\n    } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n    return this.generateCacheKey(`${TemporaryCacheKeys.NONCE_IDTOKEN}.${stateId}`);\n  }\n  /**\n   * Creates full cache key for the request state\n   * @param stateString State string for the request\n   */\n  generateStateKey(stateString) {\n    // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n    const {\n      libraryState: {\n        id: stateId\n      }\n    } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n    return this.generateCacheKey(`${TemporaryCacheKeys.REQUEST_STATE}.${stateId}`);\n  }\n  /**\n   * Gets the cached authority based on the cached state. Returns empty if no cached state found.\n   */\n  getCachedAuthority(cachedState) {\n    const stateCacheKey = this.generateStateKey(cachedState);\n    const state = this.getTemporaryCache(stateCacheKey);\n    if (!state) {\n      return null;\n    }\n    const authorityCacheKey = this.generateAuthorityKey(state);\n    return this.getTemporaryCache(authorityCacheKey);\n  }\n  /**\n   * Updates account, authority, and state in cache\n   * @param serverAuthenticationRequest\n   * @param account\n   */\n  updateCacheEntries(state, nonce, authorityInstance, loginHint, account) {\n    this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\n    // Cache the request state\n    const stateCacheKey = this.generateStateKey(state);\n    this.setTemporaryCache(stateCacheKey, state, false);\n    // Cache the nonce\n    const nonceCacheKey = this.generateNonceKey(state);\n    this.setTemporaryCache(nonceCacheKey, nonce, false);\n    // Cache authorityKey\n    const authorityCacheKey = this.generateAuthorityKey(state);\n    this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n    if (account) {\n      const ccsCredential = {\n        credential: account.homeAccountId,\n        type: CcsCredentialType.HOME_ACCOUNT_ID\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    } else if (loginHint) {\n      const ccsCredential = {\n        credential: loginHint,\n        type: CcsCredentialType.UPN\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    }\n  }\n  /**\n   * Reset all temporary cache items\n   * @param state\n   */\n  resetRequestCache(state) {\n    this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\n    // check state and remove associated cache items\n    if (state) {\n      this.getKeys().forEach(key => {\n        if (key.indexOf(state) !== -1) {\n          this.removeItem(key);\n        }\n      });\n      // delete generic interactive request parameters\n      this.removeItem(this.generateStateKey(state));\n      this.removeItem(this.generateNonceKey(state));\n      this.removeItem(this.generateAuthorityKey(state));\n    }\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST));\n    this.setInteractionInProgress(false);\n  }\n  /**\n   * Removes temporary cache for the provided state\n   * @param stateString\n   */\n  cleanRequestByState(stateString) {\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\n    // Interaction is completed - remove interaction status.\n    if (stateString) {\n      const stateKey = this.generateStateKey(stateString);\n      const cachedState = this.temporaryCacheStorage.getItem(stateKey);\n      this.logger.infoPii(`BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`);\n      this.resetRequestCache(cachedState || Constants.EMPTY_STRING);\n    }\n    this.clearMsalCookies();\n  }\n  /**\n   * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\n   * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\n   * @param interactionType\n   */\n  cleanRequestByInteractionType(interactionType) {\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\");\n    // Loop through all keys to find state key\n    this.getKeys().forEach(key => {\n      // If this key is not the state key, move on\n      if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\n        return;\n      }\n      // Retrieve state value, return if not a valid value\n      const stateValue = this.temporaryCacheStorage.getItem(key);\n      if (!stateValue) {\n        return;\n      }\n      // Extract state and ensure it matches given InteractionType, then clean request cache\n      const parsedState = extractBrowserRequestState(this.cryptoImpl, stateValue);\n      if (parsedState && parsedState.interactionType === interactionType) {\n        this.logger.infoPii(`BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`);\n        this.resetRequestCache(stateValue);\n      }\n    });\n    this.clearMsalCookies();\n    this.setInteractionInProgress(false);\n  }\n  cacheCodeRequest(authCodeRequest) {\n    this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n    const encodedValue = base64Encode(JSON.stringify(authCodeRequest));\n    this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\n  }\n  /**\n   * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\n   */\n  getCachedRequest(state) {\n    this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\n    // Get token request from cache and parse as TokenExchangeParameters.\n    const encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);\n    if (!encodedTokenRequest) {\n      throw createBrowserAuthError(noTokenRequestCacheError);\n    }\n    let parsedRequest;\n    try {\n      parsedRequest = JSON.parse(base64Decode(encodedTokenRequest));\n    } catch (e) {\n      this.logger.errorPii(`Attempted to parse: ${encodedTokenRequest}`);\n      this.logger.error(`Parsing cached token request threw with error: ${e}`);\n      throw createBrowserAuthError(unableToParseTokenRequestCacheError);\n    }\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n    // Get cached authority and use if no authority is cached with request.\n    if (!parsedRequest.authority) {\n      const authorityCacheKey = this.generateAuthorityKey(state);\n      const cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n      if (!cachedAuthority) {\n        throw createBrowserAuthError(noCachedAuthorityError);\n      }\n      parsedRequest.authority = cachedAuthority;\n    }\n    return parsedRequest;\n  }\n  /**\n   * Gets cached native request for redirect flows\n   */\n  getCachedNativeRequest() {\n    this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\n    const cachedRequest = this.getTemporaryCache(TemporaryCacheKeys.NATIVE_REQUEST, true);\n    if (!cachedRequest) {\n      this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest: No cached native request found\");\n      return null;\n    }\n    const parsedRequest = this.validateAndParseJson(cachedRequest);\n    if (!parsedRequest) {\n      this.logger.error(\"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\");\n      return null;\n    }\n    return parsedRequest;\n  }\n  isInteractionInProgress(matchClientId) {\n    const clientId = this.getInteractionInProgress();\n    if (matchClientId) {\n      return clientId === this.clientId;\n    } else {\n      return !!clientId;\n    }\n  }\n  getInteractionInProgress() {\n    const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n    return this.getTemporaryCache(key, false);\n  }\n  setInteractionInProgress(inProgress) {\n    // Ensure we don't overwrite interaction in progress for a different clientId\n    const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n    if (inProgress) {\n      if (this.getInteractionInProgress()) {\n        throw createBrowserAuthError(interactionInProgress);\n      } else {\n        // No interaction is in progress\n        this.setTemporaryCache(key, this.clientId, false);\n      }\n    } else if (!inProgress && this.getInteractionInProgress() === this.clientId) {\n      this.removeItem(key);\n    }\n  }\n  /**\n   * Returns username retrieved from ADAL or MSAL v1 idToken\n   * @deprecated\n   */\n  getLegacyLoginHint() {\n    // Only check for adal/msal token if no SSO params are being used\n    const adalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ADAL_ID_TOKEN);\n    if (adalIdTokenString) {\n      this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\n      this.logger.verbose(\"Cached ADAL id token retrieved.\");\n    }\n    // Check for cached MSAL v1 id token\n    const msalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ID_TOKEN, true);\n    if (msalIdTokenString) {\n      this.removeItem(this.generateCacheKey(PersistentCacheKeys.ID_TOKEN));\n      this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\n    }\n    const cachedIdTokenString = msalIdTokenString || adalIdTokenString;\n    if (cachedIdTokenString) {\n      const idTokenClaims = AuthToken.extractTokenClaims(cachedIdTokenString, base64Decode);\n      if (idTokenClaims.preferred_username) {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\");\n        return idTokenClaims.preferred_username;\n      } else if (idTokenClaims.upn) {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\");\n        return idTokenClaims.upn;\n      } else {\n        this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\");\n      }\n    }\n    return null;\n  }\n  /**\n   * Updates a credential's cache key if the current cache key is outdated\n   */\n  updateCredentialCacheKey(currentCacheKey, credential) {\n    const updatedCacheKey = CacheHelpers.generateCredentialKey(credential);\n    if (currentCacheKey !== updatedCacheKey) {\n      const cacheItem = this.getItem(currentCacheKey);\n      if (cacheItem) {\n        this.removeItem(currentCacheKey);\n        this.setItem(updatedCacheKey, cacheItem);\n        this.logger.verbose(`Updated an outdated ${credential.credentialType} cache key`);\n        return updatedCacheKey;\n      } else {\n        this.logger.error(`Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`);\n      }\n    }\n    return currentCacheKey;\n  }\n  /**\n   * Returns application id as redirect context during AcquireTokenRedirect flow.\n   */\n  getRedirectRequestContext() {\n    return this.getTemporaryCache(TemporaryCacheKeys.REDIRECT_CONTEXT, true);\n  }\n  /**\n   * Sets application id as the redirect context during AcquireTokenRedirect flow.\n   * @param value\n   */\n  setRedirectRequestContext(value) {\n    this.setTemporaryCache(TemporaryCacheKeys.REDIRECT_CONTEXT, value, true);\n  }\n  /**\n   * Builds credential entities from AuthenticationResult object and saves the resulting credentials to the cache\n   * @param result\n   * @param request\n   */\n  async hydrateCache(result, request) {\n    const idTokenEntity = CacheHelpers.createIdTokenEntity(result.account?.homeAccountId, result.account?.environment, result.idToken, this.clientId, result.tenantId);\n    let claimsHash;\n    if (request.claims) {\n      claimsHash = await this.cryptoImpl.hashString(request.claims);\n    }\n    const accessTokenEntity = CacheHelpers.createAccessTokenEntity(result.account?.homeAccountId, result.account.environment, result.accessToken, this.clientId, result.tenantId, result.scopes.join(\" \"), result.expiresOn?.getTime() || 0, result.extExpiresOn?.getTime() || 0, base64Decode, undefined,\n    // refreshOn\n    result.tokenType, undefined,\n    // userAssertionHash\n    request.sshKid, request.claims, claimsHash);\n    const cacheRecord = new CacheRecord(undefined, idTokenEntity, accessTokenEntity);\n    return this.saveCacheRecord(cacheRecord);\n  }\n}\nconst DEFAULT_BROWSER_CACHE_MANAGER = (clientId, logger) => {\n  const cacheOptions = {\n    cacheLocation: BrowserCacheLocation.MemoryStorage,\n    temporaryCacheLocation: BrowserCacheLocation.MemoryStorage,\n    storeAuthStateInCookie: false,\n    secureCookies: false,\n    cacheMigrationEnabled: false,\n    claimsBasedCachingEnabled: false\n  };\n  return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);\n};\nexport { BrowserCacheManager, DEFAULT_BROWSER_CACHE_MANAGER };","map":{"version":3,"names":["BrowserCacheManager","CacheManager","constructor","clientId","cacheConfig","cryptoImpl","logger","staticAuthorityOptions","COOKIE_LIFE_MULTIPLIER","internalStorage","MemoryStorage","browserStorage","setupBrowserStorage","cacheLocation","temporaryCacheStorage","setupTemporaryCacheStorage","temporaryCacheLocation","cacheMigrationEnabled","migrateCacheEntries","createKeyMaps","BrowserCacheLocation","LocalStorage","SessionStorage","BrowserStorage","e","verbose","idTokenKey","Constants","CACHE_PREFIX","PersistentCacheKeys","ID_TOKEN","clientInfoKey","CLIENT_INFO","errorKey","ERROR","errorDescKey","ERROR_DESC","idTokenValue","getItem","clientInfoValue","errorValue","errorDescValue","values","keysToMigrate","forEach","cacheKey","index","migrateCacheEntry","newKey","value","setTemporaryCache","trace","accountKeys","StaticCacheKeys","ACCOUNT_KEYS","tokenKeys","TOKEN_KEYS","allKeys","getKeys","key","isCredentialKey","credObj","validateAndParseJson","hasOwnProperty","CredentialType","CacheHelpers","isIdTokenEntity","tracePii","idTokenEntity","updateCredentialCacheKey","addTokenKey","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","isAccessTokenEntity","accessTokenEntity","REFRESH_TOKEN","isRefreshTokenEntity","refreshTokenEntity","isAccountKey","accountObj","AccountEntity","isAccountEntity","addAccountKeyToMap","jsonValue","parsedJson","JSON","parse","error","setItem","getAccount","accountKey","accountEntity","getCachedAccountEntity","updateOutdatedCachedAccount","serializedAccount","removeAccountKeyFromMap","parsedAccount","toObject","setAccount","account","generateAccountKey","stringify","getAccountKeys","indexOf","push","removalIndex","splice","removeAccount","removeOutdatedAccount","removeItem","removeIdToken","removeTokenKey","removeAccessToken","removeRefreshToken","getTokenKeys","item","idToken","accessToken","refreshToken","type","info","createClientAuthError","ClientAuthErrorCodes","unexpectedCredentialType","infoPii","idRemoval","accessRemoval","refreshRemoval","getIdTokenCredential","parsedIdToken","setIdTokenCredential","generateCredentialKey","getAccessTokenCredential","accessTokenKey","parsedAccessToken","setAccessTokenCredential","getRefreshTokenCredential","refreshTokenKey","parsedRefreshToken","setRefreshTokenCredential","getAppMetadata","appMetadataKey","parsedMetadata","isAppMetadataEntity","setAppMetadata","appMetadata","generateAppMetadataKey","getServerTelemetry","serverTelemetryKey","parsedEntity","isServerTelemetryEntity","setServerTelemetry","serverTelemetry","getAuthorityMetadata","isAuthorityMetadataEntity","getAuthorityMetadataKeys","filter","isAuthorityMetadata","setWrapperMetadata","wrapperSKU","wrapperVersion","InMemoryCacheKeys","WRAPPER_SKU","WRAPPER_VER","getWrapperMetadata","sku","EMPTY_STRING","version","setAuthorityMetadata","entity","getActiveAccount","activeAccountKeyFilters","generateCacheKey","ACTIVE_ACCOUNT_FILTERS","activeAccountValueFilters","activeAccountKeyLocal","ACTIVE_ACCOUNT","activeAccountValueLocal","activeAccount","getAccountInfoFilteredBy","localAccountId","setActiveAccount","activeAccountValueObj","homeAccountId","tenantId","activeAccountKey","activeAccountValue","getThrottlingCache","throttlingCacheKey","parsedThrottlingCache","isThrottlingEntity","setThrottlingCache","throttlingCache","getTemporaryCache","generateKey","storeAuthStateInCookie","itemCookie","getItemCookie","setItemCookie","clearItemCookie","containsKey","clear","removeAllAccounts","removeAppMetadata","clearTokensAndKeysWithClaims","performanceClient","addQueueMeasurement","PerformanceEvents","ClearTokensAndKeysWithClaims","removedAccessTokens","credential","requestedClaimsHash","includes","toLowerCase","Promise","all","length","warning","cookieName","cookieValue","expires","cookieStr","encodeURIComponent","expireTime","getCookieExpirationTime","secureCookies","document","cookie","name","cookieList","split","i","charAt","substring","decodeURIComponent","clearMsalCookies","cookiePrefix","cookieKey","cookieLifeDays","today","Date","expr","getTime","toUTCString","getCache","setCache","generatedKey","StringUtils","startsWith","ADAL_ID_TOKEN","generateAuthorityKey","stateString","libraryState","id","stateId","ProtocolUtils","parseRequestState","TemporaryCacheKeys","AUTHORITY","generateNonceKey","NONCE_IDTOKEN","generateStateKey","REQUEST_STATE","getCachedAuthority","cachedState","stateCacheKey","state","authorityCacheKey","updateCacheEntries","nonce","authorityInstance","loginHint","nonceCacheKey","ccsCredential","CcsCredentialType","HOME_ACCOUNT_ID","CCS_CREDENTIAL","UPN","resetRequestCache","REQUEST_PARAMS","ORIGIN_URI","URL_HASH","CORRELATION_ID","NATIVE_REQUEST","setInteractionInProgress","cleanRequestByState","stateKey","cleanRequestByInteractionType","interactionType","stateValue","parsedState","extractBrowserRequestState","cacheCodeRequest","authCodeRequest","encodedValue","base64Encode","getCachedRequest","encodedTokenRequest","createBrowserAuthError","noTokenRequestCacheError","parsedRequest","base64Decode","errorPii","unableToParseTokenRequestCacheError","authority","cachedAuthority","noCachedAuthorityError","getCachedNativeRequest","cachedRequest","isInteractionInProgress","matchClientId","getInteractionInProgress","INTERACTION_STATUS_KEY","inProgress","interactionInProgress","getLegacyLoginHint","adalIdTokenString","msalIdTokenString","cachedIdTokenString","idTokenClaims","AuthToken","extractTokenClaims","preferred_username","upn","currentCacheKey","updatedCacheKey","cacheItem","credentialType","getRedirectRequestContext","REDIRECT_CONTEXT","setRedirectRequestContext","hydrateCache","result","request","createIdTokenEntity","environment","claimsHash","claims","hashString","createAccessTokenEntity","scopes","join","expiresOn","extExpiresOn","undefined","tokenType","sshKid","cacheRecord","CacheRecord","saveCacheRecord","DEFAULT_BROWSER_CACHE_MANAGER","cacheOptions","claimsBasedCachingEnabled","DEFAULT_CRYPTO_IMPLEMENTATION"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\cache\\BrowserCacheManager.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    Constants,\n    PersistentCacheKeys,\n    StringUtils,\n    CommonAuthorizationCodeRequest,\n    ICrypto,\n    AccountEntity,\n    IdTokenEntity,\n    AccessTokenEntity,\n    RefreshTokenEntity,\n    AppMetadataEntity,\n    CacheManager,\n    ServerTelemetryEntity,\n    ThrottlingEntity,\n    ProtocolUtils,\n    Logger,\n    AuthorityMetadataEntity,\n    DEFAULT_CRYPTO_IMPLEMENTATION,\n    AccountInfo,\n    ActiveAccountFilters,\n    CcsCredential,\n    CcsCredentialType,\n    AuthToken,\n    ValidCredentialType,\n    TokenKeys,\n    CredentialType,\n    CacheRecord,\n    AuthenticationScheme,\n    createClientAuthError,\n    ClientAuthErrorCodes,\n    PerformanceEvents,\n    IPerformanceClient,\n    StaticAuthorityOptions,\n    CacheHelpers,\n} from \"@azure/msal-common\";\nimport { CacheOptions } from \"../config/Configuration\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport {\n    BrowserCacheLocation,\n    InteractionType,\n    TemporaryCacheKeys,\n    InMemoryCacheKeys,\n    StaticCacheKeys,\n} from \"../utils/BrowserConstants\";\nimport { BrowserStorage } from \"./BrowserStorage\";\nimport { MemoryStorage } from \"./MemoryStorage\";\nimport { IWindowStorage } from \"./IWindowStorage\";\nimport { extractBrowserRequestState } from \"../utils/BrowserProtocolUtils\";\nimport { NativeTokenRequest } from \"../broker/nativeBroker/NativeRequest\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { base64Decode } from \"../encode/Base64Decode\";\nimport { base64Encode } from \"../encode/Base64Encode\";\n\n/**\n * This class implements the cache storage interface for MSAL through browser local or session storage.\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\n * parameters such as state and nonce, generally.\n */\nexport class BrowserCacheManager extends CacheManager {\n    // Cache configuration, either set by user or default values.\n    protected cacheConfig: Required<CacheOptions>;\n    // Window storage object (either local or sessionStorage)\n    protected browserStorage: IWindowStorage<string>;\n    // Internal in-memory storage object used for data used by msal that does not need to persist across page loads\n    protected internalStorage: MemoryStorage<string>;\n    // Temporary cache\n    protected temporaryCacheStorage: IWindowStorage<string>;\n    // Logger instance\n    protected logger: Logger;\n\n    // Cookie life calculation (hours * minutes * seconds * ms)\n    protected readonly COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\n\n    constructor(\n        clientId: string,\n        cacheConfig: Required<CacheOptions>,\n        cryptoImpl: ICrypto,\n        logger: Logger,\n        staticAuthorityOptions?: StaticAuthorityOptions\n    ) {\n        super(clientId, cryptoImpl, logger, staticAuthorityOptions);\n        this.cacheConfig = cacheConfig;\n        this.logger = logger;\n        this.internalStorage = new MemoryStorage();\n        this.browserStorage = this.setupBrowserStorage(\n            this.cacheConfig.cacheLocation\n        );\n        this.temporaryCacheStorage = this.setupTemporaryCacheStorage(\n            this.cacheConfig.temporaryCacheLocation,\n            this.cacheConfig.cacheLocation\n        );\n\n        // Migrate cache entries from older versions of MSAL.\n        if (cacheConfig.cacheMigrationEnabled) {\n            this.migrateCacheEntries();\n            this.createKeyMaps();\n        }\n    }\n\n    /**\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\n     * @param cacheLocation\n     */\n    protected setupBrowserStorage(\n        cacheLocation: BrowserCacheLocation | string\n    ): IWindowStorage<string> {\n        switch (cacheLocation) {\n            case BrowserCacheLocation.LocalStorage:\n            case BrowserCacheLocation.SessionStorage:\n                try {\n                    return new BrowserStorage(cacheLocation);\n                } catch (e) {\n                    this.logger.verbose(e as string);\n                    break;\n                }\n            case BrowserCacheLocation.MemoryStorage:\n            default:\n                break;\n        }\n        this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\n        return new MemoryStorage();\n    }\n\n    /**\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured temporaryCacheLocation.\n     * @param temporaryCacheLocation\n     * @param cacheLocation\n     */\n    protected setupTemporaryCacheStorage(\n        temporaryCacheLocation: BrowserCacheLocation | string,\n        cacheLocation: BrowserCacheLocation | string\n    ): IWindowStorage<string> {\n        switch (cacheLocation) {\n            case BrowserCacheLocation.LocalStorage:\n            case BrowserCacheLocation.SessionStorage:\n                try {\n                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n                    return new BrowserStorage(\n                        temporaryCacheLocation ||\n                            BrowserCacheLocation.SessionStorage\n                    );\n                } catch (e) {\n                    this.logger.verbose(e as string);\n                    return this.internalStorage;\n                }\n            case BrowserCacheLocation.MemoryStorage:\n            default:\n                return this.internalStorage;\n        }\n    }\n\n    /**\n     * Migrate all old cache entries to new schema. No rollback supported.\n     * @param storeAuthStateInCookie\n     */\n    protected migrateCacheEntries(): void {\n        const idTokenKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ID_TOKEN}`;\n        const clientInfoKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.CLIENT_INFO}`;\n        const errorKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR}`;\n        const errorDescKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR_DESC}`;\n\n        const idTokenValue = this.browserStorage.getItem(idTokenKey);\n        const clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n        const errorValue = this.browserStorage.getItem(errorKey);\n        const errorDescValue = this.browserStorage.getItem(errorDescKey);\n\n        const values = [\n            idTokenValue,\n            clientInfoValue,\n            errorValue,\n            errorDescValue,\n        ];\n        const keysToMigrate = [\n            PersistentCacheKeys.ID_TOKEN,\n            PersistentCacheKeys.CLIENT_INFO,\n            PersistentCacheKeys.ERROR,\n            PersistentCacheKeys.ERROR_DESC,\n        ];\n\n        keysToMigrate.forEach((cacheKey: string, index: number) =>\n            this.migrateCacheEntry(cacheKey, values[index])\n        );\n    }\n\n    /**\n     * Utility function to help with migration.\n     * @param newKey\n     * @param value\n     * @param storeAuthStateInCookie\n     */\n    protected migrateCacheEntry(newKey: string, value: string | null): void {\n        if (value) {\n            this.setTemporaryCache(newKey, value, true);\n        }\n    }\n\n    /**\n     * Searches all cache entries for MSAL accounts and creates the account key map\n     * This is used to migrate users from older versions of MSAL which did not create the map.\n     * @returns\n     */\n    private createKeyMaps(): void {\n        this.logger.trace(\"BrowserCacheManager - createKeyMaps called.\");\n        const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n        const tokenKeys = this.getItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`\n        );\n        if (accountKeys && tokenKeys) {\n            this.logger.verbose(\n                \"BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.\"\n            );\n            // Key maps already exist, no need to iterate through cache\n            return;\n        }\n\n        const allKeys = this.browserStorage.getKeys();\n        allKeys.forEach((key) => {\n            if (this.isCredentialKey(key)) {\n                // Get item, parse, validate and write key to map\n                const value = this.getItem(key);\n                if (value) {\n                    const credObj = this.validateAndParseJson(value);\n                    if (credObj && credObj.hasOwnProperty(\"credentialType\")) {\n                        switch (credObj[\"credentialType\"]) {\n                            case CredentialType.ID_TOKEN:\n                                if (CacheHelpers.isIdTokenEntity(credObj)) {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - idToken with key: ${key} found, saving key to token key map`\n                                    );\n                                    const idTokenEntity =\n                                        credObj as IdTokenEntity;\n                                    const newKey =\n                                        this.updateCredentialCacheKey(\n                                            key,\n                                            idTokenEntity\n                                        );\n                                    this.addTokenKey(\n                                        newKey,\n                                        CredentialType.ID_TOKEN\n                                    );\n                                    return;\n                                } else {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - failed idToken validation on key: ${key}`\n                                    );\n                                }\n                                break;\n                            case CredentialType.ACCESS_TOKEN:\n                            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                                if (CacheHelpers.isAccessTokenEntity(credObj)) {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - accessToken with key: ${key} found, saving key to token key map`\n                                    );\n                                    const accessTokenEntity =\n                                        credObj as AccessTokenEntity;\n                                    const newKey =\n                                        this.updateCredentialCacheKey(\n                                            key,\n                                            accessTokenEntity\n                                        );\n                                    this.addTokenKey(\n                                        newKey,\n                                        CredentialType.ACCESS_TOKEN\n                                    );\n                                    return;\n                                } else {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - failed accessToken validation on key: ${key}`\n                                    );\n                                }\n                                break;\n                            case CredentialType.REFRESH_TOKEN:\n                                if (\n                                    CacheHelpers.isRefreshTokenEntity(credObj)\n                                ) {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - refreshToken with key: ${key} found, saving key to token key map`\n                                    );\n                                    const refreshTokenEntity =\n                                        credObj as RefreshTokenEntity;\n                                    const newKey =\n                                        this.updateCredentialCacheKey(\n                                            key,\n                                            refreshTokenEntity\n                                        );\n                                    this.addTokenKey(\n                                        newKey,\n                                        CredentialType.REFRESH_TOKEN\n                                    );\n                                    return;\n                                } else {\n                                    this.logger.trace(\n                                        \"BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.\"\n                                    );\n                                    this.logger.tracePii(\n                                        `BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: ${key}`\n                                    );\n                                }\n                                break;\n                            default:\n                            // If credentialType isn't one of our predefined ones, it may not be an MSAL cache value. Ignore.\n                        }\n                    }\n                }\n            }\n\n            if (this.isAccountKey(key)) {\n                const value = this.getItem(key);\n                if (value) {\n                    const accountObj = this.validateAndParseJson(value);\n                    if (\n                        accountObj &&\n                        AccountEntity.isAccountEntity(accountObj)\n                    ) {\n                        this.logger.trace(\n                            \"BrowserCacheManager:createKeyMaps - account found, saving key to account key map\"\n                        );\n                        this.logger.tracePii(\n                            `BrowserCacheManager:createKeyMaps - account with key: ${key} found, saving key to account key map`\n                        );\n                        this.addAccountKeyToMap(key);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Parses passed value as JSON object, JSON.parse() will throw an error.\n     * @param input\n     */\n    protected validateAndParseJson(jsonValue: string): object | null {\n        try {\n            const parsedJson = JSON.parse(jsonValue);\n            /**\n             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\n             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\n             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\n             *\n             */\n            return parsedJson && typeof parsedJson === \"object\"\n                ? parsedJson\n                : null;\n        } catch (error) {\n            return null;\n        }\n    }\n\n    /**\n     * fetches the entry from the browser storage based off the key\n     * @param key\n     */\n    getItem(key: string): string | null {\n        return this.browserStorage.getItem(key);\n    }\n\n    /**\n     * sets the entry in the browser storage\n     * @param key\n     * @param value\n     */\n    setItem(key: string, value: string): void {\n        this.browserStorage.setItem(key, value);\n    }\n\n    /**\n     * fetch the account entity from the platform cache\n     * @param accountKey\n     */\n    getAccount(accountKey: string, logger?: Logger): AccountEntity | null {\n        this.logger.trace(\"BrowserCacheManager.getAccount called\");\n        const accountEntity = this.getCachedAccountEntity(accountKey);\n\n        return this.updateOutdatedCachedAccount(\n            accountKey,\n            accountEntity,\n            logger\n        );\n    }\n\n    /**\n     * Reads account from cache, deserializes it into an account entity and returns it.\n     * If account is not found from the key, returns null and removes key from map.\n     * @param accountKey\n     * @returns\n     */\n    getCachedAccountEntity(accountKey: string): AccountEntity | null {\n        const serializedAccount = this.getItem(accountKey);\n        if (!serializedAccount) {\n            this.removeAccountKeyFromMap(accountKey);\n            return null;\n        }\n\n        const parsedAccount = this.validateAndParseJson(serializedAccount);\n        if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\n            this.removeAccountKeyFromMap(accountKey);\n            return null;\n        }\n\n        return CacheManager.toObject<AccountEntity>(\n            new AccountEntity(),\n            parsedAccount\n        );\n    }\n\n    /**\n     * set account entity in the platform cache\n     * @param account\n     */\n    setAccount(account: AccountEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAccount called\");\n        const key = account.generateAccountKey();\n        this.setItem(key, JSON.stringify(account));\n        this.addAccountKeyToMap(key);\n    }\n\n    /**\n     * Returns the array of account keys currently cached\n     * @returns\n     */\n    getAccountKeys(): Array<string> {\n        this.logger.trace(\"BrowserCacheManager.getAccountKeys called\");\n        const accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);\n        if (accountKeys) {\n            return JSON.parse(accountKeys);\n        }\n\n        this.logger.verbose(\n            \"BrowserCacheManager.getAccountKeys - No account keys found\"\n        );\n        return [];\n    }\n\n    /**\n     * Add a new account to the key map\n     * @param key\n     */\n    addAccountKeyToMap(key: string): void {\n        this.logger.trace(\"BrowserCacheManager.addAccountKeyToMap called\");\n        this.logger.tracePii(\n            `BrowserCacheManager.addAccountKeyToMap called with key: ${key}`\n        );\n        const accountKeys = this.getAccountKeys();\n        if (accountKeys.indexOf(key) === -1) {\n            // Only add key if it does not already exist in the map\n            accountKeys.push(key);\n            this.setItem(\n                StaticCacheKeys.ACCOUNT_KEYS,\n                JSON.stringify(accountKeys)\n            );\n            this.logger.verbose(\n                \"BrowserCacheManager.addAccountKeyToMap account key added\"\n            );\n        } else {\n            this.logger.verbose(\n                \"BrowserCacheManager.addAccountKeyToMap account key already exists in map\"\n            );\n        }\n    }\n\n    /**\n     * Remove an account from the key map\n     * @param key\n     */\n    removeAccountKeyFromMap(key: string): void {\n        this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap called\");\n        this.logger.tracePii(\n            `BrowserCacheManager.removeAccountKeyFromMap called with key: ${key}`\n        );\n        const accountKeys = this.getAccountKeys();\n        const removalIndex = accountKeys.indexOf(key);\n        if (removalIndex > -1) {\n            accountKeys.splice(removalIndex, 1);\n            this.setItem(\n                StaticCacheKeys.ACCOUNT_KEYS,\n                JSON.stringify(accountKeys)\n            );\n            this.logger.trace(\n                \"BrowserCacheManager.removeAccountKeyFromMap account key removed\"\n            );\n        } else {\n            this.logger.trace(\n                \"BrowserCacheManager.removeAccountKeyFromMap key not found in existing map\"\n            );\n        }\n    }\n\n    /**\n     * Extends inherited removeAccount function to include removal of the account key from the map\n     * @param key\n     */\n    async removeAccount(key: string): Promise<void> {\n        void super.removeAccount(key);\n        this.removeAccountKeyFromMap(key);\n    }\n\n    /**\n     * Remove account entity from the platform cache if it's outdated\n     * @param accountKey\n     */\n    removeOutdatedAccount(accountKey: string): void {\n        this.removeItem(accountKey);\n        this.removeAccountKeyFromMap(accountKey);\n    }\n\n    /**\n     * Removes given idToken from the cache and from the key map\n     * @param key\n     */\n    removeIdToken(key: string): void {\n        super.removeIdToken(key);\n        this.removeTokenKey(key, CredentialType.ID_TOKEN);\n    }\n\n    /**\n     * Removes given accessToken from the cache and from the key map\n     * @param key\n     */\n    async removeAccessToken(key: string): Promise<void> {\n        void super.removeAccessToken(key);\n        this.removeTokenKey(key, CredentialType.ACCESS_TOKEN);\n    }\n\n    /**\n     * Removes given refreshToken from the cache and from the key map\n     * @param key\n     */\n    removeRefreshToken(key: string): void {\n        super.removeRefreshToken(key);\n        this.removeTokenKey(key, CredentialType.REFRESH_TOKEN);\n    }\n\n    /**\n     * Gets the keys for the cached tokens associated with this clientId\n     * @returns\n     */\n    getTokenKeys(): TokenKeys {\n        this.logger.trace(\"BrowserCacheManager.getTokenKeys called\");\n        const item = this.getItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`\n        );\n        if (item) {\n            const tokenKeys = this.validateAndParseJson(item);\n            if (\n                tokenKeys &&\n                tokenKeys.hasOwnProperty(\"idToken\") &&\n                tokenKeys.hasOwnProperty(\"accessToken\") &&\n                tokenKeys.hasOwnProperty(\"refreshToken\")\n            ) {\n                return tokenKeys as TokenKeys;\n            } else {\n                this.logger.error(\n                    \"BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.\"\n                );\n            }\n        } else {\n            this.logger.verbose(\n                \"BrowserCacheManager.getTokenKeys - No token keys found\"\n            );\n        }\n\n        return {\n            idToken: [],\n            accessToken: [],\n            refreshToken: [],\n        };\n    }\n\n    /**\n     * Adds the given key to the token key map\n     * @param key\n     * @param type\n     */\n    addTokenKey(key: string, type: CredentialType): void {\n        this.logger.trace(\"BrowserCacheManager addTokenKey called\");\n        const tokenKeys = this.getTokenKeys();\n\n        switch (type) {\n            case CredentialType.ID_TOKEN:\n                if (tokenKeys.idToken.indexOf(key) === -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: addTokenKey - idToken added to map\"\n                    );\n                    tokenKeys.idToken.push(key);\n                }\n                break;\n            case CredentialType.ACCESS_TOKEN:\n                if (tokenKeys.accessToken.indexOf(key) === -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: addTokenKey - accessToken added to map\"\n                    );\n                    tokenKeys.accessToken.push(key);\n                }\n                break;\n            case CredentialType.REFRESH_TOKEN:\n                if (tokenKeys.refreshToken.indexOf(key) === -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: addTokenKey - refreshToken added to map\"\n                    );\n                    tokenKeys.refreshToken.push(key);\n                }\n                break;\n            default:\n                this.logger.error(\n                    `BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: ${type}`\n                );\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.unexpectedCredentialType\n                );\n        }\n\n        this.setItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`,\n            JSON.stringify(tokenKeys)\n        );\n    }\n\n    /**\n     * Removes the given key from the token key map\n     * @param key\n     * @param type\n     */\n    removeTokenKey(key: string, type: CredentialType): void {\n        this.logger.trace(\"BrowserCacheManager removeTokenKey called\");\n        const tokenKeys = this.getTokenKeys();\n\n        switch (type) {\n            case CredentialType.ID_TOKEN:\n                this.logger.infoPii(\n                    `BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: ${key} from map`\n                );\n                const idRemoval = tokenKeys.idToken.indexOf(key);\n                if (idRemoval > -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - idToken removed from map\"\n                    );\n                    tokenKeys.idToken.splice(idRemoval, 1);\n                } else {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.\"\n                    );\n                }\n                break;\n            case CredentialType.ACCESS_TOKEN:\n                this.logger.infoPii(\n                    `BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: ${key} from map`\n                );\n                const accessRemoval = tokenKeys.accessToken.indexOf(key);\n                if (accessRemoval > -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - accessToken removed from map\"\n                    );\n                    tokenKeys.accessToken.splice(accessRemoval, 1);\n                } else {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.\"\n                    );\n                }\n                break;\n            case CredentialType.REFRESH_TOKEN:\n                this.logger.infoPii(\n                    `BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: ${key} from map`\n                );\n                const refreshRemoval = tokenKeys.refreshToken.indexOf(key);\n                if (refreshRemoval > -1) {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - refreshToken removed from map\"\n                    );\n                    tokenKeys.refreshToken.splice(refreshRemoval, 1);\n                } else {\n                    this.logger.info(\n                        \"BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.\"\n                    );\n                }\n                break;\n            default:\n                this.logger.error(\n                    `BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: ${type}`\n                );\n                throw createClientAuthError(\n                    ClientAuthErrorCodes.unexpectedCredentialType\n                );\n        }\n\n        this.setItem(\n            `${StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`,\n            JSON.stringify(tokenKeys)\n        );\n    }\n\n    /**\n     * generates idToken entity from a string\n     * @param idTokenKey\n     */\n    getIdTokenCredential(idTokenKey: string): IdTokenEntity | null {\n        const value = this.getItem(idTokenKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getIdTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n            return null;\n        }\n\n        const parsedIdToken = this.validateAndParseJson(value);\n        if (!parsedIdToken || !CacheHelpers.isIdTokenEntity(parsedIdToken)) {\n            this.logger.trace(\n                \"BrowserCacheManager.getIdTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n            return null;\n        }\n\n        this.logger.trace(\n            \"BrowserCacheManager.getIdTokenCredential: cache hit\"\n        );\n        return parsedIdToken as IdTokenEntity;\n    }\n\n    /**\n     * set IdToken credential to the platform cache\n     * @param idToken\n     */\n    setIdTokenCredential(idToken: IdTokenEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n        const idTokenKey = CacheHelpers.generateCredentialKey(idToken);\n\n        this.setItem(idTokenKey, JSON.stringify(idToken));\n\n        this.addTokenKey(idTokenKey, CredentialType.ID_TOKEN);\n    }\n\n    /**\n     * generates accessToken entity from a string\n     * @param key\n     */\n    getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null {\n        const value = this.getItem(accessTokenKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n            return null;\n        }\n        const parsedAccessToken = this.validateAndParseJson(value);\n        if (\n            !parsedAccessToken ||\n            !CacheHelpers.isAccessTokenEntity(parsedAccessToken)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n            return null;\n        }\n\n        this.logger.trace(\n            \"BrowserCacheManager.getAccessTokenCredential: cache hit\"\n        );\n        return parsedAccessToken as AccessTokenEntity;\n    }\n\n    /**\n     * set accessToken credential to the platform cache\n     * @param accessToken\n     */\n    setAccessTokenCredential(accessToken: AccessTokenEntity): void {\n        this.logger.trace(\n            \"BrowserCacheManager.setAccessTokenCredential called\"\n        );\n        const accessTokenKey = CacheHelpers.generateCredentialKey(accessToken);\n        this.setItem(accessTokenKey, JSON.stringify(accessToken));\n\n        this.addTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);\n    }\n\n    /**\n     * generates refreshToken entity from a string\n     * @param refreshTokenKey\n     */\n    getRefreshTokenCredential(\n        refreshTokenKey: string\n    ): RefreshTokenEntity | null {\n        const value = this.getItem(refreshTokenKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n            return null;\n        }\n        const parsedRefreshToken = this.validateAndParseJson(value);\n        if (\n            !parsedRefreshToken ||\n            !CacheHelpers.isRefreshTokenEntity(parsedRefreshToken)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\"\n            );\n            this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n            return null;\n        }\n\n        this.logger.trace(\n            \"BrowserCacheManager.getRefreshTokenCredential: cache hit\"\n        );\n        return parsedRefreshToken as RefreshTokenEntity;\n    }\n\n    /**\n     * set refreshToken credential to the platform cache\n     * @param refreshToken\n     */\n    setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void {\n        this.logger.trace(\n            \"BrowserCacheManager.setRefreshTokenCredential called\"\n        );\n        const refreshTokenKey =\n            CacheHelpers.generateCredentialKey(refreshToken);\n        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n\n        this.addTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);\n    }\n\n    /**\n     * fetch appMetadata entity from the platform cache\n     * @param appMetadataKey\n     */\n    getAppMetadata(appMetadataKey: string): AppMetadataEntity | null {\n        const value = this.getItem(appMetadataKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAppMetadata: called, no cache hit\"\n            );\n            return null;\n        }\n\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (\n            !parsedMetadata ||\n            !CacheHelpers.isAppMetadataEntity(appMetadataKey, parsedMetadata)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAppMetadata: called, no cache hit\"\n            );\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n        return parsedMetadata as AppMetadataEntity;\n    }\n\n    /**\n     * set appMetadata entity to the platform cache\n     * @param appMetadata\n     */\n    setAppMetadata(appMetadata: AppMetadataEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n        const appMetadataKey = CacheHelpers.generateAppMetadataKey(appMetadata);\n        this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n    }\n\n    /**\n     * fetch server telemetry entity from the platform cache\n     * @param serverTelemetryKey\n     */\n    getServerTelemetry(\n        serverTelemetryKey: string\n    ): ServerTelemetryEntity | null {\n        const value = this.getItem(serverTelemetryKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getServerTelemetry: called, no cache hit\"\n            );\n            return null;\n        }\n        const parsedEntity = this.validateAndParseJson(value);\n        if (\n            !parsedEntity ||\n            !CacheHelpers.isServerTelemetryEntity(\n                serverTelemetryKey,\n                parsedEntity\n            )\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getServerTelemetry: called, no cache hit\"\n            );\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n        return parsedEntity as ServerTelemetryEntity;\n    }\n\n    /**\n     * set server telemetry entity to the platform cache\n     * @param serverTelemetryKey\n     * @param serverTelemetry\n     */\n    setServerTelemetry(\n        serverTelemetryKey: string,\n        serverTelemetry: ServerTelemetryEntity\n    ): void {\n        this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n    }\n\n    /**\n     *\n     */\n    getAuthorityMetadata(key: string): AuthorityMetadataEntity | null {\n        const value = this.internalStorage.getItem(key);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\"\n            );\n            return null;\n        }\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (\n            parsedMetadata &&\n            CacheHelpers.isAuthorityMetadataEntity(key, parsedMetadata)\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getAuthorityMetadata: cache hit\"\n            );\n            return parsedMetadata as AuthorityMetadataEntity;\n        }\n        return null;\n    }\n\n    /**\n     *\n     */\n    getAuthorityMetadataKeys(): Array<string> {\n        const allKeys = this.internalStorage.getKeys();\n        return allKeys.filter((key) => {\n            return this.isAuthorityMetadata(key);\n        });\n    }\n\n    /**\n     * Sets wrapper metadata in memory\n     * @param wrapperSKU\n     * @param wrapperVersion\n     */\n    setWrapperMetadata(wrapperSKU: string, wrapperVersion: string): void {\n        this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\n        this.internalStorage.setItem(\n            InMemoryCacheKeys.WRAPPER_VER,\n            wrapperVersion\n        );\n    }\n\n    /**\n     * Returns wrapper metadata from in-memory storage\n     */\n    getWrapperMetadata(): [string, string] {\n        const sku =\n            this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) ||\n            Constants.EMPTY_STRING;\n        const version =\n            this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) ||\n            Constants.EMPTY_STRING;\n        return [sku, version];\n    }\n\n    /**\n     *\n     * @param entity\n     */\n    setAuthorityMetadata(key: string, entity: AuthorityMetadataEntity): void {\n        this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n        this.internalStorage.setItem(key, JSON.stringify(entity));\n    }\n\n    /**\n     * Gets the active account\n     */\n    getActiveAccount(): AccountInfo | null {\n        const activeAccountKeyFilters = this.generateCacheKey(\n            PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS\n        );\n        const activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\n        if (!activeAccountValueFilters) {\n            // if new active account cache type isn't found, it's an old version, so look for that instead\n            this.logger.trace(\n                \"BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema\"\n            );\n            const activeAccountKeyLocal = this.generateCacheKey(\n                PersistentCacheKeys.ACTIVE_ACCOUNT\n            );\n            const activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\n            if (!activeAccountValueLocal) {\n                this.logger.trace(\n                    \"BrowserCacheManager.getActiveAccount: No active account found\"\n                );\n                return null;\n            }\n            const activeAccount = this.getAccountInfoFilteredBy({\n                localAccountId: activeAccountValueLocal,\n            });\n            if (activeAccount) {\n                this.logger.trace(\n                    \"BrowserCacheManager.getActiveAccount: Legacy active account cache schema found\"\n                );\n                this.logger.trace(\n                    \"BrowserCacheManager.getActiveAccount: Adding active account filters cache schema\"\n                );\n                this.setActiveAccount(activeAccount);\n                return activeAccount;\n            }\n            return null;\n        }\n        const activeAccountValueObj = this.validateAndParseJson(\n            activeAccountValueFilters\n        ) as AccountInfo;\n        if (activeAccountValueObj) {\n            this.logger.trace(\n                \"BrowserCacheManager.getActiveAccount: Active account filters schema found\"\n            );\n            return this.getAccountInfoFilteredBy({\n                homeAccountId: activeAccountValueObj.homeAccountId,\n                localAccountId: activeAccountValueObj.localAccountId,\n                tenantId: activeAccountValueObj.tenantId,\n            });\n        }\n        this.logger.trace(\n            \"BrowserCacheManager.getActiveAccount: No active account found\"\n        );\n        return null;\n    }\n\n    /**\n     * Sets the active account's localAccountId in cache\n     * @param account\n     */\n    setActiveAccount(account: AccountInfo | null): void {\n        const activeAccountKey = this.generateCacheKey(\n            PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS\n        );\n        const activeAccountKeyLocal = this.generateCacheKey(\n            PersistentCacheKeys.ACTIVE_ACCOUNT\n        );\n        if (account) {\n            this.logger.verbose(\"setActiveAccount: Active account set\");\n            const activeAccountValue: ActiveAccountFilters = {\n                homeAccountId: account.homeAccountId,\n                localAccountId: account.localAccountId,\n                tenantId: account.tenantId,\n            };\n            this.browserStorage.setItem(\n                activeAccountKey,\n                JSON.stringify(activeAccountValue)\n            );\n            this.browserStorage.setItem(\n                activeAccountKeyLocal,\n                account.localAccountId\n            );\n        } else {\n            this.logger.verbose(\n                \"setActiveAccount: No account passed, active account not set\"\n            );\n            this.browserStorage.removeItem(activeAccountKey);\n            this.browserStorage.removeItem(activeAccountKeyLocal);\n        }\n    }\n\n    /**\n     * fetch throttling entity from the platform cache\n     * @param throttlingCacheKey\n     */\n    getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null {\n        const value = this.getItem(throttlingCacheKey);\n        if (!value) {\n            this.logger.trace(\n                \"BrowserCacheManager.getThrottlingCache: called, no cache hit\"\n            );\n            return null;\n        }\n\n        const parsedThrottlingCache = this.validateAndParseJson(value);\n        if (\n            !parsedThrottlingCache ||\n            !CacheHelpers.isThrottlingEntity(\n                throttlingCacheKey,\n                parsedThrottlingCache\n            )\n        ) {\n            this.logger.trace(\n                \"BrowserCacheManager.getThrottlingCache: called, no cache hit\"\n            );\n            return null;\n        }\n\n        this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n        return parsedThrottlingCache as ThrottlingEntity;\n    }\n\n    /**\n     * set throttling entity to the platform cache\n     * @param throttlingCacheKey\n     * @param throttlingCache\n     */\n    setThrottlingCache(\n        throttlingCacheKey: string,\n        throttlingCache: ThrottlingEntity\n    ): void {\n        this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n    }\n\n    /**\n     * Gets cache item with given key.\n     * Will retrieve from cookies if storeAuthStateInCookie is set to true.\n     * @param key\n     */\n    getTemporaryCache(cacheKey: string, generateKey?: boolean): string | null {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            const itemCookie = this.getItemCookie(key);\n            if (itemCookie) {\n                this.logger.trace(\n                    \"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\"\n                );\n                return itemCookie;\n            }\n        }\n\n        const value = this.temporaryCacheStorage.getItem(key);\n        if (!value) {\n            // If temp cache item not found in session/memory, check local storage for items set by old versions\n            if (\n                this.cacheConfig.cacheLocation ===\n                BrowserCacheLocation.LocalStorage\n            ) {\n                const item = this.browserStorage.getItem(key);\n                if (item) {\n                    this.logger.trace(\n                        \"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\"\n                    );\n                    return item;\n                }\n            }\n            this.logger.trace(\n                \"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\"\n            );\n            return null;\n        }\n        this.logger.trace(\n            \"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\"\n        );\n        return value;\n    }\n\n    /**\n     * Sets the cache item with the key and value given.\n     * Stores in cookie if storeAuthStateInCookie is set to true.\n     * This can cause cookie overflow if used incorrectly.\n     * @param key\n     * @param value\n     */\n    setTemporaryCache(\n        cacheKey: string,\n        value: string,\n        generateKey?: boolean\n    ): void {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n\n        this.temporaryCacheStorage.setItem(key, value);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\n                \"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\"\n            );\n            this.setItemCookie(key, value);\n        }\n    }\n\n    /**\n     * Removes the cache item with the given key.\n     * Will also clear the cookie item if storeAuthStateInCookie is set to true.\n     * @param key\n     */\n    removeItem(key: string): void {\n        this.browserStorage.removeItem(key);\n        this.temporaryCacheStorage.removeItem(key);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\n                \"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\"\n            );\n            this.clearItemCookie(key);\n        }\n    }\n\n    /**\n     * Checks whether key is in cache.\n     * @param key\n     */\n    containsKey(key: string): boolean {\n        return (\n            this.browserStorage.containsKey(key) ||\n            this.temporaryCacheStorage.containsKey(key)\n        );\n    }\n\n    /**\n     * Gets all keys in window.\n     */\n    getKeys(): string[] {\n        return [\n            ...this.browserStorage.getKeys(),\n            ...this.temporaryCacheStorage.getKeys(),\n        ];\n    }\n\n    /**\n     * Clears all cache entries created by MSAL.\n     */\n    async clear(): Promise<void> {\n        // Removes all accounts and their credentials\n        await this.removeAllAccounts();\n        this.removeAppMetadata();\n\n        // Removes all remaining MSAL cache items\n        this.getKeys().forEach((cacheKey: string) => {\n            // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\n            if (\n                (this.browserStorage.containsKey(cacheKey) ||\n                    this.temporaryCacheStorage.containsKey(cacheKey)) &&\n                (cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 ||\n                    cacheKey.indexOf(this.clientId) !== -1)\n            ) {\n                this.removeItem(cacheKey);\n            }\n        });\n\n        this.internalStorage.clear();\n    }\n\n    /**\n     * Clears all access tokes that have claims prior to saving the current one\n     * @param performanceClient {IPerformanceClient}\n     * @returns\n     */\n    async clearTokensAndKeysWithClaims(\n        performanceClient: IPerformanceClient\n    ): Promise<void> {\n        performanceClient.addQueueMeasurement(\n            PerformanceEvents.ClearTokensAndKeysWithClaims\n        );\n\n        const tokenKeys = this.getTokenKeys();\n\n        const removedAccessTokens: Array<Promise<void>> = [];\n        tokenKeys.accessToken.forEach((key: string) => {\n            // if the access token has claims in its key, remove the token key and the token\n            const credential = this.getAccessTokenCredential(key);\n            if (\n                credential?.requestedClaimsHash &&\n                key.includes(credential.requestedClaimsHash.toLowerCase())\n            ) {\n                removedAccessTokens.push(this.removeAccessToken(key));\n            }\n        });\n        await Promise.all(removedAccessTokens);\n\n        // warn if any access tokens are removed\n        if (removedAccessTokens.length > 0) {\n            this.logger.warning(\n                `${removedAccessTokens.length} access tokens with claims in the cache keys have been removed from the cache.`\n            );\n        }\n    }\n\n    /**\n     * Add value to cookies\n     * @param cookieName\n     * @param cookieValue\n     * @param expires\n     */\n    setItemCookie(\n        cookieName: string,\n        cookieValue: string,\n        expires?: number\n    ): void {\n        let cookieStr = `${encodeURIComponent(cookieName)}=${encodeURIComponent(\n            cookieValue\n        )};path=/;SameSite=Lax;`;\n        if (expires) {\n            const expireTime = this.getCookieExpirationTime(expires);\n            cookieStr += `expires=${expireTime};`;\n        }\n\n        if (this.cacheConfig.secureCookies) {\n            cookieStr += \"Secure;\";\n        }\n\n        document.cookie = cookieStr;\n    }\n\n    /**\n     * Get one item by key from cookies\n     * @param cookieName\n     */\n    getItemCookie(cookieName: string): string {\n        const name = `${encodeURIComponent(cookieName)}=`;\n        const cookieList = document.cookie.split(\";\");\n        for (let i: number = 0; i < cookieList.length; i++) {\n            let cookie = cookieList[i];\n            while (cookie.charAt(0) === \" \") {\n                cookie = cookie.substring(1);\n            }\n            if (cookie.indexOf(name) === 0) {\n                return decodeURIComponent(\n                    cookie.substring(name.length, cookie.length)\n                );\n            }\n        }\n        return Constants.EMPTY_STRING;\n    }\n\n    /**\n     * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\n     */\n    clearMsalCookies(): void {\n        const cookiePrefix = `${Constants.CACHE_PREFIX}.${this.clientId}`;\n        const cookieList = document.cookie.split(\";\");\n        cookieList.forEach((cookie: string): void => {\n            while (cookie.charAt(0) === \" \") {\n                // eslint-disable-next-line no-param-reassign\n                cookie = cookie.substring(1);\n            }\n            if (cookie.indexOf(cookiePrefix) === 0) {\n                const cookieKey = cookie.split(\"=\")[0];\n                this.clearItemCookie(cookieKey);\n            }\n        });\n    }\n\n    /**\n     * Clear an item in the cookies by key\n     * @param cookieName\n     */\n    clearItemCookie(cookieName: string): void {\n        this.setItemCookie(cookieName, Constants.EMPTY_STRING, -1);\n    }\n\n    /**\n     * Get cookie expiration time\n     * @param cookieLifeDays\n     */\n    getCookieExpirationTime(cookieLifeDays: number): string {\n        const today = new Date();\n        const expr = new Date(\n            today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER\n        );\n        return expr.toUTCString();\n    }\n\n    /**\n     * Gets the cache object referenced by the browser\n     */\n    getCache(): object {\n        return this.browserStorage;\n    }\n\n    /**\n     * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser\n     */\n    setCache(): void {\n        // sets nothing\n    }\n\n    /**\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\n     * @param key\n     * @param addInstanceId\n     */\n    generateCacheKey(key: string): string {\n        const generatedKey = this.validateAndParseJson(key);\n        if (!generatedKey) {\n            if (\n                StringUtils.startsWith(key, Constants.CACHE_PREFIX) ||\n                StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)\n            ) {\n                return key;\n            }\n            return `${Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\n        }\n\n        return JSON.stringify(key);\n    }\n\n    /**\n     * Create authorityKey to cache authority\n     * @param state\n     */\n    generateAuthorityKey(stateString: string): string {\n        const {\n            libraryState: { id: stateId },\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n\n        return this.generateCacheKey(\n            `${TemporaryCacheKeys.AUTHORITY}.${stateId}`\n        );\n    }\n\n    /**\n     * Create Nonce key to cache nonce\n     * @param state\n     */\n    generateNonceKey(stateString: string): string {\n        const {\n            libraryState: { id: stateId },\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n\n        return this.generateCacheKey(\n            `${TemporaryCacheKeys.NONCE_IDTOKEN}.${stateId}`\n        );\n    }\n\n    /**\n     * Creates full cache key for the request state\n     * @param stateString State string for the request\n     */\n    generateStateKey(stateString: string): string {\n        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n        const {\n            libraryState: { id: stateId },\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n        return this.generateCacheKey(\n            `${TemporaryCacheKeys.REQUEST_STATE}.${stateId}`\n        );\n    }\n\n    /**\n     * Gets the cached authority based on the cached state. Returns empty if no cached state found.\n     */\n    getCachedAuthority(cachedState: string): string | null {\n        const stateCacheKey = this.generateStateKey(cachedState);\n        const state = this.getTemporaryCache(stateCacheKey);\n        if (!state) {\n            return null;\n        }\n\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        return this.getTemporaryCache(authorityCacheKey);\n    }\n\n    /**\n     * Updates account, authority, and state in cache\n     * @param serverAuthenticationRequest\n     * @param account\n     */\n    updateCacheEntries(\n        state: string,\n        nonce: string,\n        authorityInstance: string,\n        loginHint: string,\n        account: AccountInfo | null\n    ): void {\n        this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\n        // Cache the request state\n        const stateCacheKey = this.generateStateKey(state);\n        this.setTemporaryCache(stateCacheKey, state, false);\n\n        // Cache the nonce\n        const nonceCacheKey = this.generateNonceKey(state);\n        this.setTemporaryCache(nonceCacheKey, nonce, false);\n\n        // Cache authorityKey\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n\n        if (account) {\n            const ccsCredential: CcsCredential = {\n                credential: account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID,\n            };\n            this.setTemporaryCache(\n                TemporaryCacheKeys.CCS_CREDENTIAL,\n                JSON.stringify(ccsCredential),\n                true\n            );\n        } else if (loginHint) {\n            const ccsCredential: CcsCredential = {\n                credential: loginHint,\n                type: CcsCredentialType.UPN,\n            };\n            this.setTemporaryCache(\n                TemporaryCacheKeys.CCS_CREDENTIAL,\n                JSON.stringify(ccsCredential),\n                true\n            );\n        }\n    }\n\n    /**\n     * Reset all temporary cache items\n     * @param state\n     */\n    resetRequestCache(state: string): void {\n        this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\n        // check state and remove associated cache items\n        if (state) {\n            this.getKeys().forEach((key) => {\n                if (key.indexOf(state) !== -1) {\n                    this.removeItem(key);\n                }\n            });\n\n            // delete generic interactive request parameters\n            this.removeItem(this.generateStateKey(state));\n            this.removeItem(this.generateNonceKey(state));\n            this.removeItem(this.generateAuthorityKey(state));\n        }\n        this.removeItem(\n            this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS)\n        );\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n        this.removeItem(\n            this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID)\n        );\n        this.removeItem(\n            this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL)\n        );\n        this.removeItem(\n            this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST)\n        );\n        this.setInteractionInProgress(false);\n    }\n\n    /**\n     * Removes temporary cache for the provided state\n     * @param stateString\n     */\n    cleanRequestByState(stateString: string): void {\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\n        // Interaction is completed - remove interaction status.\n        if (stateString) {\n            const stateKey = this.generateStateKey(stateString);\n            const cachedState = this.temporaryCacheStorage.getItem(stateKey);\n            this.logger.infoPii(\n                `BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`\n            );\n            this.resetRequestCache(cachedState || Constants.EMPTY_STRING);\n        }\n        this.clearMsalCookies();\n    }\n\n    /**\n     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\n     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\n     * @param interactionType\n     */\n    cleanRequestByInteractionType(interactionType: InteractionType): void {\n        this.logger.trace(\n            \"BrowserCacheManager.cleanRequestByInteractionType called\"\n        );\n        // Loop through all keys to find state key\n        this.getKeys().forEach((key) => {\n            // If this key is not the state key, move on\n            if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\n                return;\n            }\n\n            // Retrieve state value, return if not a valid value\n            const stateValue = this.temporaryCacheStorage.getItem(key);\n            if (!stateValue) {\n                return;\n            }\n            // Extract state and ensure it matches given InteractionType, then clean request cache\n            const parsedState = extractBrowserRequestState(\n                this.cryptoImpl,\n                stateValue\n            );\n            if (\n                parsedState &&\n                parsedState.interactionType === interactionType\n            ) {\n                this.logger.infoPii(\n                    `BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`\n                );\n                this.resetRequestCache(stateValue);\n            }\n        });\n        this.clearMsalCookies();\n        this.setInteractionInProgress(false);\n    }\n\n    cacheCodeRequest(authCodeRequest: CommonAuthorizationCodeRequest): void {\n        this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n\n        const encodedValue = base64Encode(JSON.stringify(authCodeRequest));\n        this.setTemporaryCache(\n            TemporaryCacheKeys.REQUEST_PARAMS,\n            encodedValue,\n            true\n        );\n    }\n\n    /**\n     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\n     */\n    getCachedRequest(state: string): CommonAuthorizationCodeRequest {\n        this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\n        // Get token request from cache and parse as TokenExchangeParameters.\n        const encodedTokenRequest = this.getTemporaryCache(\n            TemporaryCacheKeys.REQUEST_PARAMS,\n            true\n        );\n        if (!encodedTokenRequest) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.noTokenRequestCacheError\n            );\n        }\n\n        let parsedRequest: CommonAuthorizationCodeRequest;\n        try {\n            parsedRequest = JSON.parse(base64Decode(encodedTokenRequest));\n        } catch (e) {\n            this.logger.errorPii(`Attempted to parse: ${encodedTokenRequest}`);\n            this.logger.error(\n                `Parsing cached token request threw with error: ${e}`\n            );\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.unableToParseTokenRequestCacheError\n            );\n        }\n        this.removeItem(\n            this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS)\n        );\n\n        // Get cached authority and use if no authority is cached with request.\n        if (!parsedRequest.authority) {\n            const authorityCacheKey: string = this.generateAuthorityKey(state);\n            const cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n            if (!cachedAuthority) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.noCachedAuthorityError\n                );\n            }\n            parsedRequest.authority = cachedAuthority;\n        }\n\n        return parsedRequest;\n    }\n\n    /**\n     * Gets cached native request for redirect flows\n     */\n    getCachedNativeRequest(): NativeTokenRequest | null {\n        this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\n        const cachedRequest = this.getTemporaryCache(\n            TemporaryCacheKeys.NATIVE_REQUEST,\n            true\n        );\n        if (!cachedRequest) {\n            this.logger.trace(\n                \"BrowserCacheManager.getCachedNativeRequest: No cached native request found\"\n            );\n            return null;\n        }\n\n        const parsedRequest = this.validateAndParseJson(\n            cachedRequest\n        ) as NativeTokenRequest;\n        if (!parsedRequest) {\n            this.logger.error(\n                \"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\"\n            );\n            return null;\n        }\n\n        return parsedRequest;\n    }\n\n    isInteractionInProgress(matchClientId?: boolean): boolean {\n        const clientId = this.getInteractionInProgress();\n\n        if (matchClientId) {\n            return clientId === this.clientId;\n        } else {\n            return !!clientId;\n        }\n    }\n\n    getInteractionInProgress(): string | null {\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        return this.getTemporaryCache(key, false);\n    }\n\n    setInteractionInProgress(inProgress: boolean): void {\n        // Ensure we don't overwrite interaction in progress for a different clientId\n        const key = `${Constants.CACHE_PREFIX}.${TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        if (inProgress) {\n            if (this.getInteractionInProgress()) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.interactionInProgress\n                );\n            } else {\n                // No interaction is in progress\n                this.setTemporaryCache(key, this.clientId, false);\n            }\n        } else if (\n            !inProgress &&\n            this.getInteractionInProgress() === this.clientId\n        ) {\n            this.removeItem(key);\n        }\n    }\n\n    /**\n     * Returns username retrieved from ADAL or MSAL v1 idToken\n     * @deprecated\n     */\n    getLegacyLoginHint(): string | null {\n        // Only check for adal/msal token if no SSO params are being used\n        const adalIdTokenString = this.getTemporaryCache(\n            PersistentCacheKeys.ADAL_ID_TOKEN\n        );\n        if (adalIdTokenString) {\n            this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);\n            this.logger.verbose(\"Cached ADAL id token retrieved.\");\n        }\n\n        // Check for cached MSAL v1 id token\n        const msalIdTokenString = this.getTemporaryCache(\n            PersistentCacheKeys.ID_TOKEN,\n            true\n        );\n        if (msalIdTokenString) {\n            this.removeItem(\n                this.generateCacheKey(PersistentCacheKeys.ID_TOKEN)\n            );\n            this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\n        }\n\n        const cachedIdTokenString = msalIdTokenString || adalIdTokenString;\n        if (cachedIdTokenString) {\n            const idTokenClaims = AuthToken.extractTokenClaims(\n                cachedIdTokenString,\n                base64Decode\n            );\n            if (idTokenClaims.preferred_username) {\n                this.logger.verbose(\n                    \"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\"\n                );\n                return idTokenClaims.preferred_username;\n            } else if (idTokenClaims.upn) {\n                this.logger.verbose(\n                    \"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\"\n                );\n                return idTokenClaims.upn;\n            } else {\n                this.logger.verbose(\n                    \"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\"\n                );\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Updates a credential's cache key if the current cache key is outdated\n     */\n    updateCredentialCacheKey(\n        currentCacheKey: string,\n        credential: ValidCredentialType\n    ): string {\n        const updatedCacheKey = CacheHelpers.generateCredentialKey(credential);\n\n        if (currentCacheKey !== updatedCacheKey) {\n            const cacheItem = this.getItem(currentCacheKey);\n            if (cacheItem) {\n                this.removeItem(currentCacheKey);\n                this.setItem(updatedCacheKey, cacheItem);\n                this.logger.verbose(\n                    `Updated an outdated ${credential.credentialType} cache key`\n                );\n                return updatedCacheKey;\n            } else {\n                this.logger.error(\n                    `Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`\n                );\n            }\n        }\n\n        return currentCacheKey;\n    }\n\n    /**\n     * Returns application id as redirect context during AcquireTokenRedirect flow.\n     */\n    getRedirectRequestContext(): string | null {\n        return this.getTemporaryCache(\n            TemporaryCacheKeys.REDIRECT_CONTEXT,\n            true\n        );\n    }\n\n    /**\n     * Sets application id as the redirect context during AcquireTokenRedirect flow.\n     * @param value\n     */\n    setRedirectRequestContext(value: string): void {\n        this.setTemporaryCache(\n            TemporaryCacheKeys.REDIRECT_CONTEXT,\n            value,\n            true\n        );\n    }\n\n    /**\n     * Builds credential entities from AuthenticationResult object and saves the resulting credentials to the cache\n     * @param result\n     * @param request\n     */\n    async hydrateCache(\n        result: AuthenticationResult,\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        const idTokenEntity = CacheHelpers.createIdTokenEntity(\n            result.account?.homeAccountId,\n            result.account?.environment,\n            result.idToken,\n            this.clientId,\n            result.tenantId\n        );\n\n        let claimsHash;\n        if (request.claims) {\n            claimsHash = await this.cryptoImpl.hashString(request.claims);\n        }\n        const accessTokenEntity = CacheHelpers.createAccessTokenEntity(\n            result.account?.homeAccountId,\n            result.account.environment,\n            result.accessToken,\n            this.clientId,\n            result.tenantId,\n            result.scopes.join(\" \"),\n            result.expiresOn?.getTime() || 0,\n            result.extExpiresOn?.getTime() || 0,\n            base64Decode,\n            undefined, // refreshOn\n            result.tokenType as AuthenticationScheme,\n            undefined, // userAssertionHash\n            request.sshKid,\n            request.claims,\n            claimsHash\n        );\n\n        const cacheRecord = new CacheRecord(\n            undefined,\n            idTokenEntity,\n            accessTokenEntity\n        );\n        return this.saveCacheRecord(cacheRecord);\n    }\n}\n\nexport const DEFAULT_BROWSER_CACHE_MANAGER = (\n    clientId: string,\n    logger: Logger\n): BrowserCacheManager => {\n    const cacheOptions: Required<CacheOptions> = {\n        cacheLocation: BrowserCacheLocation.MemoryStorage,\n        temporaryCacheLocation: BrowserCacheLocation.MemoryStorage,\n        storeAuthStateInCookie: false,\n        secureCookies: false,\n        cacheMigrationEnabled: false,\n        claimsBasedCachingEnabled: false,\n    };\n    return new BrowserCacheManager(\n        clientId,\n        cacheOptions,\n        DEFAULT_CRYPTO_IMPLEMENTATION,\n        logger\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}