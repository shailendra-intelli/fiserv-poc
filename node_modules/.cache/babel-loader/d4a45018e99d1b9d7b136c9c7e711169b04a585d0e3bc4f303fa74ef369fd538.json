{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-typescript\\\\intelli-gui\\\\src\\\\components\\\\common\\\\LoginMS.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\nimport { useMsal } from \"@azure/msal-react\";\n\n// MSAL configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst configuration = {\n  auth: {\n    clientId: `${process.env.REACT_APP_MS_AUTH_APP_ID}`,\n    redirectUri: `${process.env.REACT_APP_MS_AUTH_REDIRECT_URI}`,\n    authority: `${process.env.REACT_APP_MS_AUTH_AUTHORITY}`\n  },\n  cache: {\n    cacheLocation: \"sessionStorage\",\n    storeAuthStateInCookie: true\n  }\n};\nconst msalInstance = new PublicClientApplication(configuration);\nasync function msLogin() {\n  try {\n    await msalInstance.loginPopup({\n      scopes: [`${process.env.REACT_APP_MS_AUTH_READ_SCOPE}`],\n      prompt: \"select_account\"\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\nconst LoginMS = () => {\n  _s();\n  const {\n    accounts\n  } = useMsal();\n  useEffect(() => {\n    // Initialize the MSAL instance when the component mounts\n    msalInstance.handleRedirectPromise().then(() => {\n      if (msalInstance.getAllAccounts().length === 0) {\n        // You can use the MSAL instance to initiate login here if needed\n        msalInstance.loginRedirect({\n          scopes: [\"openid\", \"profile\"]\n        });\n      }\n    });\n  }, []);\n  console.log(accounts);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: msLogin,\n    children: \"Login using Micorsoft\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 10\n  }, this);\n};\n_s(LoginMS, \"lzlFmot3rC/yZvP0tSCqyOzrKcM=\", false, function () {\n  return [useMsal];\n});\n_c = LoginMS;\nexport default LoginMS;\nvar _c;\n$RefreshReg$(_c, \"LoginMS\");","map":{"version":3,"names":["React","useEffect","PublicClientApplication","useMsal","jsxDEV","_jsxDEV","configuration","auth","clientId","process","env","REACT_APP_MS_AUTH_APP_ID","redirectUri","REACT_APP_MS_AUTH_REDIRECT_URI","authority","REACT_APP_MS_AUTH_AUTHORITY","cache","cacheLocation","storeAuthStateInCookie","msalInstance","msLogin","loginPopup","scopes","REACT_APP_MS_AUTH_READ_SCOPE","prompt","error","console","log","LoginMS","_s","accounts","handleRedirectPromise","then","getAllAccounts","length","loginRedirect","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/react-typescript/intelli-gui/src/components/common/LoginMS.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Configuration, PublicClientApplication } from \"@azure/msal-browser\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\n\r\n// MSAL configuration\r\nconst configuration: Configuration = {\r\n  auth: {\r\n    clientId: `${process.env.REACT_APP_MS_AUTH_APP_ID}`,\r\n    redirectUri: `${process.env.REACT_APP_MS_AUTH_REDIRECT_URI}`,\r\n    authority: `${process.env.REACT_APP_MS_AUTH_AUTHORITY}`,\r\n  },\r\n  cache: {\r\n    cacheLocation: \"sessionStorage\",\r\n    storeAuthStateInCookie: true,\r\n  },\r\n};\r\nconst msalInstance = new PublicClientApplication(configuration);\r\n\r\nasync function msLogin() {\r\n  try {\r\n    await msalInstance.loginPopup({\r\n      scopes: [`${process.env.REACT_APP_MS_AUTH_READ_SCOPE}`],\r\n      prompt: \"select_account\",\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nconst LoginMS = () => {\r\n  const { accounts } = useMsal();\r\n\r\n  useEffect(() => {\r\n    // Initialize the MSAL instance when the component mounts\r\n    msalInstance.handleRedirectPromise().then(() => {\r\n      if (msalInstance.getAllAccounts().length === 0) {\r\n        // You can use the MSAL instance to initiate login here if needed\r\n        msalInstance.loginRedirect({ scopes: [\"openid\", \"profile\"] });\r\n      }\r\n    });\r\n  }, []);\r\n  console.log(accounts);\r\n\r\n  return <button onClick={msLogin}>Login using Micorsoft</button>;\r\n};\r\n\r\nexport default LoginMS;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAAwBC,uBAAuB,QAAQ,qBAAqB;AAC5E,SAASC,OAAO,QAAQ,mBAAmB;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAA4B,GAAG;EACnCC,IAAI,EAAE;IACJC,QAAQ,EAAG,GAAEC,OAAO,CAACC,GAAG,CAACC,wBAAyB,EAAC;IACnDC,WAAW,EAAG,GAAEH,OAAO,CAACC,GAAG,CAACG,8BAA+B,EAAC;IAC5DC,SAAS,EAAG,GAAEL,OAAO,CAACC,GAAG,CAACK,2BAA4B;EACxD,CAAC;EACDC,KAAK,EAAE;IACLC,aAAa,EAAE,gBAAgB;IAC/BC,sBAAsB,EAAE;EAC1B;AACF,CAAC;AACD,MAAMC,YAAY,GAAG,IAAIjB,uBAAuB,CAACI,aAAa,CAAC;AAE/D,eAAec,OAAOA,CAAA,EAAG;EACvB,IAAI;IACF,MAAMD,YAAY,CAACE,UAAU,CAAC;MAC5BC,MAAM,EAAE,CAAE,GAAEb,OAAO,CAACC,GAAG,CAACa,4BAA6B,EAAC,CAAC;MACvDC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF;AAEA,MAAMG,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAS,CAAC,GAAG3B,OAAO,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd;IACAkB,YAAY,CAACY,qBAAqB,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;MAC9C,IAAIb,YAAY,CAACc,cAAc,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;QAC9C;QACAf,YAAY,CAACgB,aAAa,CAAC;UAAEb,MAAM,EAAE,CAAC,QAAQ,EAAE,SAAS;QAAE,CAAC,CAAC;MAC/D;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EACNI,OAAO,CAACC,GAAG,CAACG,QAAQ,CAAC;EAErB,oBAAOzB,OAAA;IAAQ+B,OAAO,EAAEhB,OAAQ;IAAAiB,QAAA,EAAC;EAAqB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AACjE,CAAC;AAACZ,EAAA,CAfID,OAAO;EAAA,QACUzB,OAAO;AAAA;AAAAuC,EAAA,GADxBd,OAAO;AAiBb,eAAeA,OAAO;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}