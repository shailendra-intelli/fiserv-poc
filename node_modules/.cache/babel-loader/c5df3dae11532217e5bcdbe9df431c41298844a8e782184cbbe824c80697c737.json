{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-typescript\\\\intelli-gui\\\\src\\\\components\\\\common\\\\LoginMS.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\nimport { useMsal } from \"@azure/msal-react\";\n\n// MSAL configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst configuration = {\n  auth: {\n    clientId: `${process.env.REACT_APP_MS_AUTH_APP_ID}`,\n    redirectUri: `${process.env.REACT_APP_MS_AUTH_REDIRECT_URI}`,\n    authority: `${process.env.REACT_APP_MS_AUTH_AUTHORITY}`\n  },\n  cache: {\n    cacheLocation: \"sessionStorage\",\n    storeAuthStateInCookie: true\n  }\n};\nconst msalInstance = new PublicClientApplication(configuration);\nconst LoginMS = () => {\n  _s();\n  const {\n    accounts\n  } = useMsal();\n  console.log(\"before\", accounts);\n  const [isAuth, setIsAuth] = useState(false);\n  useEffect(() => {\n    // Initialize the MSAL instance when the component mounts\n    msalInstance.initialize();\n  }, []);\n  useEffect(() => {\n    if (isAuth) {\n      console.log(\"after\", accounts);\n    }\n  }, [isAuth]);\n  async function msLoginPopup() {\n    try {\n      await msalInstance.loginPopup({\n        scopes: [`${process.env.REACT_APP_MS_AUTH_READ_SCOPE}`],\n        prompt: \"select_account\"\n      });\n      setIsAuth(true);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: msLoginPopup,\n    children: \"Login using Micorsoft\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 10\n  }, this);\n};\n_s(LoginMS, \"J+76Uwluz/1YHKTnmO8JQMRpvGs=\", false, function () {\n  return [useMsal];\n});\n_c = LoginMS;\nexport default LoginMS;\nvar _c;\n$RefreshReg$(_c, \"LoginMS\");","map":{"version":3,"names":["React","useState","useEffect","PublicClientApplication","useMsal","jsxDEV","_jsxDEV","configuration","auth","clientId","process","env","REACT_APP_MS_AUTH_APP_ID","redirectUri","REACT_APP_MS_AUTH_REDIRECT_URI","authority","REACT_APP_MS_AUTH_AUTHORITY","cache","cacheLocation","storeAuthStateInCookie","msalInstance","LoginMS","_s","accounts","console","log","isAuth","setIsAuth","initialize","msLoginPopup","loginPopup","scopes","REACT_APP_MS_AUTH_READ_SCOPE","prompt","error","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/react-typescript/intelli-gui/src/components/common/LoginMS.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Configuration, PublicClientApplication } from \"@azure/msal-browser\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\n\r\n// MSAL configuration\r\nconst configuration: Configuration = {\r\n  auth: {\r\n    clientId: `${process.env.REACT_APP_MS_AUTH_APP_ID}`,\r\n    redirectUri: `${process.env.REACT_APP_MS_AUTH_REDIRECT_URI}`,\r\n    authority: `${process.env.REACT_APP_MS_AUTH_AUTHORITY}`,\r\n  },\r\n  cache: {\r\n    cacheLocation: \"sessionStorage\",\r\n    storeAuthStateInCookie: true,\r\n  },\r\n};\r\nconst msalInstance = new PublicClientApplication(configuration);\r\n\r\nconst LoginMS = () => {\r\n  const { accounts } = useMsal();\r\n  console.log(\"before\", accounts);\r\n  const [isAuth, setIsAuth] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Initialize the MSAL instance when the component mounts\r\n    msalInstance.initialize();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isAuth) {\r\n      console.log(\"after\", accounts);\r\n    }\r\n  }, [isAuth]);\r\n\r\n  async function msLoginPopup() {\r\n    try {\r\n      await msalInstance.loginPopup({\r\n        scopes: [`${process.env.REACT_APP_MS_AUTH_READ_SCOPE}`],\r\n        prompt: \"select_account\",\r\n      });\r\n      setIsAuth(true);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return <button onClick={msLoginPopup}>Login using Micorsoft</button>;\r\n};\r\n\r\nexport default LoginMS;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAAwBC,uBAAuB,QAAQ,qBAAqB;AAC5E,SAASC,OAAO,QAAQ,mBAAmB;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAA4B,GAAG;EACnCC,IAAI,EAAE;IACJC,QAAQ,EAAG,GAAEC,OAAO,CAACC,GAAG,CAACC,wBAAyB,EAAC;IACnDC,WAAW,EAAG,GAAEH,OAAO,CAACC,GAAG,CAACG,8BAA+B,EAAC;IAC5DC,SAAS,EAAG,GAAEL,OAAO,CAACC,GAAG,CAACK,2BAA4B;EACxD,CAAC;EACDC,KAAK,EAAE;IACLC,aAAa,EAAE,gBAAgB;IAC/BC,sBAAsB,EAAE;EAC1B;AACF,CAAC;AACD,MAAMC,YAAY,GAAG,IAAIjB,uBAAuB,CAACI,aAAa,CAAC;AAE/D,MAAMc,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAS,CAAC,GAAGnB,OAAO,CAAC,CAAC;EAC9BoB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,QAAQ,CAAC;EAC/B,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EAE3CC,SAAS,CAAC,MAAM;IACd;IACAkB,YAAY,CAACQ,UAAU,CAAC,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;EAEN1B,SAAS,CAAC,MAAM;IACd,IAAIwB,MAAM,EAAE;MACVF,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,QAAQ,CAAC;IAChC;EACF,CAAC,EAAE,CAACG,MAAM,CAAC,CAAC;EAEZ,eAAeG,YAAYA,CAAA,EAAG;IAC5B,IAAI;MACF,MAAMT,YAAY,CAACU,UAAU,CAAC;QAC5BC,MAAM,EAAE,CAAE,GAAErB,OAAO,CAACC,GAAG,CAACqB,4BAA6B,EAAC,CAAC;QACvDC,MAAM,EAAE;MACV,CAAC,CAAC;MACFN,SAAS,CAAC,IAAI,CAAC;IACjB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;IACpB;EACF;EAEA,oBAAO5B,OAAA;IAAQ6B,OAAO,EAAEN,YAAa;IAAAO,QAAA,EAAC;EAAqB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AACtE,CAAC;AAAClB,EAAA,CA7BID,OAAO;EAAA,QACUjB,OAAO;AAAA;AAAAqC,EAAA,GADxBpB,OAAO;AA+Bb,eAAeA,OAAO;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}