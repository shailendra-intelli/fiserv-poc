{"ast":null,"code":"/*! @azure/msal-browser v3.9.0 2024-02-07 */\n'use strict';\n\nimport { AsyncMemoryStorage } from './AsyncMemoryStorage.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst CryptoKeyStoreNames = {\n  asymmetricKeys: \"asymmetricKeys\",\n  symmetricKeys: \"symmetricKeys\"\n};\n/**\n * MSAL CryptoKeyStore DB Version 2\n */\nclass CryptoKeyStore {\n  constructor(logger) {\n    this.logger = logger;\n    this.asymmetricKeys = new AsyncMemoryStorage(this.logger, CryptoKeyStoreNames.asymmetricKeys);\n    this.symmetricKeys = new AsyncMemoryStorage(this.logger, CryptoKeyStoreNames.symmetricKeys);\n  }\n  async clear() {\n    // Delete in-memory keystores\n    this.asymmetricKeys.clearInMemory();\n    this.symmetricKeys.clearInMemory();\n    /**\n     * There is only one database, so calling clearPersistent on asymmetric keystore takes care of\n     * every persistent keystore\n     */\n    try {\n      await this.asymmetricKeys.clearPersistent();\n      return true;\n    } catch (e) {\n      if (e instanceof Error) {\n        this.logger.error(`Clearing keystore failed with error: ${e.message}`);\n      } else {\n        this.logger.error(\"Clearing keystore failed with unknown error\");\n      }\n      return false;\n    }\n  }\n}\nexport { CryptoKeyStore, CryptoKeyStoreNames };","map":{"version":3,"names":["CryptoKeyStoreNames","asymmetricKeys","symmetricKeys","CryptoKeyStore","constructor","logger","AsyncMemoryStorage","clear","clearInMemory","clearPersistent","e","Error","error","message"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\cache\\CryptoKeyStore.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger } from \"@azure/msal-common\";\nimport { CachedKeyPair } from \"../crypto/CryptoOps\";\nimport { AsyncMemoryStorage } from \"./AsyncMemoryStorage\";\n\nexport const CryptoKeyStoreNames = {\n    asymmetricKeys: \"asymmetricKeys\",\n    symmetricKeys: \"symmetricKeys\",\n} as const;\nexport type CryptoKeyStoreNames =\n    (typeof CryptoKeyStoreNames)[keyof typeof CryptoKeyStoreNames];\n\n/**\n * MSAL CryptoKeyStore DB Version 2\n */\nexport class CryptoKeyStore {\n    public asymmetricKeys: AsyncMemoryStorage<CachedKeyPair>;\n    public symmetricKeys: AsyncMemoryStorage<CryptoKey>;\n    public logger: Logger;\n\n    constructor(logger: Logger) {\n        this.logger = logger;\n        this.asymmetricKeys = new AsyncMemoryStorage<CachedKeyPair>(\n            this.logger,\n            CryptoKeyStoreNames.asymmetricKeys\n        );\n        this.symmetricKeys = new AsyncMemoryStorage<CryptoKey>(\n            this.logger,\n            CryptoKeyStoreNames.symmetricKeys\n        );\n    }\n\n    async clear(): Promise<boolean> {\n        // Delete in-memory keystores\n        this.asymmetricKeys.clearInMemory();\n        this.symmetricKeys.clearInMemory();\n\n        /**\n         * There is only one database, so calling clearPersistent on asymmetric keystore takes care of\n         * every persistent keystore\n         */\n        try {\n            await this.asymmetricKeys.clearPersistent();\n            return true;\n        } catch (e) {\n            if (e instanceof Error) {\n                this.logger.error(\n                    `Clearing keystore failed with error: ${e.message}`\n                );\n            } else {\n                this.logger.error(\n                    \"Clearing keystore failed with unknown error\"\n                );\n            }\n\n            return false;\n        }\n    }\n}\n"],"mappings":";;;;;AAAA;;;AAGG;AAMU,MAAAA,mBAAmB,GAAG;EAC/BC,cAAc,EAAE,gBAAgB;EAChCC,aAAa,EAAE;;AAKnB;;AAEG;MACUC,cAAc;EAKvBC,YAAYC,MAAc;IACtB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACJ,cAAc,GAAG,IAAIK,kBAAkB,CACxC,IAAI,CAACD,MAAM,EACXL,mBAAmB,CAACC,cAAc,CACrC;IACD,IAAI,CAACC,aAAa,GAAG,IAAII,kBAAkB,CACvC,IAAI,CAACD,MAAM,EACXL,mBAAmB,CAACE,aAAa,CACpC;;EAGL,MAAMK,KAAKA,CAAA;;IAEP,IAAI,CAACN,cAAc,CAACO,aAAa,EAAE;IACnC,IAAI,CAACN,aAAa,CAACM,aAAa,EAAE;IAElC;;;AAGG;IACH,IAAI;MACA,MAAM,IAAI,CAACP,cAAc,CAACQ,eAAe,EAAE;MAC3C,OAAO,IAAI;IACd,EAAC,OAAOC,CAAC,EAAE;MACR,IAAIA,CAAC,YAAYC,KAAK,EAAE;QACpB,IAAI,CAACN,MAAM,CAACO,KAAK,CAC2B,wCAAAF,CAAC,CAACG,OAAS,GACtD;MACJ,OAAM;QACH,IAAI,CAACR,MAAM,CAACO,KAAK,CACb,6CAA6C,CAChD;MACJ;MAED,OAAO,KAAK;IACf;;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}