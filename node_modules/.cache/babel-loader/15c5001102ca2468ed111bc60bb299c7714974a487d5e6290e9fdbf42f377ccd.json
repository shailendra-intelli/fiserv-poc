{"ast":null,"code":"/*! @azure/msal-browser v3.9.0 2024-02-07 */\n'use strict';\n\nimport { PerformanceEvents, PromptValue, invokeAsync, AuthError, invoke, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { InteractionType } from '../utils/BrowserConstants.mjs';\nimport { initiateAuthRequest, monitorIframeForHash } from '../interaction_handler/SilentHandler.mjs';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.mjs';\nimport { NativeInteractionClient } from './NativeInteractionClient.mjs';\nimport { InteractionHandler } from '../interaction_handler/InteractionHandler.mjs';\nimport { preconnect } from '../utils/BrowserUtils.mjs';\nimport { deserializeResponse } from '../response/ResponseHandler.mjs';\nimport { silentPromptValueError, silentLogoutUnsupported, nativeConnectionNotEstablished } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass SilentIframeClient extends StandardInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n    this.apiId = apiId;\n    this.nativeStorage = nativeStorageImpl;\n  }\n  /**\n   * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\n   * @param request\n   */\n  async acquireToken(request) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n    // Check that we have some SSO data\n    if (!request.loginHint && !request.sid && (!request.account || !request.account.username)) {\n      this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n    }\n    // Check that prompt is set to none or no_session, throw error if it is set to anything else.\n    if (request.prompt && request.prompt !== PromptValue.NONE && request.prompt !== PromptValue.NO_SESSION) {\n      throw createBrowserAuthError(silentPromptValueError);\n    }\n    // Create silent request\n    const silentRequest = await invokeAsync(this.initializeAuthorizationRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)({\n      ...request,\n      prompt: request.prompt || PromptValue.NONE\n    }, InteractionType.Silent);\n    preconnect(silentRequest.authority);\n    const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n    try {\n      // Initialize the client\n      const authClient = await invokeAsync(this.createAuthCodeClient.bind(this), PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, request.correlationId)(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions, silentRequest.account);\n      return await invokeAsync(this.silentTokenHelper.bind(this), PerformanceEvents.SilentIframeClientTokenHelper, this.logger, this.performanceClient, request.correlationId)(authClient, silentRequest);\n    } catch (e) {\n      if (e instanceof AuthError) {\n        e.setCorrelationId(this.correlationId);\n        serverTelemetryManager.cacheFailedRequest(e);\n      }\n      throw e;\n    }\n  }\n  /**\n   * Currently Unsupported\n   */\n  logout() {\n    // Synchronous so we must reject\n    return Promise.reject(createBrowserAuthError(silentLogoutUnsupported));\n  }\n  /**\n   * Helper which acquires an authorization code silently using a hidden iframe from given url\n   * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\n   * @param navigateUrl\n   * @param userRequestScopes\n   */\n  async silentTokenHelper(authClient, silentRequest) {\n    const correlationId = silentRequest.correlationId;\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientTokenHelper, correlationId);\n    // Create auth code request and generate PKCE params\n    const authCodeRequest = await invokeAsync(this.initializeAuthorizationCodeRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.logger, this.performanceClient, correlationId)(silentRequest);\n    // Create authorize request url\n    const navigateUrl = await invokeAsync(authClient.getAuthCodeUrl.bind(authClient), PerformanceEvents.GetAuthCodeUrl, this.logger, this.performanceClient, correlationId)({\n      ...silentRequest,\n      nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\n    });\n    // Create silent handler\n    const interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n    // Get the frame handle for the silent request\n    const msalFrame = await invokeAsync(initiateAuthRequest, PerformanceEvents.SilentHandlerInitiateAuthRequest, this.logger, this.performanceClient, correlationId)(navigateUrl, this.performanceClient, this.logger, correlationId, this.config.system.navigateFrameWait);\n    const responseType = this.config.auth.OIDCOptions.serverResponseType;\n    // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n    const responseString = await invokeAsync(monitorIframeForHash, PerformanceEvents.SilentHandlerMonitorIframeForHash, this.logger, this.performanceClient, correlationId)(msalFrame, this.config.system.iframeHashTimeout, this.config.system.pollIntervalMilliseconds, this.performanceClient, this.logger, correlationId, responseType);\n    const serverParams = invoke(deserializeResponse, PerformanceEvents.DeserializeResponse, this.logger, this.performanceClient, this.correlationId)(responseString, responseType, this.logger);\n    if (serverParams.accountId) {\n      this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n      if (!this.nativeMessageHandler) {\n        throw createBrowserAuthError(nativeConnectionNotEstablished);\n      }\n      const nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, correlationId);\n      const {\n        userRequestState\n      } = ProtocolUtils.parseRequestState(this.browserCrypto, silentRequest.state);\n      return invokeAsync(nativeInteractionClient.acquireToken.bind(nativeInteractionClient), PerformanceEvents.NativeInteractionClientAcquireToken, this.logger, this.performanceClient, correlationId)({\n        ...silentRequest,\n        state: userRequestState,\n        prompt: silentRequest.prompt || PromptValue.NONE\n      });\n    }\n    // Handle response from hash string\n    return invokeAsync(interactionHandler.handleCodeResponse.bind(interactionHandler), PerformanceEvents.HandleCodeResponse, this.logger, this.performanceClient, correlationId)(serverParams, silentRequest);\n  }\n}\nexport { SilentIframeClient };","map":{"version":3,"names":["SilentIframeClient","StandardInteractionClient","constructor","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","nativeStorage","acquireToken","request","addQueueMeasurement","PerformanceEvents","SilentIframeClientAcquireToken","loginHint","sid","account","username","warning","prompt","PromptValue","NONE","NO_SESSION","createBrowserAuthError","silentPromptValueError","silentRequest","invokeAsync","initializeAuthorizationRequest","bind","StandardInteractionClientInitializeAuthorizationRequest","InteractionType","Silent","preconnect","authority","serverTelemetryManager","initializeServerTelemetryManager","authClient","createAuthCodeClient","StandardInteractionClientCreateAuthCodeClient","azureCloudOptions","silentTokenHelper","SilentIframeClientTokenHelper","e","AuthError","setCorrelationId","cacheFailedRequest","logout","Promise","reject","silentLogoutUnsupported","authCodeRequest","initializeAuthorizationCodeRequest","StandardInteractionClientInitializeAuthorizationCodeRequest","navigateUrl","getAuthCodeUrl","GetAuthCodeUrl","nativeBroker","NativeMessageHandler","isNativeAvailable","authenticationScheme","interactionHandler","InteractionHandler","browserStorage","msalFrame","initiateAuthRequest","SilentHandlerInitiateAuthRequest","system","navigateFrameWait","responseType","auth","OIDCOptions","serverResponseType","responseString","monitorIframeForHash","SilentHandlerMonitorIframeForHash","iframeHashTimeout","pollIntervalMilliseconds","serverParams","invoke","deserializeResponse","DeserializeResponse","accountId","verbose","nativeConnectionNotEstablished","nativeInteractionClient","NativeInteractionClient","userRequestState","ProtocolUtils","parseRequestState","state","NativeInteractionClientAcquireToken","handleCodeResponse","HandleCodeResponse"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\SilentIframeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    Logger,\n    PromptValue,\n    CommonAuthorizationCodeRequest,\n    AuthorizationCodeClient,\n    AuthError,\n    ProtocolUtils,\n    IPerformanceClient,\n    PerformanceEvents,\n    invokeAsync,\n    invoke,\n} from \"@azure/msal-common\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient\";\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError\";\nimport { InteractionType, ApiId } from \"../utils/BrowserConstants\";\nimport {\n    initiateAuthRequest,\n    monitorIframeForHash,\n} from \"../interaction_handler/SilentHandler\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { NativeInteractionClient } from \"./NativeInteractionClient\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { InteractionHandler } from \"../interaction_handler/InteractionHandler\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport * as ResponseHandler from \"../response/ResponseHandler\";\n\nexport class SilentIframeClient extends StandardInteractionClient {\n    protected apiId: ApiId;\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        apiId: ApiId,\n        performanceClient: IPerformanceClient,\n        nativeStorageImpl: BrowserCacheManager,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            storageImpl,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            nativeMessageHandler,\n            correlationId\n        );\n        this.apiId = apiId;\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\n     * @param request\n     */\n    async acquireToken(\n        request: SsoSilentRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentIframeClientAcquireToken,\n            request.correlationId\n        );\n        // Check that we have some SSO data\n        if (\n            !request.loginHint &&\n            !request.sid &&\n            (!request.account || !request.account.username)\n        ) {\n            this.logger.warning(\n                \"No user hint provided. The authorization server may need more information to complete this request.\"\n            );\n        }\n\n        // Check that prompt is set to none or no_session, throw error if it is set to anything else.\n        if (\n            request.prompt &&\n            request.prompt !== PromptValue.NONE &&\n            request.prompt !== PromptValue.NO_SESSION\n        ) {\n            throw createBrowserAuthError(\n                BrowserAuthErrorCodes.silentPromptValueError\n            );\n        }\n\n        // Create silent request\n        const silentRequest: AuthorizationUrlRequest = await invokeAsync(\n            this.initializeAuthorizationRequest.bind(this),\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(\n            {\n                ...request,\n                prompt: request.prompt || PromptValue.NONE,\n            },\n            InteractionType.Silent\n        );\n        BrowserUtils.preconnect(silentRequest.authority);\n\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            this.apiId\n        );\n\n        try {\n            // Initialize the client\n            const authClient: AuthorizationCodeClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(\n                serverTelemetryManager,\n                silentRequest.authority,\n                silentRequest.azureCloudOptions,\n                silentRequest.account\n            );\n\n            return await invokeAsync(\n                this.silentTokenHelper.bind(this),\n                PerformanceEvents.SilentIframeClientTokenHelper,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(authClient, silentRequest);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            throw e;\n        }\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(\n            createBrowserAuthError(\n                BrowserAuthErrorCodes.silentLogoutUnsupported\n            )\n        );\n    }\n\n    /**\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\n     * @param navigateUrl\n     * @param userRequestScopes\n     */\n    protected async silentTokenHelper(\n        authClient: AuthorizationCodeClient,\n        silentRequest: AuthorizationUrlRequest\n    ): Promise<AuthenticationResult> {\n        const correlationId = silentRequest.correlationId;\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentIframeClientTokenHelper,\n            correlationId\n        );\n\n        // Create auth code request and generate PKCE params\n        const authCodeRequest: CommonAuthorizationCodeRequest =\n            await invokeAsync(\n                this.initializeAuthorizationCodeRequest.bind(this),\n                PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n                this.logger,\n                this.performanceClient,\n                correlationId\n            )(silentRequest);\n\n        // Create authorize request url\n        const navigateUrl = await invokeAsync(\n            authClient.getAuthCodeUrl.bind(authClient),\n            PerformanceEvents.GetAuthCodeUrl,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )({\n            ...silentRequest,\n            nativeBroker: NativeMessageHandler.isNativeAvailable(\n                this.config,\n                this.logger,\n                this.nativeMessageHandler,\n                silentRequest.authenticationScheme\n            ),\n        });\n\n        // Create silent handler\n        const interactionHandler = new InteractionHandler(\n            authClient,\n            this.browserStorage,\n            authCodeRequest,\n            this.logger,\n            this.performanceClient\n        );\n        // Get the frame handle for the silent request\n        const msalFrame = await invokeAsync(\n            initiateAuthRequest,\n            PerformanceEvents.SilentHandlerInitiateAuthRequest,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(\n            navigateUrl,\n            this.performanceClient,\n            this.logger,\n            correlationId,\n            this.config.system.navigateFrameWait\n        );\n        const responseType = this.config.auth.OIDCOptions.serverResponseType;\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const responseString = await invokeAsync(\n            monitorIframeForHash,\n            PerformanceEvents.SilentHandlerMonitorIframeForHash,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(\n            msalFrame,\n            this.config.system.iframeHashTimeout,\n            this.config.system.pollIntervalMilliseconds,\n            this.performanceClient,\n            this.logger,\n            correlationId,\n            responseType\n        );\n        const serverParams = invoke(\n            ResponseHandler.deserializeResponse,\n            PerformanceEvents.DeserializeResponse,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(responseString, responseType, this.logger);\n\n        if (serverParams.accountId) {\n            this.logger.verbose(\n                \"Account id found in hash, calling WAM for token\"\n            );\n            if (!this.nativeMessageHandler) {\n                throw createBrowserAuthError(\n                    BrowserAuthErrorCodes.nativeConnectionNotEstablished\n                );\n            }\n            const nativeInteractionClient = new NativeInteractionClient(\n                this.config,\n                this.browserStorage,\n                this.browserCrypto,\n                this.logger,\n                this.eventHandler,\n                this.navigationClient,\n                this.apiId,\n                this.performanceClient,\n                this.nativeMessageHandler,\n                serverParams.accountId,\n                this.browserStorage,\n                correlationId\n            );\n            const { userRequestState } = ProtocolUtils.parseRequestState(\n                this.browserCrypto,\n                silentRequest.state\n            );\n            return invokeAsync(\n                nativeInteractionClient.acquireToken.bind(\n                    nativeInteractionClient\n                ),\n                PerformanceEvents.NativeInteractionClientAcquireToken,\n                this.logger,\n                this.performanceClient,\n                correlationId\n            )({\n                ...silentRequest,\n                state: userRequestState,\n                prompt: silentRequest.prompt || PromptValue.NONE,\n            });\n        }\n\n        // Handle response from hash string\n        return invokeAsync(\n            interactionHandler.handleCodeResponse.bind(interactionHandler),\n            PerformanceEvents.HandleCodeResponse,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(serverParams, silentRequest);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}