{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-typescript\\\\intelli-gui\\\\src\\\\components\\\\common\\\\LoginMS.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\nimport { useDispatch } from \"react-redux\";\nimport { login } from \"../../store/reducers/authSlice\";\nimport { useNavigate } from \"react-router-dom\";\n\n// MSAL configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst configuration = {\n  auth: {\n    clientId: `${process.env.REACT_APP_MS_AUTH_APP_ID}`,\n    redirectUri: `${process.env.REACT_APP_MS_AUTH_REDIRECT_URI}`,\n    authority: `${process.env.REACT_APP_MS_AUTH_AUTHORITY}`\n  },\n  cache: {\n    cacheLocation: \"sessionStorage\",\n    storeAuthStateInCookie: true\n  }\n};\nconst msalInstance = new PublicClientApplication(configuration);\nconst LoginMS = () => {\n  _s();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  useEffect(() => {\n    msalInstance.initialize();\n  }, []);\n  async function msLoginPopup() {\n    try {\n      var _data$account;\n      let data = await msalInstance.loginPopup({\n        scopes: [`${process.env.REACT_APP_MS_AUTH_READ_SCOPE}`],\n        prompt: \"select_account\"\n      });\n      const userData = data === null || data === void 0 ? void 0 : (_data$account = data.account) === null || _data$account === void 0 ? void 0 : _data$account.idTokenClaims;\n      console.log(\"user data\", userData);\n      dispatch(login({\n        email: userData.preferred_username,\n        name: userData.name\n      }));\n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: msLoginPopup,\n    children: \"Login using Micorsoft\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n};\n_s(LoginMS, \"s5YDugppCHA/sTog5Ue+JVWibms=\", false, function () {\n  return [useDispatch, useNavigate];\n});\n_c = LoginMS;\nexport default LoginMS;\nvar _c;\n$RefreshReg$(_c, \"LoginMS\");","map":{"version":3,"names":["React","useEffect","PublicClientApplication","useDispatch","login","useNavigate","jsxDEV","_jsxDEV","configuration","auth","clientId","process","env","REACT_APP_MS_AUTH_APP_ID","redirectUri","REACT_APP_MS_AUTH_REDIRECT_URI","authority","REACT_APP_MS_AUTH_AUTHORITY","cache","cacheLocation","storeAuthStateInCookie","msalInstance","LoginMS","_s","dispatch","navigate","initialize","msLoginPopup","_data$account","data","loginPopup","scopes","REACT_APP_MS_AUTH_READ_SCOPE","prompt","userData","account","idTokenClaims","console","log","email","preferred_username","name","error","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/react-typescript/intelli-gui/src/components/common/LoginMS.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Configuration, PublicClientApplication } from \"@azure/msal-browser\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { login } from \"../../store/reducers/authSlice\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// MSAL configuration\r\nconst configuration: Configuration = {\r\n  auth: {\r\n    clientId: `${process.env.REACT_APP_MS_AUTH_APP_ID}`,\r\n    redirectUri: `${process.env.REACT_APP_MS_AUTH_REDIRECT_URI}`,\r\n    authority: `${process.env.REACT_APP_MS_AUTH_AUTHORITY}`,\r\n  },\r\n  cache: {\r\n    cacheLocation: \"sessionStorage\",\r\n    storeAuthStateInCookie: true,\r\n  },\r\n};\r\nconst msalInstance = new PublicClientApplication(configuration);\r\n\r\nconst LoginMS = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    msalInstance.initialize();\r\n  }, []);\r\n\r\n  async function msLoginPopup() {\r\n    try {\r\n      let data = await msalInstance.loginPopup({\r\n        scopes: [`${process.env.REACT_APP_MS_AUTH_READ_SCOPE}`],\r\n        prompt: \"select_account\",\r\n      });\r\n      const userData: any = data?.account?.idTokenClaims;\r\n      console.log(\"user data\", userData);\r\n      dispatch(\r\n        login({\r\n          email: userData.preferred_username,\r\n          name: userData.name,\r\n        })\r\n      );\r\n      navigate(\"/dashboard\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return <button onClick={msLoginPopup}>Login using Micorsoft</button>;\r\n};\r\n\r\nexport default LoginMS;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAAwBC,uBAAuB,QAAQ,qBAAqB;AAC5E,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,KAAK,QAAQ,gCAAgC;AACtD,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAA4B,GAAG;EACnCC,IAAI,EAAE;IACJC,QAAQ,EAAG,GAAEC,OAAO,CAACC,GAAG,CAACC,wBAAyB,EAAC;IACnDC,WAAW,EAAG,GAAEH,OAAO,CAACC,GAAG,CAACG,8BAA+B,EAAC;IAC5DC,SAAS,EAAG,GAAEL,OAAO,CAACC,GAAG,CAACK,2BAA4B;EACxD,CAAC;EACDC,KAAK,EAAE;IACLC,aAAa,EAAE,gBAAgB;IAC/BC,sBAAsB,EAAE;EAC1B;AACF,CAAC;AACD,MAAMC,YAAY,GAAG,IAAInB,uBAAuB,CAACM,aAAa,CAAC;AAE/D,MAAMc,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGrB,WAAW,CAAC,CAAC;EAC9B,MAAMsB,QAAQ,GAAGpB,WAAW,CAAC,CAAC;EAE9BJ,SAAS,CAAC,MAAM;IACdoB,YAAY,CAACK,UAAU,CAAC,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;EAEN,eAAeC,YAAYA,CAAA,EAAG;IAC5B,IAAI;MAAA,IAAAC,aAAA;MACF,IAAIC,IAAI,GAAG,MAAMR,YAAY,CAACS,UAAU,CAAC;QACvCC,MAAM,EAAE,CAAE,GAAEpB,OAAO,CAACC,GAAG,CAACoB,4BAA6B,EAAC,CAAC;QACvDC,MAAM,EAAE;MACV,CAAC,CAAC;MACF,MAAMC,QAAa,GAAGL,IAAI,aAAJA,IAAI,wBAAAD,aAAA,GAAJC,IAAI,CAAEM,OAAO,cAAAP,aAAA,uBAAbA,aAAA,CAAeQ,aAAa;MAClDC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEJ,QAAQ,CAAC;MAClCV,QAAQ,CACNpB,KAAK,CAAC;QACJmC,KAAK,EAAEL,QAAQ,CAACM,kBAAkB;QAClCC,IAAI,EAAEP,QAAQ,CAACO;MACjB,CAAC,CACH,CAAC;MACDhB,QAAQ,CAAC,YAAY,CAAC;IACxB,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdL,OAAO,CAACC,GAAG,CAACI,KAAK,CAAC;IACpB;EACF;EAEA,oBAAOnC,OAAA;IAAQoC,OAAO,EAAEhB,YAAa;IAAAiB,QAAA,EAAC;EAAqB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AACtE,CAAC;AAACzB,EAAA,CA7BID,OAAO;EAAA,QACMnB,WAAW,EACXE,WAAW;AAAA;AAAA4C,EAAA,GAFxB3B,OAAO;AA+Bb,eAAeA,OAAO;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}