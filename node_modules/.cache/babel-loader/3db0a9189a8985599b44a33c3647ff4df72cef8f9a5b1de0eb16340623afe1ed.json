{"ast":null,"code":"/*! @azure/msal-common v14.7.0 2024-02-07 */\n'use strict';\n\nimport { CacheOutcome, Constants, SERVER_TELEM_CONSTANTS, Separators } from '../../utils/Constants.mjs';\nimport { AuthError } from '../../error/AuthError.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/** @internal */\nclass ServerTelemetryManager {\n  constructor(telemetryRequest, cacheManager) {\n    this.cacheOutcome = CacheOutcome.NOT_APPLICABLE;\n    this.cacheManager = cacheManager;\n    this.apiId = telemetryRequest.apiId;\n    this.correlationId = telemetryRequest.correlationId;\n    this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n    this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n    this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n  }\n  /**\n   * API to add MSER Telemetry to request\n   */\n  generateCurrentRequestHeaderValue() {\n    const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\n    const platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    const regionDiscoveryFields = this.getRegionDiscoveryFields();\n    const requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  }\n  /**\n   * API to add MSER Telemetry for the last failed request\n   */\n  generateLastRequestHeaderValue() {\n    const lastRequests = this.getLastRequests();\n    const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    const failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    const errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    const errorCount = lastRequests.errors.length;\n    // Indicate whether this header contains all data or partial data\n    const overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n    const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  }\n  /**\n   * API to cache token failures for MSER data capture\n   * @param error\n   */\n  cacheFailedRequest(error) {\n    const lastRequests = this.getLastRequests();\n    if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n      // Remove a cached error to make room, first in first out\n      lastRequests.failedRequests.shift(); // apiId\n      lastRequests.failedRequests.shift(); // correlationId\n      lastRequests.errors.shift();\n    }\n    lastRequests.failedRequests.push(this.apiId, this.correlationId);\n    if (error instanceof Error && !!error && error.toString()) {\n      if (error instanceof AuthError) {\n        if (error.subError) {\n          lastRequests.errors.push(error.subError);\n        } else if (error.errorCode) {\n          lastRequests.errors.push(error.errorCode);\n        } else {\n          lastRequests.errors.push(error.toString());\n        }\n      } else {\n        lastRequests.errors.push(error.toString());\n      }\n    } else {\n      lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n    }\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return;\n  }\n  /**\n   * Update server telemetry cache entry by incrementing cache hit counter\n   */\n  incrementCacheHits() {\n    const lastRequests = this.getLastRequests();\n    lastRequests.cacheHits += 1;\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return lastRequests.cacheHits;\n  }\n  /**\n   * Get the server telemetry entity from cache or initialize a new one\n   */\n  getLastRequests() {\n    const initialValue = {\n      failedRequests: [],\n      errors: [],\n      cacheHits: 0\n    };\n    const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n    return lastRequests || initialValue;\n  }\n  /**\n   * Remove server telemetry cache entry\n   */\n  clearTelemetryCache() {\n    const lastRequests = this.getLastRequests();\n    const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    const errorCount = lastRequests.errors.length;\n    if (numErrorsFlushed === errorCount) {\n      // All errors were sent on last request, clear Telemetry cache\n      this.cacheManager.removeItem(this.telemetryCacheKey);\n    } else {\n      // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n      const serverTelemEntity = {\n        failedRequests: lastRequests.failedRequests.slice(numErrorsFlushed * 2),\n        errors: lastRequests.errors.slice(numErrorsFlushed),\n        cacheHits: 0\n      };\n      this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n    }\n  }\n  /**\n   * Returns the maximum number of errors that can be flushed to the server in the next network request\n   * @param serverTelemetryEntity\n   */\n  static maxErrorsToSend(serverTelemetryEntity) {\n    let i;\n    let maxErrors = 0;\n    let dataSize = 0;\n    const errorCount = serverTelemetryEntity.errors.length;\n    for (i = 0; i < errorCount; i++) {\n      // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n      const apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;\n      const correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;\n      const errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n      // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n      dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n      if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n        // Adding this entry to the header would still keep header size below the limit\n        maxErrors += 1;\n      } else {\n        break;\n      }\n    }\n    return maxErrors;\n  }\n  /**\n   * Get the region discovery fields\n   *\n   * @returns string\n   */\n  getRegionDiscoveryFields() {\n    const regionDiscoveryFields = [];\n    regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\n    return regionDiscoveryFields.join(\",\");\n  }\n  /**\n   * Update the region discovery metadata\n   *\n   * @param regionDiscoveryMetadata\n   * @returns void\n   */\n  updateRegionDiscoveryMetadata(regionDiscoveryMetadata) {\n    this.regionUsed = regionDiscoveryMetadata.region_used;\n    this.regionSource = regionDiscoveryMetadata.region_source;\n    this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n  }\n  /**\n   * Set cache outcome\n   */\n  setCacheOutcome(cacheOutcome) {\n    this.cacheOutcome = cacheOutcome;\n  }\n}\nexport { ServerTelemetryManager };","map":{"version":3,"names":["ServerTelemetryManager","constructor","telemetryRequest","cacheManager","cacheOutcome","CacheOutcome","NOT_APPLICABLE","apiId","correlationId","wrapperSKU","Constants","EMPTY_STRING","wrapperVer","telemetryCacheKey","SERVER_TELEM_CONSTANTS","CACHE_KEY","Separators","CACHE_KEY_SEPARATOR","clientId","generateCurrentRequestHeaderValue","request","VALUE_SEPARATOR","platformFields","join","regionDiscoveryFields","getRegionDiscoveryFields","requestWithRegionDiscoveryFields","SCHEMA_VERSION","CATEGORY_SEPARATOR","generateLastRequestHeaderValue","lastRequests","getLastRequests","maxErrors","maxErrorsToSend","failedRequests","slice","errors","errorCount","length","overflow","OVERFLOW_TRUE","OVERFLOW_FALSE","cacheHits","cacheFailedRequest","error","MAX_CACHED_ERRORS","shift","push","Error","toString","AuthError","subError","errorCode","UNKNOWN_ERROR","setServerTelemetry","incrementCacheHits","initialValue","getServerTelemetry","clearTelemetryCache","numErrorsFlushed","removeItem","serverTelemEntity","serverTelemetryEntity","i","dataSize","MAX_LAST_HEADER_BYTES","regionUsed","regionSource","regionOutcome","updateRegionDiscoveryMetadata","regionDiscoveryMetadata","region_used","region_source","region_outcome","setCacheOutcome"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\telemetry\\server\\ServerTelemetryManager.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    SERVER_TELEM_CONSTANTS,\n    Separators,\n    CacheOutcome,\n    Constants,\n    RegionDiscoverySources,\n    RegionDiscoveryOutcomes,\n} from \"../../utils/Constants\";\nimport { CacheManager } from \"../../cache/CacheManager\";\nimport { AuthError } from \"../../error/AuthError\";\nimport { ServerTelemetryRequest } from \"./ServerTelemetryRequest\";\nimport { ServerTelemetryEntity } from \"../../cache/entities/ServerTelemetryEntity\";\nimport { RegionDiscoveryMetadata } from \"../../authority/RegionDiscoveryMetadata\";\n\n/** @internal */\nexport class ServerTelemetryManager {\n    private cacheManager: CacheManager;\n    private apiId: number;\n    private correlationId: string;\n    private telemetryCacheKey: string;\n    private wrapperSKU: String;\n    private wrapperVer: String;\n    private regionUsed: string | undefined;\n    private regionSource: RegionDiscoverySources | undefined;\n    private regionOutcome: RegionDiscoveryOutcomes | undefined;\n    private cacheOutcome: CacheOutcome = CacheOutcome.NOT_APPLICABLE;\n\n    constructor(\n        telemetryRequest: ServerTelemetryRequest,\n        cacheManager: CacheManager\n    ) {\n        this.cacheManager = cacheManager;\n        this.apiId = telemetryRequest.apiId;\n        this.correlationId = telemetryRequest.correlationId;\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n\n        this.telemetryCacheKey =\n            SERVER_TELEM_CONSTANTS.CACHE_KEY +\n            Separators.CACHE_KEY_SEPARATOR +\n            telemetryRequest.clientId;\n    }\n\n    /**\n     * API to add MSER Telemetry to request\n     */\n    generateCurrentRequestHeaderValue(): string {\n        const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\n        const platformFields = [this.wrapperSKU, this.wrapperVer].join(\n            SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR\n        );\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\n        const requestWithRegionDiscoveryFields = [\n            request,\n            regionDiscoveryFields,\n        ].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n\n        return [\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            requestWithRegionDiscoveryFields,\n            platformFields,\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n\n    /**\n     * API to add MSER Telemetry for the last failed request\n     */\n    generateLastRequestHeaderValue(): string {\n        const lastRequests = this.getLastRequests();\n\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const failedRequests = lastRequests.failedRequests\n            .slice(0, 2 * maxErrors)\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errors = lastRequests.errors\n            .slice(0, maxErrors)\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errorCount = lastRequests.errors.length;\n\n        // Indicate whether this header contains all data or partial data\n        const overflow =\n            maxErrors < errorCount\n                ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE\n                : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n        const platformFields = [errorCount, overflow].join(\n            SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR\n        );\n\n        return [\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            lastRequests.cacheHits,\n            failedRequests,\n            errors,\n            platformFields,\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n\n    /**\n     * API to cache token failures for MSER data capture\n     * @param error\n     */\n    cacheFailedRequest(error: unknown): void {\n        const lastRequests = this.getLastRequests();\n        if (\n            lastRequests.errors.length >=\n            SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS\n        ) {\n            // Remove a cached error to make room, first in first out\n            lastRequests.failedRequests.shift(); // apiId\n            lastRequests.failedRequests.shift(); // correlationId\n            lastRequests.errors.shift();\n        }\n\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\n\n        if (error instanceof Error && !!error && error.toString()) {\n            if (error instanceof AuthError) {\n                if (error.subError) {\n                    lastRequests.errors.push(error.subError);\n                } else if (error.errorCode) {\n                    lastRequests.errors.push(error.errorCode);\n                } else {\n                    lastRequests.errors.push(error.toString());\n                }\n            } else {\n                lastRequests.errors.push(error.toString());\n            }\n        } else {\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n        }\n\n        this.cacheManager.setServerTelemetry(\n            this.telemetryCacheKey,\n            lastRequests\n        );\n\n        return;\n    }\n\n    /**\n     * Update server telemetry cache entry by incrementing cache hit counter\n     */\n    incrementCacheHits(): number {\n        const lastRequests = this.getLastRequests();\n        lastRequests.cacheHits += 1;\n\n        this.cacheManager.setServerTelemetry(\n            this.telemetryCacheKey,\n            lastRequests\n        );\n        return lastRequests.cacheHits;\n    }\n\n    /**\n     * Get the server telemetry entity from cache or initialize a new one\n     */\n    getLastRequests(): ServerTelemetryEntity {\n        const initialValue: ServerTelemetryEntity = {\n            failedRequests: [],\n            errors: [],\n            cacheHits: 0,\n        };\n        const lastRequests = this.cacheManager.getServerTelemetry(\n            this.telemetryCacheKey\n        ) as ServerTelemetryEntity;\n\n        return lastRequests || initialValue;\n    }\n\n    /**\n     * Remove server telemetry cache entry\n     */\n    clearTelemetryCache(): void {\n        const lastRequests = this.getLastRequests();\n        const numErrorsFlushed =\n            ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const errorCount = lastRequests.errors.length;\n        if (numErrorsFlushed === errorCount) {\n            // All errors were sent on last request, clear Telemetry cache\n            this.cacheManager.removeItem(this.telemetryCacheKey);\n        } else {\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n            const serverTelemEntity: ServerTelemetryEntity = {\n                failedRequests: lastRequests.failedRequests.slice(\n                    numErrorsFlushed * 2\n                ), // failedRequests contains 2 items for each error\n                errors: lastRequests.errors.slice(numErrorsFlushed),\n                cacheHits: 0,\n            };\n\n            this.cacheManager.setServerTelemetry(\n                this.telemetryCacheKey,\n                serverTelemEntity\n            );\n        }\n    }\n\n    /**\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\n     * @param serverTelemetryEntity\n     */\n    static maxErrorsToSend(\n        serverTelemetryEntity: ServerTelemetryEntity\n    ): number {\n        let i;\n        let maxErrors = 0;\n        let dataSize = 0;\n        const errorCount = serverTelemetryEntity.errors.length;\n        for (i = 0; i < errorCount; i++) {\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n            const apiId =\n                serverTelemetryEntity.failedRequests[2 * i] ||\n                Constants.EMPTY_STRING;\n            const correlationId =\n                serverTelemetryEntity.failedRequests[2 * i + 1] ||\n                Constants.EMPTY_STRING;\n            const errorCode =\n                serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n            dataSize +=\n                apiId.toString().length +\n                correlationId.toString().length +\n                errorCode.length +\n                3;\n\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n                // Adding this entry to the header would still keep header size below the limit\n                maxErrors += 1;\n            } else {\n                break;\n            }\n        }\n\n        return maxErrors;\n    }\n\n    /**\n     * Get the region discovery fields\n     *\n     * @returns string\n     */\n    getRegionDiscoveryFields(): string {\n        const regionDiscoveryFields: string[] = [];\n\n        regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(\n            this.regionOutcome || Constants.EMPTY_STRING\n        );\n\n        return regionDiscoveryFields.join(\",\");\n    }\n\n    /**\n     * Update the region discovery metadata\n     *\n     * @param regionDiscoveryMetadata\n     * @returns void\n     */\n    updateRegionDiscoveryMetadata(\n        regionDiscoveryMetadata: RegionDiscoveryMetadata\n    ): void {\n        this.regionUsed = regionDiscoveryMetadata.region_used;\n        this.regionSource = regionDiscoveryMetadata.region_source;\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n    }\n\n    /**\n     * Set cache outcome\n     */\n    setCacheOutcome(cacheOutcome: CacheOutcome): void {\n        this.cacheOutcome = cacheOutcome;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}