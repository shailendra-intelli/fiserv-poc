{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { updateServers } from \"./uploadSlice\";\nconst initialState = [];\nconst serversSlice = createSlice({\n  name: \"serversSlice\",\n  initialState,\n  reducers: {\n    addServer: (state, action) => {\n      console.log(\"Actions\", action);\n    },\n    editServer: (state, action) => {},\n    deleteServer: (state, action) => {},\n    deleteAllServers: (state, action) => {}\n  }\n});\nexport const addServer = createAsyncThunk(\"servers/addServer\", async (newServer, {\n  getState,\n  dispatch\n}) => {\n  // Access the state using getState()\n  const currentState = getState();\n\n  // Update the state of the serversSlice if needed\n  console.log(currentState);\n\n  // Update the 'servers' array in the uploadSlice\n  //const updatedServers = [...selectServers(currentState), newServer];\n  //dispatch(updateServers(updatedServers));\n});\n\nexport const selectCurrentData = state => state.upload.value;\nexport const updateServersInUploadSlice = createAsyncThunk(\"servers/updateServersInUploadSlice\", async (servers, {\n  dispatch,\n  getState\n}) => {\n  const currentState = getState();\n  console.log(\"in async thunk\", currentState);\n  dispatch(updateServers(servers));\n});\n\n//export const { addServer } = serversSlice.actions;\nexport const serverDetails = state => state.upload.value.servers;\nexport default serversSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","updateServers","initialState","serversSlice","name","reducers","addServer","state","action","console","log","editServer","deleteServer","deleteAllServers","newServer","getState","dispatch","currentState","selectCurrentData","upload","value","updateServersInUploadSlice","servers","serverDetails","reducer"],"sources":["D:/react-typescript/intelli-gui/src/store/reducers/serversSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, current } from \"@reduxjs/toolkit\";\r\nimport { ServerData } from \"../../utils/constant/types\";\r\nimport { RootState } from \"../store\";\r\nimport { updateServers } from \"./uploadSlice\";\r\n\r\nconst initialState: ServerData[] = [];\r\n\r\nconst serversSlice = createSlice({\r\n  name: \"serversSlice\",\r\n  initialState,\r\n  reducers: {\r\n    addServer: (state, action) => {\r\n      console.log(\"Actions\", action);\r\n    },\r\n    editServer: (state, action) => {},\r\n    deleteServer: (state, action) => {},\r\n    deleteAllServers: (state, action) => {},\r\n  },\r\n});\r\n\r\nexport const addServer = createAsyncThunk(\r\n  \"servers/addServer\",\r\n  async (newServer: ServerData, { getState, dispatch }) => {\r\n    // Access the state using getState()\r\n    const currentState = getState() as RootState;\r\n\r\n    // Update the state of the serversSlice if needed\r\n    console.log(currentState);\r\n\r\n    // Update the 'servers' array in the uploadSlice\r\n    //const updatedServers = [...selectServers(currentState), newServer];\r\n    //dispatch(updateServers(updatedServers));\r\n  }\r\n);\r\n\r\nexport const selectCurrentData = (state: RootState) => state.upload.value;\r\nexport const updateServersInUploadSlice = createAsyncThunk(\r\n  \"servers/updateServersInUploadSlice\",\r\n  async (servers: ServerData[], { dispatch, getState }): Promise<void> => {\r\n    const currentState = getState();\r\n    console.log(\"in async thunk\", currentState);\r\n    dispatch(updateServers(servers));\r\n  }\r\n);\r\n\r\n//export const { addServer } = serversSlice.actions;\r\nexport const serverDetails = (state: { upload: any }) =>\r\n  state.upload.value.servers;\r\nexport default serversSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAiB,kBAAkB;AAGzE,SAASC,aAAa,QAAQ,eAAe;AAE7C,MAAMC,YAA0B,GAAG,EAAE;AAErC,MAAMC,YAAY,GAAGH,WAAW,CAAC;EAC/BI,IAAI,EAAE,cAAc;EACpBF,YAAY;EACZG,QAAQ,EAAE;IACRC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5BC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,MAAM,CAAC;IAChC,CAAC;IACDG,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK,CAAC,CAAC;IACjCI,YAAY,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK,CAAC,CAAC;IACnCK,gBAAgB,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK,CAAC;EACxC;AACF,CAAC,CAAC;AAEF,OAAO,MAAMF,SAAS,GAAGP,gBAAgB,CACvC,mBAAmB,EACnB,OAAOe,SAAqB,EAAE;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EACvD;EACA,MAAMC,YAAY,GAAGF,QAAQ,CAAC,CAAc;;EAE5C;EACAN,OAAO,CAACC,GAAG,CAACO,YAAY,CAAC;;EAEzB;EACA;EACA;AACF,CACF,CAAC;;AAED,OAAO,MAAMC,iBAAiB,GAAIX,KAAgB,IAAKA,KAAK,CAACY,MAAM,CAACC,KAAK;AACzE,OAAO,MAAMC,0BAA0B,GAAGtB,gBAAgB,CACxD,oCAAoC,EACpC,OAAOuB,OAAqB,EAAE;EAAEN,QAAQ;EAAED;AAAS,CAAC,KAAoB;EACtE,MAAME,YAAY,GAAGF,QAAQ,CAAC,CAAC;EAC/BN,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEO,YAAY,CAAC;EAC3CD,QAAQ,CAACf,aAAa,CAACqB,OAAO,CAAC,CAAC;AAClC,CACF,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAIhB,KAAsB,IAClDA,KAAK,CAACY,MAAM,CAACC,KAAK,CAACE,OAAO;AAC5B,eAAenB,YAAY,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}