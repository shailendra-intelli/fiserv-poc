{"ast":null,"code":"/*! @azure/msal-common v14.7.0 2024-02-07 */\n'use strict';\n\nimport { buildClientConfiguration } from '../config/ClientConfiguration.mjs';\nimport { NetworkManager } from '../network/NetworkManager.mjs';\nimport { Logger } from '../logger/Logger.mjs';\nimport { HeaderNames, Constants } from '../utils/Constants.mjs';\nimport { name, version } from '../packageMetadata.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { createDiscoveredInstance } from '../authority/AuthorityFactory.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n * @internal\n */\nclass BaseClient {\n  constructor(configuration, performanceClient) {\n    // Set the configuration\n    this.config = buildClientConfiguration(configuration);\n    // Initialize the logger\n    this.logger = new Logger(this.config.loggerOptions, name, version);\n    // Initialize crypto\n    this.cryptoUtils = this.config.cryptoInterface;\n    // Initialize storage interface\n    this.cacheManager = this.config.storageInterface;\n    // Set the network interface\n    this.networkClient = this.config.networkInterface;\n    // Set the NetworkManager\n    this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\n    // Set TelemetryManager\n    this.serverTelemetryManager = this.config.serverTelemetryManager;\n    // set Authority\n    this.authority = this.config.authOptions.authority;\n    // set performance telemetry client\n    this.performanceClient = performanceClient;\n  }\n  /**\n   * Creates default headers for requests to token endpoint\n   */\n  createTokenRequestHeaders(ccsCred) {\n    const headers = {};\n    headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n    if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n          break;\n        case CcsCredentialType.UPN:\n          headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n          break;\n      }\n    }\n    return headers;\n  }\n  /**\n   * Http post to token endpoint\n   * @param tokenEndpoint\n   * @param queryString\n   * @param headers\n   * @param thumbprint\n   */\n  async executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId, queuedEvent) {\n    if (queuedEvent) {\n      this.performanceClient?.addQueueMeasurement(queuedEvent, correlationId);\n    }\n    const response = await this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, {\n      body: queryString,\n      headers: headers\n    });\n    this.performanceClient?.addFields({\n      refreshTokenSize: response.body.refresh_token?.length || 0,\n      httpVerToken: response.headers?.[HeaderNames.X_MS_HTTP_VERSION] || \"\"\n    }, correlationId);\n    if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n      // Telemetry data successfully logged by server, clear Telemetry cache\n      this.config.serverTelemetryManager.clearTelemetryCache();\n    }\n    return response;\n  }\n  /**\n   * Updates the authority object of the client. Endpoint discovery must be completed.\n   * @param updatedAuthority\n   */\n  async updateAuthority(cloudInstanceHostname, correlationId) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, correlationId);\n    const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\n    const cloudInstanceAuthority = await createDiscoveredInstance(cloudInstanceAuthorityUri, this.networkClient, this.cacheManager, this.authority.options, this.logger, correlationId, this.performanceClient);\n    this.authority = cloudInstanceAuthority;\n  }\n  /**\n   * Creates query string for the /token request\n   * @param request\n   */\n  createTokenQueryParameters(request) {\n    const parameterBuilder = new RequestParameterBuilder();\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  }\n}\nexport { BaseClient };","map":{"version":3,"names":["BaseClient","constructor","configuration","performanceClient","config","buildClientConfiguration","logger","Logger","loggerOptions","name","version","cryptoUtils","cryptoInterface","cacheManager","storageInterface","networkClient","networkInterface","networkManager","NetworkManager","serverTelemetryManager","authority","authOptions","createTokenRequestHeaders","ccsCred","headers","HeaderNames","CONTENT_TYPE","Constants","URL_FORM_CONTENT_TYPE","systemOptions","preventCorsPreflight","type","CcsCredentialType","HOME_ACCOUNT_ID","clientInfo","buildClientInfoFromHomeAccountId","credential","CCS_HEADER","uid","utid","e","verbose","UPN","executePostToTokenEndpoint","tokenEndpoint","queryString","thumbprint","correlationId","queuedEvent","addQueueMeasurement","response","sendPostRequest","body","addFields","refreshTokenSize","refresh_token","length","httpVerToken","X_MS_HTTP_VERSION","status","clearTelemetryCache","updateAuthority","cloudInstanceHostname","PerformanceEvents","UpdateTokenEndpointAuthority","cloudInstanceAuthorityUri","tenant","cloudInstanceAuthority","createDiscoveredInstance","options","createTokenQueryParameters","request","parameterBuilder","RequestParameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\client\\BaseClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ClientConfiguration,\n    buildClientConfiguration,\n    CommonClientConfiguration,\n} from \"../config/ClientConfiguration\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { NetworkManager, NetworkResponse } from \"../network/NetworkManager\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { Authority } from \"../authority/Authority\";\nimport { Logger } from \"../logger/Logger\";\nimport { Constants, HeaderNames } from \"../utils/Constants\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { version, name } from \"../packageMetadata\";\nimport { CcsCredential, CcsCredentialType } from \"../account/CcsCredential\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\nimport { createDiscoveredInstance } from \"../authority/AuthorityFactory\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\n\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n * @internal\n */\nexport abstract class BaseClient {\n    // Logger object\n    public logger: Logger;\n\n    // Application config\n    protected config: CommonClientConfiguration;\n\n    // Crypto Interface\n    protected cryptoUtils: ICrypto;\n\n    // Storage Interface\n    protected cacheManager: CacheManager;\n\n    // Network Interface\n    protected networkClient: INetworkModule;\n\n    // Server Telemetry Manager\n    protected serverTelemetryManager: ServerTelemetryManager | null;\n\n    // Network Manager\n    protected networkManager: NetworkManager;\n\n    // Default authority object\n    public authority: Authority;\n\n    // Performance telemetry client\n    protected performanceClient?: IPerformanceClient;\n\n    protected constructor(\n        configuration: ClientConfiguration,\n        performanceClient?: IPerformanceClient\n    ) {\n        // Set the configuration\n        this.config = buildClientConfiguration(configuration);\n\n        // Initialize the logger\n        this.logger = new Logger(this.config.loggerOptions, name, version);\n\n        // Initialize crypto\n        this.cryptoUtils = this.config.cryptoInterface;\n\n        // Initialize storage interface\n        this.cacheManager = this.config.storageInterface;\n\n        // Set the network interface\n        this.networkClient = this.config.networkInterface;\n\n        // Set the NetworkManager\n        this.networkManager = new NetworkManager(\n            this.networkClient,\n            this.cacheManager\n        );\n\n        // Set TelemetryManager\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\n\n        // set Authority\n        this.authority = this.config.authOptions.authority;\n\n        // set performance telemetry client\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Creates default headers for requests to token endpoint\n     */\n    protected createTokenRequestHeaders(\n        ccsCred?: CcsCredential\n    ): Record<string, string> {\n        const headers: Record<string, string> = {};\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(\n                            ccsCred.credential\n                        );\n                        headers[\n                            HeaderNames.CCS_HEADER\n                        ] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n                    } catch (e) {\n                        this.logger.verbose(\n                            \"Could not parse home account ID for CCS Header: \" +\n                                e\n                        );\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    headers[\n                        HeaderNames.CCS_HEADER\n                    ] = `UPN: ${ccsCred.credential}`;\n                    break;\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Http post to token endpoint\n     * @param tokenEndpoint\n     * @param queryString\n     * @param headers\n     * @param thumbprint\n     */\n    protected async executePostToTokenEndpoint(\n        tokenEndpoint: string,\n        queryString: string,\n        headers: Record<string, string>,\n        thumbprint: RequestThumbprint,\n        correlationId: string,\n        queuedEvent?: string\n    ): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        if (queuedEvent) {\n            this.performanceClient?.addQueueMeasurement(\n                queuedEvent,\n                correlationId\n            );\n        }\n\n        const response =\n            await this.networkManager.sendPostRequest<ServerAuthorizationTokenResponse>(\n                thumbprint,\n                tokenEndpoint,\n                { body: queryString, headers: headers }\n            );\n        this.performanceClient?.addFields(\n            {\n                refreshTokenSize: response.body.refresh_token?.length || 0,\n                httpVerToken:\n                    response.headers?.[HeaderNames.X_MS_HTTP_VERSION] || \"\",\n            },\n            correlationId\n        );\n\n        if (\n            this.config.serverTelemetryManager &&\n            response.status < 500 &&\n            response.status !== 429\n        ) {\n            // Telemetry data successfully logged by server, clear Telemetry cache\n            this.config.serverTelemetryManager.clearTelemetryCache();\n        }\n\n        return response;\n    }\n\n    /**\n     * Updates the authority object of the client. Endpoint discovery must be completed.\n     * @param updatedAuthority\n     */\n    async updateAuthority(\n        cloudInstanceHostname: string,\n        correlationId: string\n    ): Promise<void> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.UpdateTokenEndpointAuthority,\n            correlationId\n        );\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\n        const cloudInstanceAuthority = await createDiscoveredInstance(\n            cloudInstanceAuthorityUri,\n            this.networkClient,\n            this.cacheManager,\n            this.authority.options,\n            this.logger,\n            correlationId,\n            this.performanceClient\n        );\n        this.authority = cloudInstanceAuthority;\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request\n     */\n    createTokenQueryParameters(request: BaseAuthRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(\n                request.tokenQueryParameters\n            );\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}