{"ast":null,"code":"/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n\nimport { buildClientConfiguration } from '../config/ClientConfiguration.mjs';\nimport { NetworkManager } from '../network/NetworkManager.mjs';\nimport { Logger } from '../logger/Logger.mjs';\nimport { HeaderNames, Constants } from '../utils/Constants.mjs';\nimport { name, version } from '../packageMetadata.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.mjs';\nimport { AuthorityFactory } from '../authority/AuthorityFactory.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n * @internal\n */\nclass BaseClient {\n  constructor(configuration, performanceClient) {\n    // Set the configuration\n    this.config = buildClientConfiguration(configuration);\n    // Initialize the logger\n    this.logger = new Logger(this.config.loggerOptions, name, version);\n    // Initialize crypto\n    this.cryptoUtils = this.config.cryptoInterface;\n    // Initialize storage interface\n    this.cacheManager = this.config.storageInterface;\n    // Set the network interface\n    this.networkClient = this.config.networkInterface;\n    // Set the NetworkManager\n    this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\n    // Set TelemetryManager\n    this.serverTelemetryManager = this.config.serverTelemetryManager;\n    // set Authority\n    this.authority = this.config.authOptions.authority;\n    // set performance telemetry client\n    this.performanceClient = performanceClient;\n  }\n  /**\n   * Creates default headers for requests to token endpoint\n   */\n  createTokenRequestHeaders(ccsCred) {\n    const headers = {};\n    headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n    if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n          break;\n        case CcsCredentialType.UPN:\n          headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n          break;\n      }\n    }\n    return headers;\n  }\n  /**\n   * Http post to token endpoint\n   * @param tokenEndpoint\n   * @param queryString\n   * @param headers\n   * @param thumbprint\n   */\n  async executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId, queuedEvent) {\n    if (queuedEvent) {\n      this.performanceClient?.addQueueMeasurement(queuedEvent, correlationId);\n    }\n    const response = await this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, {\n      body: queryString,\n      headers: headers\n    });\n    this.performanceClient?.addFields({\n      refreshTokenSize: response.body.refresh_token?.length || 0,\n      httpVerToken: response.headers?.[HeaderNames.X_MS_HTTP_VERSION] || \"\"\n    }, correlationId);\n    if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n      // Telemetry data successfully logged by server, clear Telemetry cache\n      this.config.serverTelemetryManager.clearTelemetryCache();\n    }\n    return response;\n  }\n  /**\n   * Updates the authority object of the client. Endpoint discovery must be completed.\n   * @param updatedAuthority\n   */\n  async updateAuthority(cloudInstanceHostname, correlationId) {\n    this.performanceClient?.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, correlationId);\n    const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\n    const cloudInstanceAuthority = await AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, this.networkClient, this.cacheManager, this.authority.options, this.logger, this.performanceClient, correlationId);\n    this.authority = cloudInstanceAuthority;\n  }\n  /**\n   * Creates query string for the /token request\n   * @param request\n   */\n  createTokenQueryParameters(request) {\n    const parameterBuilder = new RequestParameterBuilder();\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  }\n}\nexport { BaseClient };","map":{"version":3,"names":["BaseClient","constructor","configuration","performanceClient","config","buildClientConfiguration","logger","Logger","loggerOptions","name","version","cryptoUtils","cryptoInterface","cacheManager","storageInterface","networkManager","NetworkManager","networkClient","headers","HeaderNames","CONTENT_TYPE","Constants","URL_FORM_CONTENT_TYPE","systemOptions","preventCorsPreflight","ccsCred","clientInfo","buildClientInfoFromHomeAccountId","credential","CCS_HEADER","uid","utid"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\client\\BaseClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ClientConfiguration,\n    buildClientConfiguration,\n    CommonClientConfiguration,\n} from \"../config/ClientConfiguration\";\nimport { INetworkModule } from \"../network/INetworkModule\";\nimport { NetworkManager, NetworkResponse } from \"../network/NetworkManager\";\nimport { ICrypto } from \"../crypto/ICrypto\";\nimport { Authority } from \"../authority/Authority\";\nimport { Logger } from \"../logger/Logger\";\nimport { Constants, HeaderNames } from \"../utils/Constants\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { CacheManager } from \"../cache/CacheManager\";\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { version, name } from \"../packageMetadata\";\nimport { CcsCredential, CcsCredentialType } from \"../account/CcsCredential\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\nimport { AuthorityFactory } from \"../authority/AuthorityFactory\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\n\n/**\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\n * @internal\n */\nexport abstract class BaseClient {\n    // Logger object\n    public logger: Logger;\n\n    // Application config\n    protected config: CommonClientConfiguration;\n\n    // Crypto Interface\n    protected cryptoUtils: ICrypto;\n\n    // Storage Interface\n    protected cacheManager: CacheManager;\n\n    // Network Interface\n    protected networkClient: INetworkModule;\n\n    // Server Telemetry Manager\n    protected serverTelemetryManager: ServerTelemetryManager | null;\n\n    // Network Manager\n    protected networkManager: NetworkManager;\n\n    // Default authority object\n    public authority: Authority;\n\n    // Performance telemetry client\n    protected performanceClient?: IPerformanceClient;\n\n    protected constructor(\n        configuration: ClientConfiguration,\n        performanceClient?: IPerformanceClient\n    ) {\n        // Set the configuration\n        this.config = buildClientConfiguration(configuration);\n\n        // Initialize the logger\n        this.logger = new Logger(this.config.loggerOptions, name, version);\n\n        // Initialize crypto\n        this.cryptoUtils = this.config.cryptoInterface;\n\n        // Initialize storage interface\n        this.cacheManager = this.config.storageInterface;\n\n        // Set the network interface\n        this.networkClient = this.config.networkInterface;\n\n        // Set the NetworkManager\n        this.networkManager = new NetworkManager(\n            this.networkClient,\n            this.cacheManager\n        );\n\n        // Set TelemetryManager\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\n\n        // set Authority\n        this.authority = this.config.authOptions.authority;\n\n        // set performance telemetry client\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Creates default headers for requests to token endpoint\n     */\n    protected createTokenRequestHeaders(\n        ccsCred?: CcsCredential\n    ): Record<string, string> {\n        const headers: Record<string, string> = {};\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(\n                            ccsCred.credential\n                        );\n                        headers[\n                            HeaderNames.CCS_HEADER\n                        ] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n                    } catch (e) {\n                        this.logger.verbose(\n                            \"Could not parse home account ID for CCS Header: \" +\n                                e\n                        );\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    headers[\n                        HeaderNames.CCS_HEADER\n                    ] = `UPN: ${ccsCred.credential}`;\n                    break;\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Http post to token endpoint\n     * @param tokenEndpoint\n     * @param queryString\n     * @param headers\n     * @param thumbprint\n     */\n    protected async executePostToTokenEndpoint(\n        tokenEndpoint: string,\n        queryString: string,\n        headers: Record<string, string>,\n        thumbprint: RequestThumbprint,\n        correlationId: string,\n        queuedEvent?: string\n    ): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        if (queuedEvent) {\n            this.performanceClient?.addQueueMeasurement(\n                queuedEvent,\n                correlationId\n            );\n        }\n\n        const response =\n            await this.networkManager.sendPostRequest<ServerAuthorizationTokenResponse>(\n                thumbprint,\n                tokenEndpoint,\n                { body: queryString, headers: headers }\n            );\n        this.performanceClient?.addFields(\n            {\n                refreshTokenSize: response.body.refresh_token?.length || 0,\n                httpVerToken:\n                    response.headers?.[HeaderNames.X_MS_HTTP_VERSION] || \"\",\n            },\n            correlationId\n        );\n\n        if (\n            this.config.serverTelemetryManager &&\n            response.status < 500 &&\n            response.status !== 429\n        ) {\n            // Telemetry data successfully logged by server, clear Telemetry cache\n            this.config.serverTelemetryManager.clearTelemetryCache();\n        }\n\n        return response;\n    }\n\n    /**\n     * Updates the authority object of the client. Endpoint discovery must be completed.\n     * @param updatedAuthority\n     */\n    async updateAuthority(\n        cloudInstanceHostname: string,\n        correlationId: string\n    ): Promise<void> {\n        this.performanceClient?.addQueueMeasurement(\n            PerformanceEvents.UpdateTokenEndpointAuthority,\n            correlationId\n        );\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\n        const cloudInstanceAuthority =\n            await AuthorityFactory.createDiscoveredInstance(\n                cloudInstanceAuthorityUri,\n                this.networkClient,\n                this.cacheManager,\n                this.authority.options,\n                this.logger,\n                this.performanceClient,\n                correlationId\n            );\n        this.authority = cloudInstanceAuthority;\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request\n     */\n    createTokenQueryParameters(request: BaseAuthRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(\n                request.tokenQueryParameters\n            );\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;AAKA;AAKA;AACA;AACA;;;AAoBG;AACH;AAEiB,MAAAA,UAAS;EAGtBC,WAAUA,CAAAC,aAAQ,EAAAC,iBAA0B;IAG5C;IAGA,KAASC,MAAC,GAAAC,wBAA2B,CAAAH,aAAA;IAGrC;IAGA,KAASI,MAAuB,OAAAC,MAAA,MAAEH,MAAsB,CAAAI,aAAA,EAAAC,IAAA,EAAAC,OAAQ;IAGhE;IAGgB,KAAAC,WAAW,GAAC,KAAAP,MAAA,CAAAQ,eAAA;IAG5B;IAES,KAAAC,YAAA,QAAAT,MACQ,CAAEU,gBAAA;IAkCnB;;IAEG;IACH,KAASC,cAAC,OAAAC,cACE,KAAe,CAAAC,aAClB,MAAC,CAAMJ,YAAA,CAAQ;IA8BxB;;;;;;EAMG;EACa;AA0ChB;;;IAGG,MAAAK,OAAA;IACGA,OAAA,CAAAC,WACF,CAAAC,YAAA,CAAqB,GAAEC,SACvB,CAAAC,qBACD;IAmBH,UAAAlB,MAAA,CAAAmB,aAAA,CAAAC,oBAAA,IAAAC,OAAA;;;UAGG;YACH,MAA0BC,UAAU,GAAAC,gCAAwB,CAAAF,OAAA,CAAAG,UAAA;YAW/DV,OAAA,CAAAC,WAAA,CAAAU,UAAA,WAAAH,UAAA,CAAAI,GAAA,IAAAJ,UAAA,CAAAK,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}