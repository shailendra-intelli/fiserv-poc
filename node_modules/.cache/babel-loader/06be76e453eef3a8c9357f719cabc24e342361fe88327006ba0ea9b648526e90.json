{"ast":null,"code":"/*! @azure/msal-browser v3.9.0 2024-02-07 */\n'use strict';\n\nimport { AccountEntity, PerformanceEvents, AuthenticationScheme, createClientConfigurationError, ClientConfigurationErrorCodes, StringUtils, UrlString, ServerTelemetryManager, Authority, invokeAsync, AuthorityFactory } from '@azure/msal-common';\nimport { version } from '../packageMetadata.mjs';\nimport { BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { getCurrentUri } from '../utils/BrowserUtils.mjs';\nimport { createNewGuid } from '../crypto/BrowserCrypto.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass BaseInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) {\n    this.config = config;\n    this.browserStorage = storageImpl;\n    this.browserCrypto = browserCrypto;\n    this.networkClient = this.config.system.networkClient;\n    this.eventHandler = eventHandler;\n    this.navigationClient = navigationClient;\n    this.nativeMessageHandler = nativeMessageHandler;\n    this.correlationId = correlationId || createNewGuid();\n    this.logger = logger.clone(BrowserConstants.MSAL_SKU, version, this.correlationId);\n    this.performanceClient = performanceClient;\n  }\n  async clearCacheOnLogout(account) {\n    if (account) {\n      if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\n        this.logger.verbose(\"Setting active account to null\");\n        this.browserStorage.setActiveAccount(null);\n      }\n      // Clear given account.\n      try {\n        await this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account));\n        this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n      } catch (error) {\n        this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n      }\n    } else {\n      try {\n        this.logger.verbose(\"No account provided in logout request, clearing all cache items.\", this.correlationId);\n        // Clear all accounts and tokens\n        await this.browserStorage.clear();\n        // Clear any stray keys from IndexedDB\n        await this.browserCrypto.clearKeystore();\n      } catch (e) {\n        this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n      }\n    }\n  }\n  /**\n   * Initializer function for all request APIs\n   * @param request\n   */\n  async initializeBaseRequest(request) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeBaseRequest, this.correlationId);\n    const authority = request.authority || this.config.auth.authority;\n    const scopes = [...(request && request.scopes || [])];\n    const validatedRequest = {\n      ...request,\n      correlationId: this.correlationId,\n      authority,\n      scopes\n    };\n    // Set authenticationScheme to BEARER if not explicitly set in the request\n    if (!validatedRequest.authenticationScheme) {\n      validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n      this.logger.verbose('Authentication Scheme wasn\\'t explicitly set in request, defaulting to \"Bearer\" request');\n    } else {\n      if (validatedRequest.authenticationScheme === AuthenticationScheme.SSH) {\n        if (!request.sshJwk) {\n          throw createClientConfigurationError(ClientConfigurationErrorCodes.missingSshJwk);\n        }\n        if (!request.sshKid) {\n          throw createClientConfigurationError(ClientConfigurationErrorCodes.missingSshKid);\n        }\n      }\n      this.logger.verbose(`Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`);\n    }\n    // Set requested claims hash if claims-based caching is enabled and claims were requested\n    if (this.config.cache.claimsBasedCachingEnabled && request.claims &&\n    // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\n    !StringUtils.isEmptyObj(request.claims)) {\n      validatedRequest.requestedClaimsHash = await this.browserCrypto.hashString(request.claims);\n    }\n    return validatedRequest;\n  }\n  /**\n   *\n   * Use to get the redirect uri configured in MSAL or null.\n   * @param requestRedirectUri\n   * @returns Redirect URL\n   *\n   */\n  getRedirectUri(requestRedirectUri) {\n    this.logger.verbose(\"getRedirectUri called\");\n    const redirectUri = requestRedirectUri || this.config.auth.redirectUri || getCurrentUri();\n    return UrlString.getAbsoluteUrl(redirectUri, getCurrentUri());\n  }\n  /**\n   *\n   * @param apiId\n   * @param correlationId\n   * @param forceRefresh\n   */\n  initializeServerTelemetryManager(apiId, forceRefresh) {\n    this.logger.verbose(\"initializeServerTelemetryManager called\");\n    const telemetryPayload = {\n      clientId: this.config.auth.clientId,\n      correlationId: this.correlationId,\n      apiId: apiId,\n      forceRefresh: forceRefresh || false,\n      wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n      wrapperVer: this.browserStorage.getWrapperMetadata()[1]\n    };\n    return new ServerTelemetryManager(telemetryPayload, this.browserStorage);\n  }\n  /**\n   * Used to get a discovered version of the default authority.\n   * @param requestAuthority\n   * @param requestAzureCloudOptions\n   * @param account\n   */\n  async getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions, account) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n    const authorityOptions = {\n      protocolMode: this.config.auth.protocolMode,\n      OIDCOptions: this.config.auth.OIDCOptions,\n      knownAuthorities: this.config.auth.knownAuthorities,\n      cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n      authorityMetadata: this.config.auth.authorityMetadata,\n      skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n    };\n    // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\n    const userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;\n    // fall back to the authority from config\n    const builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);\n    const discoveredAuthority = await invokeAsync(AuthorityFactory.createDiscoveredInstance, PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.logger, this.performanceClient, this.correlationId)(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.correlationId, this.performanceClient);\n    if (account && !discoveredAuthority.isAlias(account.environment)) {\n      throw createClientConfigurationError(ClientConfigurationErrorCodes.authorityMismatch);\n    }\n    return discoveredAuthority;\n  }\n}\nexport { BaseInteractionClient };","map":{"version":3,"names":["BaseInteractionClient","constructor","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeMessageHandler","correlationId","browserStorage","networkClient","system","createNewGuid","clone","BrowserConstants","MSAL_SKU","version","clearCacheOnLogout","account","AccountEntity","accountInfoIsEqual","getActiveAccount","verbose","setActiveAccount","removeAccount","generateAccountCacheKey","error","clear","clearKeystore","e","initializeBaseRequest","request","addQueueMeasurement","PerformanceEvents","InitializeBaseRequest","authority","auth","scopes","validatedRequest","authenticationScheme","AuthenticationScheme","BEARER","SSH","sshJwk","createClientConfigurationError","ClientConfigurationErrorCodes","missingSshJwk","sshKid","missingSshKid","cache","claimsBasedCachingEnabled","claims","StringUtils","isEmptyObj","requestedClaimsHash","hashString","getRedirectUri","requestRedirectUri","redirectUri","getCurrentUri","UrlString","getAbsoluteUrl","initializeServerTelemetryManager","apiId","forceRefresh","telemetryPayload","clientId","wrapperSKU","getWrapperMetadata","wrapperVer","ServerTelemetryManager","getDiscoveredAuthority","requestAuthority","requestAzureCloudOptions","StandardInteractionClientGetDiscoveredAuthority","authorityOptions","protocolMode","OIDCOptions","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","userAuthority","builtAuthority","Authority","generateAuthority","azureCloudOptions","discoveredAuthority","invokeAsync","AuthorityFactory","createDiscoveredInstance","AuthorityFactoryCreateDiscoveredInstance","isAlias","environment","authorityMismatch"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-browser\\src\\interaction_client\\BaseInteractionClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    INetworkModule,\n    Logger,\n    AccountInfo,\n    AccountEntity,\n    BaseAuthRequest,\n    AuthenticationScheme,\n    UrlString,\n    ServerTelemetryManager,\n    ServerTelemetryRequest,\n    createClientConfigurationError,\n    ClientConfigurationErrorCodes,\n    Authority,\n    AuthorityOptions,\n    AuthorityFactory,\n    IPerformanceClient,\n    PerformanceEvents,\n    StringUtils,\n    AzureCloudOptions,\n    invokeAsync,\n} from \"@azure/msal-common\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { version } from \"../packageMetadata\";\nimport { BrowserConstants } from \"../utils/BrowserConstants\";\nimport * as BrowserUtils from \"../utils/BrowserUtils\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\nimport { createNewGuid } from \"../crypto/BrowserCrypto\";\n\nexport abstract class BaseInteractionClient {\n    protected config: BrowserConfiguration;\n    protected browserStorage: BrowserCacheManager;\n    protected browserCrypto: ICrypto;\n    protected networkClient: INetworkModule;\n    protected logger: Logger;\n    protected eventHandler: EventHandler;\n    protected navigationClient: INavigationClient;\n    protected nativeMessageHandler: NativeMessageHandler | undefined;\n    protected correlationId: string;\n    protected performanceClient: IPerformanceClient;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        performanceClient: IPerformanceClient,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        this.config = config;\n        this.browserStorage = storageImpl;\n        this.browserCrypto = browserCrypto;\n        this.networkClient = this.config.system.networkClient;\n        this.eventHandler = eventHandler;\n        this.navigationClient = navigationClient;\n        this.nativeMessageHandler = nativeMessageHandler;\n        this.correlationId = correlationId || createNewGuid();\n        this.logger = logger.clone(\n            BrowserConstants.MSAL_SKU,\n            version,\n            this.correlationId\n        );\n        this.performanceClient = performanceClient;\n    }\n\n    abstract acquireToken(\n        request: RedirectRequest | PopupRequest | SsoSilentRequest\n    ): Promise<AuthenticationResult | void>;\n\n    abstract logout(\n        request: EndSessionRequest | ClearCacheRequest | undefined\n    ): Promise<void>;\n\n    protected async clearCacheOnLogout(\n        account?: AccountInfo | null\n    ): Promise<void> {\n        if (account) {\n            if (\n                AccountEntity.accountInfoIsEqual(\n                    account,\n                    this.browserStorage.getActiveAccount(),\n                    false\n                )\n            ) {\n                this.logger.verbose(\"Setting active account to null\");\n                this.browserStorage.setActiveAccount(null);\n            }\n            // Clear given account.\n            try {\n                await this.browserStorage.removeAccount(\n                    AccountEntity.generateAccountCacheKey(account)\n                );\n                this.logger.verbose(\n                    \"Cleared cache items belonging to the account provided in the logout request.\"\n                );\n            } catch (error) {\n                this.logger.error(\n                    \"Account provided in logout request was not found. Local cache unchanged.\"\n                );\n            }\n        } else {\n            try {\n                this.logger.verbose(\n                    \"No account provided in logout request, clearing all cache items.\",\n                    this.correlationId\n                );\n                // Clear all accounts and tokens\n                await this.browserStorage.clear();\n                // Clear any stray keys from IndexedDB\n                await this.browserCrypto.clearKeystore();\n            } catch (e) {\n                this.logger.error(\n                    \"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\"\n                );\n            }\n        }\n    }\n\n    /**\n     * Initializer function for all request APIs\n     * @param request\n     */\n    protected async initializeBaseRequest(\n        request: Partial<BaseAuthRequest>\n    ): Promise<BaseAuthRequest> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.InitializeBaseRequest,\n            this.correlationId\n        );\n        const authority = request.authority || this.config.auth.authority;\n\n        const scopes = [...((request && request.scopes) || [])];\n\n        const validatedRequest: BaseAuthRequest = {\n            ...request,\n            correlationId: this.correlationId,\n            authority,\n            scopes,\n        };\n\n        // Set authenticationScheme to BEARER if not explicitly set in the request\n        if (!validatedRequest.authenticationScheme) {\n            validatedRequest.authenticationScheme = AuthenticationScheme.BEARER;\n            this.logger.verbose(\n                'Authentication Scheme wasn\\'t explicitly set in request, defaulting to \"Bearer\" request'\n            );\n        } else {\n            if (\n                validatedRequest.authenticationScheme ===\n                AuthenticationScheme.SSH\n            ) {\n                if (!request.sshJwk) {\n                    throw createClientConfigurationError(\n                        ClientConfigurationErrorCodes.missingSshJwk\n                    );\n                }\n                if (!request.sshKid) {\n                    throw createClientConfigurationError(\n                        ClientConfigurationErrorCodes.missingSshKid\n                    );\n                }\n            }\n            this.logger.verbose(\n                `Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`\n            );\n        }\n\n        // Set requested claims hash if claims-based caching is enabled and claims were requested\n        if (\n            this.config.cache.claimsBasedCachingEnabled &&\n            request.claims &&\n            // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\n            !StringUtils.isEmptyObj(request.claims)\n        ) {\n            validatedRequest.requestedClaimsHash =\n                await this.browserCrypto.hashString(request.claims);\n        }\n\n        return validatedRequest;\n    }\n\n    /**\n     *\n     * Use to get the redirect uri configured in MSAL or null.\n     * @param requestRedirectUri\n     * @returns Redirect URL\n     *\n     */\n    getRedirectUri(requestRedirectUri?: string): string {\n        this.logger.verbose(\"getRedirectUri called\");\n        const redirectUri =\n            requestRedirectUri ||\n            this.config.auth.redirectUri ||\n            BrowserUtils.getCurrentUri();\n        return UrlString.getAbsoluteUrl(\n            redirectUri,\n            BrowserUtils.getCurrentUri()\n        );\n    }\n\n    /**\n     *\n     * @param apiId\n     * @param correlationId\n     * @param forceRefresh\n     */\n    protected initializeServerTelemetryManager(\n        apiId: number,\n        forceRefresh?: boolean\n    ): ServerTelemetryManager {\n        this.logger.verbose(\"initializeServerTelemetryManager called\");\n        const telemetryPayload: ServerTelemetryRequest = {\n            clientId: this.config.auth.clientId,\n            correlationId: this.correlationId,\n            apiId: apiId,\n            forceRefresh: forceRefresh || false,\n            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n            wrapperVer: this.browserStorage.getWrapperMetadata()[1],\n        };\n\n        return new ServerTelemetryManager(\n            telemetryPayload,\n            this.browserStorage\n        );\n    }\n\n    /**\n     * Used to get a discovered version of the default authority.\n     * @param requestAuthority\n     * @param requestAzureCloudOptions\n     * @param account\n     */\n    protected async getDiscoveredAuthority(\n        requestAuthority?: string,\n        requestAzureCloudOptions?: AzureCloudOptions,\n        account?: AccountInfo\n    ): Promise<Authority> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n            this.correlationId\n        );\n        const authorityOptions: AuthorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            OIDCOptions: this.config.auth.OIDCOptions,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n            skipAuthorityMetadataCache:\n                this.config.auth.skipAuthorityMetadataCache,\n        };\n\n        // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\n        const userAuthority = requestAuthority\n            ? requestAuthority\n            : this.config.auth.authority;\n\n        // fall back to the authority from config\n        const builtAuthority = Authority.generateAuthority(\n            userAuthority,\n            requestAzureCloudOptions || this.config.auth.azureCloudOptions\n        );\n        const discoveredAuthority = await invokeAsync(\n            AuthorityFactory.createDiscoveredInstance,\n            PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\n            this.logger,\n            this.performanceClient,\n            this.correlationId\n        )(\n            builtAuthority,\n            this.config.system.networkClient,\n            this.browserStorage,\n            authorityOptions,\n            this.logger,\n            this.correlationId,\n            this.performanceClient\n        );\n\n        if (account && !discoveredAuthority.isAlias(account.environment)) {\n            throw createClientConfigurationError(\n                ClientConfigurationErrorCodes.authorityMismatch\n            );\n        }\n\n        return discoveredAuthority;\n    }\n}\n"],"mappings":";;;;;;;;;AAAA;;;AAGG;MAwCmBA,qBAAqB;EAYvCC,YACIC,MAA4B,EAC5BC,WAAgC,EAChCC,aAAsB,EACtBC,MAAc,EACdC,YAA0B,EAC1BC,gBAAmC,EACnCC,iBAAqC,EACrCC,oBAA2C,EAC3CC,aAAsB;IAEtB,IAAI,CAACR,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACS,cAAc,GAAGR,WAAW;IACjC,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACQ,aAAa,GAAG,IAAI,CAACV,MAAM,CAACW,MAAM,CAACD,aAAa;IACrD,IAAI,CAACN,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACE,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACC,aAAa,GAAGA,aAAa,IAAII,aAAa,EAAE;IACrD,IAAI,CAACT,MAAM,GAAGA,MAAM,CAACU,KAAK,CACtBC,gBAAgB,CAACC,QAAQ,EACzBC,OAAO,EACP,IAAI,CAACR,aAAa,CACrB;IACD,IAAI,CAACF,iBAAiB,GAAGA,iBAAiB;;EAWpC,MAAMW,kBAAkBA,CAC9BC,OAA4B;IAE5B,IAAIA,OAAO,EAAE;MACT,IACIC,aAAa,CAACC,kBAAkB,CAC5BF,OAAO,EACP,IAAI,CAACT,cAAc,CAACY,gBAAgB,EAAE,EACtC,KAAK,CACR,EACH;QACE,IAAI,CAAClB,MAAM,CAACmB,OAAO,CAAC,gCAAgC,CAAC;QACrD,IAAI,CAACb,cAAc,CAACc,gBAAgB,CAAC,IAAI,CAAC;MAC7C;;MAED,IAAI;QACA,MAAM,IAAI,CAACd,cAAc,CAACe,aAAa,CACnCL,aAAa,CAACM,uBAAuB,CAACP,OAAO,CAAC,CACjD;QACD,IAAI,CAACf,MAAM,CAACmB,OAAO,CACf,8EAA8E,CACjF;MACJ,EAAC,OAAOI,KAAK,EAAE;QACZ,IAAI,CAACvB,MAAM,CAACuB,KAAK,CACb,0EAA0E,CAC7E;MACJ;IACJ,OAAM;MACH,IAAI;QACA,IAAI,CAACvB,MAAM,CAACmB,OAAO,CACf,kEAAkE,EAClE,IAAI,CAACd,aAAa,CACrB;;QAED,MAAM,IAAI,CAACC,cAAc,CAACkB,KAAK,EAAE;;QAEjC,MAAM,IAAI,CAACzB,aAAa,CAAC0B,aAAa,EAAE;MAC3C,EAAC,OAAOC,CAAC,EAAE;QACR,IAAI,CAAC1B,MAAM,CAACuB,KAAK,CACb,4EAA4E,CAC/E;MACJ;IACJ;;EAGL;;;AAGG;EACO,MAAMI,qBAAqBA,CACjCC,OAAiC;IAEjC,IAAI,CAACzB,iBAAiB,CAAC0B,mBAAmB,CACtCC,iBAAiB,CAACC,qBAAqB,EACvC,IAAI,CAAC1B,aAAa,CACrB;IACD,MAAM2B,SAAS,GAAGJ,OAAO,CAACI,SAAS,IAAI,IAAI,CAACnC,MAAM,CAACoC,IAAI,CAACD,SAAS;IAEjE,MAAME,MAAM,GAAG,CAAC,IAAKN,OAAO,IAAIA,OAAO,CAACM,MAAM,IAAK,EAAE,CAAC,CAAC;IAEvD,MAAMC,gBAAgB,GAAoB;MACtC,GAAGP,OAAO;MACVvB,aAAa,EAAE,IAAI,CAACA,aAAa;MACjC2B,SAAS;MACTE;KACH;;IAGD,IAAI,CAACC,gBAAgB,CAACC,oBAAoB,EAAE;MACxCD,gBAAgB,CAACC,oBAAoB,GAAGC,oBAAoB,CAACC,MAAM;MACnE,IAAI,CAACtC,MAAM,CAACmB,OAAO,CACf,yFAAyF,CAC5F;IACJ,OAAM;MACH,IACIgB,gBAAgB,CAACC,oBAAoB,KACrCC,oBAAoB,CAACE,GAAG,EAC1B;QACE,IAAI,CAACX,OAAO,CAACY,MAAM,EAAE;UACjB,MAAMC,8BAA8B,CAChCC,6BAA6B,CAACC,aAAa,CAC9C;QACJ;QACD,IAAI,CAACf,OAAO,CAACgB,MAAM,EAAE;UACjB,MAAMH,8BAA8B,CAChCC,6BAA6B,CAACG,aAAa,CAC9C;QACJ;MACJ;MACD,IAAI,CAAC7C,MAAM,CAACmB,OAAO,CACkB,iCAAAgB,gBAAgB,CAACC,oBAAqD,kCAC1G;IACJ;;IAGD,IACI,IAAI,CAACvC,MAAM,CAACiD,KAAK,CAACC,yBAAyB,IAC3CnB,OAAO,CAACoB,MAAM;;IAEd,CAACC,WAAW,CAACC,UAAU,CAACtB,OAAO,CAACoB,MAAM,CAAC,EACzC;MACEb,gBAAgB,CAACgB,mBAAmB,GAChC,MAAM,IAAI,CAACpD,aAAa,CAACqD,UAAU,CAACxB,OAAO,CAACoB,MAAM,CAAC;IAC1D;IAED,OAAOb,gBAAgB;;EAG3B;;;;;;AAMG;EACHkB,cAAcA,CAACC,kBAA2B;IACtC,IAAI,CAACtD,MAAM,CAACmB,OAAO,CAAC,uBAAuB,CAAC;IAC5C,MAAMoC,WAAW,GACbD,kBAAkB,IAClB,IAAI,CAACzD,MAAM,CAACoC,IAAI,CAACsB,WAAW,IAC5BC,aAA0B,EAAE;IAChC,OAAOC,SAAS,CAACC,cAAc,CAC3BH,WAAW,EACXC,aAA0B,EAAE,CAC/B;;EAGL;;;;;AAKG;EACOG,gCAAgCA,CACtCC,KAAa,EACbC,YAAsB;IAEtB,IAAI,CAAC7D,MAAM,CAACmB,OAAO,CAAC,yCAAyC,CAAC;IAC9D,MAAM2C,gBAAgB,GAA2B;MAC7CC,QAAQ,EAAE,IAAI,CAAClE,MAAM,CAACoC,IAAI,CAAC8B,QAAQ;MACnC1D,aAAa,EAAE,IAAI,CAACA,aAAa;MACjCuD,KAAK,EAAEA,KAAK;MACZC,YAAY,EAAEA,YAAY,IAAI,KAAK;MACnCG,UAAU,EAAE,IAAI,CAAC1D,cAAc,CAAC2D,kBAAkB,EAAE,CAAC,CAAC,CAAC;MACvDC,UAAU,EAAE,IAAI,CAAC5D,cAAc,CAAC2D,kBAAkB,EAAE,CAAC,CAAC;KACzD;IAED,OAAO,IAAIE,sBAAsB,CAC7BL,gBAAgB,EAChB,IAAI,CAACxD,cAAc,CACtB;;EAGL;;;;;AAKG;EACO,MAAM8D,sBAAsBA,CAClCC,gBAAyB,EACzBC,wBAA4C,EAC5CvD,OAAqB;IAErB,IAAI,CAACZ,iBAAiB,CAAC0B,mBAAmB,CACtCC,iBAAiB,CAACyC,+CAA+C,EACjE,IAAI,CAAClE,aAAa,CACrB;IACD,MAAMmE,gBAAgB,GAAqB;MACvCC,YAAY,EAAE,IAAI,CAAC5E,MAAM,CAACoC,IAAI,CAACwC,YAAY;MAC3CC,WAAW,EAAE,IAAI,CAAC7E,MAAM,CAACoC,IAAI,CAACyC,WAAW;MACzCC,gBAAgB,EAAE,IAAI,CAAC9E,MAAM,CAACoC,IAAI,CAAC0C,gBAAgB;MACnDC,sBAAsB,EAAE,IAAI,CAAC/E,MAAM,CAACoC,IAAI,CAAC2C,sBAAsB;MAC/DC,iBAAiB,EAAE,IAAI,CAAChF,MAAM,CAACoC,IAAI,CAAC4C,iBAAiB;MACrDC,0BAA0B,EACtB,IAAI,CAACjF,MAAM,CAACoC,IAAI,CAAC6C;KACxB;;IAGD,MAAMC,aAAa,GAAGV,gBAAgB,GAChCA,gBAAgB,GAChB,IAAI,CAACxE,MAAM,CAACoC,IAAI,CAACD,SAAS;;IAGhC,MAAMgD,cAAc,GAAGC,SAAS,CAACC,iBAAiB,CAC9CH,aAAa,EACbT,wBAAwB,IAAI,IAAI,CAACzE,MAAM,CAACoC,IAAI,CAACkD,iBAAiB,CACjE;IACD,MAAMC,mBAAmB,GAAG,MAAMC,WAAW,CACzCC,gBAAgB,CAACC,wBAAwB,EACzCzD,iBAAiB,CAAC0D,wCAAwC,EAC1D,IAAI,CAACxF,MAAM,EACX,IAAI,CAACG,iBAAiB,EACtB,IAAI,CAACE,aAAa,CACrB,CACG2E,cAAc,EACd,IAAI,CAACnF,MAAM,CAACW,MAAM,CAACD,aAAa,EAChC,IAAI,CAACD,cAAc,EACnBkE,gBAAgB,EAChB,IAAI,CAACxE,MAAM,EACX,IAAI,CAACK,aAAa,EAClB,IAAI,CAACF,iBAAiB,CACzB;IAED,IAAIY,OAAO,IAAI,CAACqE,mBAAmB,CAACK,OAAO,CAAC1E,OAAO,CAAC2E,WAAW,CAAC,EAAE;MAC9D,MAAMjD,8BAA8B,CAChCC,6BAA6B,CAACiD,iBAAiB,CAClD;IACJ;IAED,OAAOP,mBAAmB;;AAEjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}