{"ast":null,"code":"/*! @azure/msal-common v14.4.0 2023-11-07 */\n'use strict';\n\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nconst DEFAULT_CRYPTO_IMPLEMENTATION = {\n  createNewGuid: () => {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  base64Decode: () => {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  base64Encode: () => {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  async getPublicKeyThumbprint() {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  async removeTokenBindingKey() {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  async clearKeystore() {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  async signJwt() {\n    throw createClientAuthError(methodNotImplemented);\n  },\n  async hashString() {\n    throw createClientAuthError(methodNotImplemented);\n  }\n};\nexport { DEFAULT_CRYPTO_IMPLEMENTATION };","map":{"version":3,"names":["createNewGuid","createClientAuthError","methodNotImplemented","base64Decode","base64Encode","removeTokenBindingKey","clearKeystore","hashString"],"sources":["D:\\react-typescript\\intelli-gui\\node_modules\\@azure\\msal-common\\src\\crypto\\ICrypto.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ClientAuthErrorCodes,\n    createClientAuthError,\n} from \"../error/ClientAuthError\";\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\nimport { ShrOptions, SignedHttpRequest } from \"./SignedHttpRequest\";\n\n/**\n * The PkceCodes type describes the structure\n * of objects that contain PKCE code\n * challenge and verifier pairs\n */\nexport type PkceCodes = {\n    verifier: string;\n    challenge: string;\n};\n\nexport type SignedHttpRequestParameters = Pick<\n    BaseAuthRequest,\n    | \"resourceRequestMethod\"\n    | \"resourceRequestUri\"\n    | \"shrClaims\"\n    | \"shrNonce\"\n    | \"shrOptions\"\n> & {\n    correlationId?: string;\n};\n\n/**\n * Interface for crypto functions used by library\n */\nexport interface ICrypto {\n    /**\n     * Creates a guid randomly.\n     */\n    createNewGuid(): string;\n    /**\n     * base64 Encode string\n     * @param input\n     */\n    base64Encode(input: string): string;\n    /**\n     * base64 decode string\n     * @param input\n     */\n    base64Decode(input: string): string;\n    /**\n     * Generates an JWK RSA S256 Thumbprint\n     * @param request\n     */\n    getPublicKeyThumbprint(\n        request: SignedHttpRequestParameters\n    ): Promise<string>;\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid\n     */\n    removeTokenBindingKey(kid: string): Promise<boolean>;\n    /**\n     * Removes all cryptographic keys from IndexedDB storage\n     */\n    clearKeystore(): Promise<boolean>;\n    /**\n     * Returns a signed proof-of-possession token with a given acces token that contains a cnf claim with the required kid.\n     * @param accessToken\n     */\n    signJwt(\n        payload: SignedHttpRequest,\n        kid: string,\n        shrOptions?: ShrOptions,\n        correlationId?: string\n    ): Promise<string>;\n    /**\n     * Returns the SHA-256 hash of an input string\n     * @param plainText\n     */\n    hashString(plainText: string): Promise<string>;\n}\n\nexport const DEFAULT_CRYPTO_IMPLEMENTATION: ICrypto = {\n    createNewGuid: (): string => {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    base64Decode: (): string => {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    base64Encode: (): string => {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    async getPublicKeyThumbprint(): Promise<string> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    async removeTokenBindingKey(): Promise<boolean> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    async clearKeystore(): Promise<boolean> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    async signJwt(): Promise<string> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n    async hashString(): Promise<string> {\n        throw createClientAuthError(ClientAuthErrorCodes.methodNotImplemented);\n    },\n};\n"],"mappings":";;;;;;AASA;AACA;AAEA;;;EAIGA,aAAA,EAAAA,CAAA;IACG,MAAAC,qBAAkB,CAAAC,oBAAA;GACZ;EACRC,YAAA,EAAAA,CAAA,KAAkB;IACpB,MAAAF,qBAAA,CAAAC,oBAAA;EAEF;EAQIE,YAAa,EAACA,CAAA,KAAE;IAClB,MAAAH,qBAAA,CAAAC,oBAAA;EAEF;;IAEG,MAAAD,qBAAA,CAAAC,oBAAA;EACH;EACI,MAAAG,sBAAA;;EAEG;EACH,MAAaC,cAAA;IACb,MAAAL,qBAAA,CAAAC,oBAAA;;;IAGG,MAAAD,qBAAA,CAAAC,oBAAA;EACH;EACA,MAAAK,WAAA;;;AAGG"},"metadata":{},"sourceType":"module","externalDependencies":[]}