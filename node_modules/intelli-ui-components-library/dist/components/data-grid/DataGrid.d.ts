import React, { ReactNode } from "react";
export interface GridColDef {
    field: string;
    displayName?: string;
    width?: number;
    isSelectable?: boolean;
    editable?: boolean;
    sortable?: boolean;
    type?: string;
    description?: string;
    valueGetter?: (params: any) => string;
    renderCell?: (params: any) => React.ReactNode;
    renderHeader?: (params: any) => ReactNode;
}
export interface DataGridProps {
    rows: object[];
    columns: GridColDef[];
    /** className props used for define the custome class of Animatebutton */
    className?: string;
    /** children props used for define that allows us to pass in any type of element */
    children?: ReactNode;
    /**style props used for create a cutsome css for styling */
    style?: Record<string, unknown>;
}
export interface DataGridActionsProps {
    /** children props used for define that allows us to pass in any type of element */
    children?: ReactNode;
    /** className props used for define the custome class of Animatebutton */
    className?: string;
    /**style props used for create a cutsome css for styling */
    style?: Record<string, unknown>;
}
export interface DataGridHeaderProps {
    rows?: any[];
    columns: GridColDef[];
    /** className props used for define the custome class of Animatebutton */
    className?: string;
    /**style props used for create a cutsome css for styling */
    style?: Record<string, unknown>;
}
export interface DataGridRowProps {
    columns: GridColDef[];
    /** className props used for define the custome class of Animatebutton */
    className?: string;
    /**style props used for create a cutsome css for styling */
    style?: Record<string, unknown>;
}
export interface DataGridFooterProps {
    /** children props used for define that allows us to pass in any type of element */
    children?: ReactNode;
    /** className props used for define the custome class of Animatebutton */
    className?: string;
    /**style props used for create a cutsome css for styling */
    style?: Record<string, unknown>;
}
/** When pressed, a floating action button can display three to six related actions in the form of a Speed Dial. */
declare const DataGrid: React.FC<DataGridProps> & {
    DataGridActions: React.FC<DataGridActionsProps>;
} & {
    Header: React.FC<DataGridHeaderProps>;
} & {
    Footer: React.FC<DataGridFooterProps>;
};
export default DataGrid;
