import React from "react";
interface IsettingProps {
    modalId?: string;
    className?: string;
    variant?: string;
}
export interface ModalProps {
    children?: React.ReactNode;
    /** onHidden props is a function, we can pass true or false , if we can pass false then click on backdrop it will remove */
    onHidden?: () => void;
    /** setting props is object we can pass modalId, className or variant */
    setting?: IsettingProps;
    /** showOverlay props used for define to show the backdrop if showOverlay is true */
    showOverlay?: boolean;
    childClassName?: string;
}
export interface ModalHeaderProps {
    children?: React.ReactNode;
    className?: string;
}
export interface ModalBodyProps {
    children?: React.ReactNode;
    className?: string;
}
export interface ModalCloseIconProps {
    children?: React.ReactNode;
    onClick?: () => void;
    className?: string;
}
export interface ModalCenterButtonProps {
    children?: React.ReactNode;
    className?: string;
    btnClick?: (e: any) => void;
    variant?: "primary" | "default" | "success" | "error" | "info" | "warning";
}
export interface ModalFooterButtonProps {
    children?: React.ReactNode;
    btnProp?: object;
    bottomButton?: boolean;
    className?: string;
}
export interface ModalBtnProps {
    children?: React.ReactNode;
    btnProp?: object;
    onClick?: (e: any) => void;
    className?: string;
}
/**The modal component provides a solid foundation for creating dialogs, popovers, lightboxes, or whatever else. */
declare const Modal: React.FC<ModalProps> & {
    Header: React.FC<ModalHeaderProps>;
} & {
    Body: React.FC<ModalBodyProps>;
} & {
    CloseIcon: React.FC<ModalCloseIconProps>;
} & {
    Footer: React.FC<ModalFooterButtonProps>;
} & {
    CenterButton: React.FC<ModalCenterButtonProps>;
} & {
    Btn: React.FC<ModalBtnProps>;
};
export default Modal;
